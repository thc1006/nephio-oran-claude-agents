version: '3.8'

# Docker Compose for testing Prometheus 3.5 LTS and Grafana 12.x
# Run: docker compose up -d
# Verify: 
#   - Prometheus: http://localhost:9090/-/ready
#   - Grafana: http://localhost:3000 (admin/admin)

services:
  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus-3x
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      # New flags in Prometheus 3.x
      - '--enable-feature=native-histograms'
      - '--enable-feature=utf8-metric-names'
      - '--enable-feature=memory-snapshot-on-shutdown'
      - '--enable-feature=new-service-discovery-manager'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      # Changed in 3.x: remote write protocol
      - '--enable-feature=remote-write-v2'
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml:ro
      - ./rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana-12x
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=http://localhost:3000
      # New in Grafana 12.x
      - GF_FEATURE_TOGGLES_ENABLE=scenes,canvasPanel,correlations,newTraceView
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_LOG_LEVEL=info
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - ./grafana-config.yaml:/etc/grafana/provisioning/datasources/prometheus.yaml:ro
      - ./dashboards:/etc/grafana/provisioning/dashboards:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Node Exporter for testing metrics
  node-exporter:
    image: prom/node-exporter:v1.8.0
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring
    restart: unless-stopped

  # Alertmanager for testing alerting
  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./alertmanager-config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring
    restart: unless-stopped

  # VictoriaMetrics for long-term storage (optional)
  victoria-metrics:
    image: victoriametrics/victoria-metrics:v1.101.0
    container_name: victoria-metrics
    command:
      - '-storageDataPath=/storage'
      - '-retentionPeriod=90d'
      - '-httpListenAddr=:8428'
      - '-promscrape.config=/etc/prometheus/prometheus.yml'
    volumes:
      - ./prometheus-config.yaml:/etc/prometheus/prometheus.yml:ro
      - vm_data:/storage
    ports:
      - "8428:8428"
    networks:
      - monitoring
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  vm_data:
    driver: local