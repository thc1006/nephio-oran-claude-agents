# Redis Cache Deployment for Nephio O-RAN Performance Optimization
# This configuration provides a highly available Redis cluster for caching
---
apiVersion: v1
kind: Namespace
metadata:
  name: cache-layer
  labels:
    name: cache-layer
    purpose: performance-optimization

---
# Redis configuration ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: cache-layer
data:
  redis.conf: |
    # Redis performance optimization configuration
    
    # Network and general
    bind 0.0.0.0
    protected-mode yes
    port 6379
    tcp-backlog 511
    tcp-keepalive 300
    timeout 0
    
    # Memory management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    maxmemory-samples 5
    
    # Persistence (disabled for cache-only mode)
    save ""
    appendonly no
    
    # Performance tuning
    rdbcompression no
    rdbchecksum no
    stop-writes-on-bgsave-error no
    
    # Replication
    repl-diskless-sync yes
    repl-diskless-sync-delay 5
    repl-ping-replica-period 10
    repl-timeout 60
    repl-disable-tcp-nodelay no
    repl-backlog-size 16mb
    repl-backlog-ttl 3600
    
    # Limits
    maxclients 10000
    
    # Threading
    io-threads 4
    io-threads-do-reads yes
    
    # Slow log
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # Latency monitoring
    latency-monitor-threshold 100
    
    # Active defragmentation
    activedefrag yes
    active-defrag-ignore-bytes 100mb
    active-defrag-threshold-lower 10
    active-defrag-threshold-upper 25
    active-defrag-cycle-min 5
    active-defrag-cycle-max 75
    
    # Client output buffer limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60

---
# Redis StatefulSet for HA deployment
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cache
  namespace: cache-layer
spec:
  serviceName: redis-cache
  replicas: 3
  selector:
    matchLabels:
      app: redis-cache
  template:
    metadata:
      labels:
        app: redis-cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis-cache
            topologyKey: kubernetes.io/hostname
      containers:
      # Redis container
      - name: redis
        image: redis:7-alpine
        command: ["redis-server"]
        args: ["/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
          name: redis
        resources:
          requests:
            memory: 512Mi
            cpu: 250m
          limits:
            memory: 1Gi
            cpu: 500m
        volumeMounts:
        - name: config
          mountPath: /etc/redis
        - name: data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
      
      # Redis exporter for Prometheus metrics
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        resources:
          requests:
            memory: 64Mi
            cpu: 50m
          limits:
            memory: 128Mi
            cpu: 100m
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
      
      volumes:
      - name: config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cache
  namespace: cache-layer
  labels:
    app: redis-cache
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for StatefulSet
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app: redis-cache

---
# Redis Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: redis-cache-lb
  namespace: cache-layer
  labels:
    app: redis-cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  selector:
    app: redis-cache

---
# HorizontalPodAutoscaler for Redis
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-cache-hpa
  namespace: cache-layer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: redis-cache
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30

---
# NetworkPolicy for Redis security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-cache-netpol
  namespace: cache-layer
spec:
  podSelector:
    matchLabels:
      app: redis-cache
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    # Allow from O-RAN namespaces
    - namespaceSelector:
        matchLabels:
          name: oran-du
    - namespaceSelector:
        matchLabels:
          name: oran-cu
    - namespaceSelector:
        matchLabels:
          name: oran-ric
    - namespaceSelector:
        matchLabels:
          name: oran-core
    # Allow from monitoring namespace
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 9121
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis-cache
    ports:
    - protocol: TCP
      port: 6379
  # Allow DNS
  - to:
    - namespaceSelector: {}
      podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-cache-pdb
  namespace: cache-layer
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: redis-cache

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-cache-metrics
  namespace: cache-layer
  labels:
    app: redis-cache
spec:
  selector:
    matchLabels:
      app: redis-cache
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# Redis Sentinel for HA (optional)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-sentinel
  namespace: cache-layer
spec:
  serviceName: redis-sentinel
  replicas: 3
  selector:
    matchLabels:
      app: redis-sentinel
  template:
    metadata:
      labels:
        app: redis-sentinel
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - redis-sentinel
            topologyKey: kubernetes.io/hostname
      containers:
      - name: sentinel
        image: redis:7-alpine
        command: ["redis-sentinel"]
        args: ["/etc/redis/sentinel.conf"]
        ports:
        - containerPort: 26379
          name: sentinel
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 256Mi
            cpu: 200m
        volumeMounts:
        - name: sentinel-config
          mountPath: /etc/redis
      volumes:
      - name: sentinel-config
        configMap:
          name: redis-sentinel-config

---
# Sentinel configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-sentinel-config
  namespace: cache-layer
data:
  sentinel.conf: |
    port 26379
    bind 0.0.0.0
    sentinel monitor mymaster redis-cache-0.redis-cache.cache-layer.svc.cluster.local 6379 2
    sentinel down-after-milliseconds mymaster 5000
    sentinel parallel-syncs mymaster 1
    sentinel failover-timeout mymaster 10000
    sentinel auth-pass mymaster ${REDIS_PASSWORD}

---
# Sentinel Service
apiVersion: v1
kind: Service
metadata:
  name: redis-sentinel
  namespace: cache-layer
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 26379
    targetPort: 26379
    name: sentinel
  selector:
    app: redis-sentinel