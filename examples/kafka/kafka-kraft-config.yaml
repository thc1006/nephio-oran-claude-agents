# Kafka KRaft Mode Configuration for Nephio-O-RAN
# Kafka 3.8.x with KRaft mode (no ZooKeeper required)
# Compatible with COMPATIBILITY_MATRIX.md

apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: nephio-kafka
  namespace: kafka
  labels:
    app: kafka
    version: "3.8.0"
    mode: kraft
spec:
  kafka:
    version: 3.8.0
    replicas: 3
    
    # Listeners configuration
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
      - name: external
        port: 9094
        type: loadbalancer
        tls: true
    
    # KRaft mode configuration (no ZooKeeper!)
    config:
      # KRaft specific settings
      process.roles: "broker,controller"
      node.id: "${KAFKA_NODE_ID}"
      controller.quorum.voters: "1@nephio-kafka-0.nephio-kafka-brokers.kafka.svc:9093,2@nephio-kafka-1.nephio-kafka-brokers.kafka.svc:9093,3@nephio-kafka-2.nephio-kafka-brokers.kafka.svc:9093"
      
      # Listener configuration
      inter.broker.listener.name: "PLAIN"
      controller.listener.names: "CONTROLLER"
      listener.security.protocol.map: "CONTROLLER:PLAINTEXT,PLAIN:PLAINTEXT,TLS:SSL,EXTERNAL:SSL"
      
      # Replication settings
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      
      # Performance tuning for O-RAN workloads
      num.network.threads: 12
      num.io.threads: 12
      socket.send.buffer.bytes: 1048576
      socket.receive.buffer.bytes: 1048576
      socket.request.max.bytes: 104857600
      num.partitions: 12
      
      # Log retention for telemetry data
      log.retention.hours: 168  # 7 days
      log.segment.bytes: 1073741824  # 1GB
      log.retention.check.interval.ms: 300000
      
      # Compression for efficient storage
      compression.type: "snappy"
      
      # Auto topic creation for dynamic O-RAN components
      auto.create.topics.enable: true
      
    # Storage configuration
    storage:
      type: persistent-claim
      size: 200Gi
      class: fast-ssd
      deleteClaim: false
    
    # Resource requests and limits
    resources:
      requests:
        memory: 4Gi
        cpu: 2000m
      limits:
        memory: 8Gi
        cpu: 4000m
    
    # JVM options for optimal performance
    jvmOptions:
      -Xms: 3072m
      -Xmx: 3072m
      -XX:
        - UseG1GC
        - MaxGCPauseMillis=20
        - InitiatingHeapOccupancyPercent=35
        - ExplicitGCInvokesConcurrent
    
    # Metrics configuration for Prometheus
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: kafka-metrics
          key: kafka-metrics-config.yml
    
    # Rack awareness for multi-AZ deployments
    rack:
      topologyKey: topology.kubernetes.io/zone
    
  # Entity Operator for topic and user management
  entityOperator:
    topicOperator:
      resources:
        requests:
          memory: 512Mi
          cpu: 500m
    userOperator:
      resources:
        requests:
          memory: 512Mi
          cpu: 500m
  
  # Cruise Control for cluster balancing
  cruiseControl:
    brokerCapacity:
      disk: 200Gi
      cpu: 4000m
    config:
      sample.store.topic.replication.factor: 3
      metric.reporter.topic.replication.factor: 3
    resources:
      requests:
        memory: 1Gi
        cpu: 500m
      limits:
        memory: 2Gi
        cpu: 1000m

---
# ConfigMap for JMX metrics
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-metrics
  namespace: kafka
data:
  kafka-metrics-config.yml: |
    # Prometheus JMX exporter configuration
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    whitelistObjectNames:
      - kafka.server:*
      - kafka.controller:*
      - kafka.network:*
      - kafka.log:*
      - kafka.cluster:*
    rules:
    # Kafka server metrics
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
        clientId: "$3"
        topic: "$4"
        partition: "$5"
    - pattern: kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value
      name: kafka_server_$1_$2
      type: GAUGE
      labels:
        clientId: "$3"
        broker: "$4:$5"
    # Controller metrics
    - pattern: kafka.controller<type=(.+), name=(.+)><>Value
      name: kafka_controller_$1_$2
      type: GAUGE
    # Network metrics
    - pattern: kafka.network<type=(.+), name=(.+)><>Value
      name: kafka_network_$1_$2
      type: GAUGE
    # Log metrics
    - pattern: kafka.log<type=(.+), name=(.+), topic=(.+), partition=(.+)><>Value
      name: kafka_log_$1_$2
      type: GAUGE
      labels:
        topic: "$3"
        partition: "$4"

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: kafka-metrics
  namespace: kafka
  labels:
    app: kafka
spec:
  selector:
    matchLabels:
      app: kafka
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
# NetworkPolicy for Kafka security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kafka-network-policy
  namespace: kafka
spec:
  podSelector:
    matchLabels:
      app: kafka
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: nephio-system
    - namespaceSelector:
        matchLabels:
          name: oran
    ports:
    - protocol: TCP
      port: 9092
    - protocol: TCP
      port: 9093
    - protocol: TCP
      port: 9094
  egress:
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# Example Kafka topic for O-RAN telemetry
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: oran-telemetry
  namespace: kafka
  labels:
    strimzi.io/cluster: nephio-kafka
spec:
  partitions: 12
  replicas: 3
  config:
    retention.ms: 604800000  # 7 days
    segment.ms: 86400000  # 1 day
    compression.type: snappy
    min.insync.replicas: 2

---
# Example Kafka user for O-RAN components
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: oran-producer
  namespace: kafka
  labels:
    strimzi.io/cluster: nephio-kafka
spec:
  authentication:
    type: tls
  authorization:
    type: simple
    acls:
    - resource:
        type: topic
        name: oran-telemetry
        patternType: literal
      operations:
      - Write
      - Describe
    - resource:
        type: group
        name: oran-consumers
        patternType: literal
      operations:
      - Read