name: Build, Test & Deploy Pipeline

# Comprehensive CI/CD pipeline for Nephio O-RAN Claude Agents
# Features: Multi-language builds, security scanning, quality gates, GitOps deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Security and concurrency controls
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  id-token: write
  pull-requests: write

env:
  # Language versions
  GO_VERSION: '1.24.6'
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  
  # Container registry
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  
  # Quality gates
  MIN_COVERAGE: 80
  SECURITY_SEVERITY_THRESHOLD: 'HIGH'
  
  # ArgoCD
  ARGOCD_SERVER: argocd.nephio.cluster.local
  ARGOCD_APP_PREFIX: nephio-oran
  
  # Cache keys
  CACHE_VERSION: 'v3'

jobs:
  # =======================
  # SETUP & VALIDATION
  # =======================
  setup:
    name: Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      go-changed: ${{ steps.changes.outputs.go }}
      node-changed: ${{ steps.changes.outputs.node }}
      python-changed: ${{ steps.changes.outputs.python }}
      k8s-changed: ${{ steps.changes.outputs.k8s }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      version: ${{ steps.version.outputs.version }}
      sha-short: ${{ steps.version.outputs.sha-short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
              - 'Makefile'
            node:
              - 'website/**'
              - 'package*.json'
            python:
              - '**/*.py'
              - 'requirements.txt'
              - 'tests/**'
            k8s:
              - 'deployments/**'
              - 'config/**'
              - 'examples/**/*.yaml'
              - 'examples/**/*.yml'
            docker:
              - '**/Dockerfile*'
              - 'docker-compose*.yml'
              - '.dockerignore'
      
      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION="main-$(date +%Y%m%d)-${GITHUB_SHA:0:8}"
          else
            VERSION="${GITHUB_REF_NAME}-${GITHUB_SHA:0:8}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "sha-short=${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # =======================
  # SECURITY SCANNING
  # =======================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        if: needs.setup.outputs.go-changed == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Setup Node.js
        if: needs.setup.outputs.node-changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'
      
      # Go security scanning
      - name: Run Gosec security scanner
        if: needs.setup.outputs.go-changed == 'true'
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
        continue-on-error: true
      
      - name: Upload Gosec results
        if: needs.setup.outputs.go-changed == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
      
      # Dependencies security scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Secrets scanning
      - name: Run GitLeaks secrets detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      # Node.js security audit
      - name: Node.js security audit
        if: needs.setup.outputs.node-changed == 'true'
        working-directory: website
        run: |
          npm ci --audit=false
          npm audit --audit-level moderate --format json > npm-audit.json || true
          if [ -s npm-audit.json ]; then
            HIGH=$(cat npm-audit.json | jq '.metadata.vulnerabilities.high // 0')
            CRITICAL=$(cat npm-audit.json | jq '.metadata.vulnerabilities.critical // 0')
            if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
              echo "High/Critical vulnerabilities found: High=$HIGH, Critical=$CRITICAL"
              npm audit --audit-level moderate
              exit 1
            fi
          fi

  # =======================
  # GO BUILD & TEST
  # =======================
  go-build-test:
    name: Go Build & Test
    runs-on: ubuntu-latest
    needs: [setup, security-scan]
    if: needs.setup.outputs.go-changed == 'true' && !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.CACHE_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.CACHE_VERSION }}-
      
      - name: Download dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.7"
      
      - name: Run tests with coverage
        run: |
          go test -v -race -covermode=atomic -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
      
      - name: Check test coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Test coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < ${{ env.MIN_COVERAGE }}" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below minimum ${{ env.MIN_COVERAGE }}%"
            exit 1
          fi
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: golang
          name: go-coverage
      
      - name: Build binaries
        run: |
          mkdir -p dist
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ needs.setup.outputs.version }}" -o dist/nephio-agent-linux-amd64 ./cmd/agent
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ needs.setup.outputs.version }}" -o dist/nephio-agent-darwin-amd64 ./cmd/agent
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ needs.setup.outputs.version }}" -o dist/nephio-agent-windows-amd64.exe ./cmd/agent
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries-${{ needs.setup.outputs.sha-short }}
          path: dist/
          retention-days: 30

  # =======================
  # NODE.JS BUILD & TEST
  # =======================
  node-build-test:
    name: Node.js Build & Test
    runs-on: ubuntu-latest
    needs: [setup, security-scan]
    if: needs.setup.outputs.node-changed == 'true' && !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'
      
      - name: Install dependencies
        working-directory: website
        run: npm ci --prefer-offline
      
      - name: Type checking
        working-directory: website
        run: npm run typecheck
      
      - name: Linting
        working-directory: website
        run: npm run lint:check
      
      - name: Format checking
        working-directory: website
        run: npm run format:check
      
      - name: Unit tests
        working-directory: website
        run: npm run test:unit:coverage
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./website/coverage/lcov.info
          flags: javascript
          name: js-coverage
      
      - name: Build website
        working-directory: website
        run: npm run build:ci
        env:
          NODE_ENV: production
      
      - name: Upload website build
        uses: actions/upload-artifact@v4
        with:
          name: website-build-${{ needs.setup.outputs.sha-short }}
          path: website/build/
          retention-days: 30

  # =======================
  # PYTHON TESTS
  # =======================
  python-test:
    name: Python Tests
    runs-on: ubuntu-latest
    needs: [setup, security-scan]
    if: needs.setup.outputs.python-changed == 'true' && !inputs.skip_tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov bandit safety
      
      - name: Security scan with Bandit
        run: bandit -r tests/ -f json -o bandit-report.json || true
      
      - name: Safety check
        run: safety check --json --output safety-report.json || true
      
      - name: Run tests
        run: |
          python -m pytest tests/ --cov=. --cov-report=xml --cov-report=html -v
      
      - name: Upload Python coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage

  # =======================
  # DOCKER BUILD
  # =======================
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [setup, go-build-test, node-build-test]
    if: always() && (needs.go-build-test.result == 'success' || needs.go-build-test.result == 'skipped') && (needs.node-build-test.result == 'success' || needs.node-build-test.result == 'skipped')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.imageurl }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Download Go binaries
        if: needs.setup.outputs.go-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: go-binaries-${{ needs.setup.outputs.sha-short }}
          path: dist/
      
      - name: Download website build
        if: needs.setup.outputs.node-changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ needs.setup.outputs.sha-short }}
          path: website/build/
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.multi-stage
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.sha-short }}
      
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.sha-short }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
      
      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image-results.sarif'

  # =======================
  # QUALITY GATES
  # =======================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [setup, security-scan, go-build-test, node-build-test, python-test, docker-build]
    if: always()
    steps:
      - name: Evaluate quality gate
        run: |
          echo "=== Quality Gate Evaluation ==="
          
          # Check job results
          SECURITY_RESULT="${{ needs.security-scan.result }}"
          GO_RESULT="${{ needs.go-build-test.result }}"
          NODE_RESULT="${{ needs.node-build-test.result }}"
          PYTHON_RESULT="${{ needs.python-test.result }}"
          DOCKER_RESULT="${{ needs.docker-build.result }}"
          
          echo "Security Scan: $SECURITY_RESULT"
          echo "Go Build/Test: $GO_RESULT"
          echo "Node Build/Test: $NODE_RESULT"
          echo "Python Test: $PYTHON_RESULT"
          echo "Docker Build: $DOCKER_RESULT"
          
          # Fail if any critical job failed
          if [[ "$SECURITY_RESULT" == "failure" ]]; then
            echo "❌ Quality gate failed: Security scan failed"
            exit 1
          fi
          
          if [[ "$GO_RESULT" == "failure" ]]; then
            echo "❌ Quality gate failed: Go build/test failed"
            exit 1
          fi
          
          if [[ "$NODE_RESULT" == "failure" ]]; then
            echo "❌ Quality gate failed: Node build/test failed"
            exit 1
          fi
          
          if [[ "$PYTHON_RESULT" == "failure" ]]; then
            echo "❌ Quality gate failed: Python test failed"
            exit 1
          fi
          
          if [[ "$DOCKER_RESULT" == "failure" ]]; then
            echo "❌ Quality gate failed: Docker build failed"
            exit 1
          fi
          
          echo "✅ Quality gate passed: All checks successful"

  # =======================
  # DEPLOYMENT
  # =======================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, docker-build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update manifests for dev
        run: |
          # Update Kustomize overlays for development environment
          cd deployments/overlays/dev
          kustomize edit set image nephio-oran=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.sha-short }}
      
      - name: Deploy to ArgoCD
        run: |
          # Trigger ArgoCD sync
          echo "Deploying ${{ needs.setup.outputs.version }} to development"
          # This would typically use argocd CLI or API
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/${{ env.ARGOCD_APP_PREFIX }}-dev/sync" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" || echo "ArgoCD sync failed, continuing..."

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, docker-build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update manifests for staging
        run: |
          cd deployments/overlays/staging
          kustomize edit set image nephio-oran=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.sha-short }}
      
      - name: Deploy to ArgoCD
        run: |
          echo "Deploying ${{ needs.setup.outputs.version }} to staging"
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/${{ env.ARGOCD_APP_PREFIX }}-staging/sync" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" || echo "ArgoCD sync failed, continuing..."

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup, quality-gate, docker-build]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'prod')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update manifests for production
        run: |
          cd deployments/overlays/prod
          kustomize edit set image nephio-oran=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name || needs.setup.outputs.sha-short }}
      
      - name: Deploy to ArgoCD
        run: |
          echo "Deploying ${{ needs.setup.outputs.version }} to production"
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/${{ env.ARGOCD_APP_PREFIX }}-prod/sync" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" || echo "ArgoCD sync failed, continuing..."
      
      - name: Create deployment annotation
        run: |
          echo "🚀 Production deployment completed" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "Image: ${{ needs.docker-build.outputs.image-url }}" >> $GITHUB_STEP_SUMMARY

  # =======================
  # ROLLBACK CAPABILITY
  # =======================
  rollback:
    name: Automated Rollback
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: failure() && (needs.deploy-dev.result == 'failure' || needs.deploy-staging.result == 'failure' || needs.deploy-prod.result == 'failure')
    environment: rollback-approval
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Automated rollback initiated due to deployment failure"
          
          # Determine which environment failed
          if [[ "${{ needs.deploy-prod.result }}" == "failure" ]]; then
            ENV="prod"
          elif [[ "${{ needs.deploy-staging.result }}" == "failure" ]]; then
            ENV="staging"
          else
            ENV="dev"
          fi
          
          echo "Rolling back $ENV environment"
          
          # Trigger rollback via ArgoCD
          curl -X POST "${{ env.ARGOCD_SERVER }}/api/v1/applications/${{ env.ARGOCD_APP_PREFIX }}-${ENV}/rollback" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" || echo "ArgoCD rollback failed"

  # =======================
  # MONITORING & ALERTS
  # =======================
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-prod.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests"
          
          # Determine target environment
          if [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
            ENDPOINT="https://nephio-oran.prod.cluster.local"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            ENDPOINT="https://nephio-oran.staging.cluster.local"
          else
            ENDPOINT="https://nephio-oran.dev.cluster.local"
          fi
          
          echo "Testing endpoint: $ENDPOINT"
          
          # Basic health check
          curl -f "$ENDPOINT/health" || exit 1
          
          # API responsiveness test
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$ENDPOINT/api/v1/status")
          echo "API response time: ${RESPONSE_TIME}s"
          
          # Check if response time is acceptable (under 2 seconds)
          if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
            echo "❌ API response time too slow: ${RESPONSE_TIME}s"
            exit 1
          fi
          
          echo "✅ Smoke tests passed"
      
      - name: Run integration tests
        run: |
          # Run integration test suite
          python -m pytest tests/integration/ -v --tb=short

  # =======================
  # CLEANUP
  # =======================
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Delete artifacts older than 30 days
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.data.artifacts.filter(
              artifact => new Date(artifact.created_at) < thirtyDaysAgo
            );
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
      
      - name: Generate pipeline summary
        run: |
          echo "## 🚀 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Go Build/Test | ${{ needs.go-build-test.result == 'success' && '✅ Passed' || needs.go-build-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Node Build/Test | ${{ needs.node-build-test.result == 'success' && '✅ Passed' || needs.node-build-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Test | ${{ needs.python-test.result == 'success' && '✅ Passed' || needs.python-test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Gate | ${{ needs.quality-gate.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.setup.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY