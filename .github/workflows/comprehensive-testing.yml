name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - 'tests/**'
      - '.github/workflows/comprehensive-testing.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - 'tests/**'
      - '.github/workflows/comprehensive-testing.yml'
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
          - accessibility

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright
  CACHE_VERSION: 'v3'

jobs:
  # Test matrix setup
  setup-matrix:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Create test matrix
        id: matrix
        run: |
          MATRIX='{"include": [
            {"suite": "unit", "runner": "ubuntu-latest", "node": "20", "required": true},
            {"suite": "integration", "runner": "ubuntu-latest", "node": "20", "required": true},
            {"suite": "e2e", "runner": "ubuntu-latest", "node": "20", "required": true},
            {"suite": "performance", "runner": "ubuntu-latest", "node": "20", "required": false},
            {"suite": "security", "runner": "ubuntu-latest", "node": "20", "required": true},
            {"suite": "accessibility", "runner": "ubuntu-latest", "node": "20", "required": false}
          ]}'
          
          # Filter based on input if provided
          if [ "${{ github.event.inputs.test_suite }}" != "all" ] && [ "${{ github.event.inputs.test_suite }}" != "" ]; then
            MATRIX=$(echo $MATRIX | jq --arg suite "${{ github.event.inputs.test_suite }}" '.include |= map(select(.suite == $suite))')
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  # Dependencies and build
  build:
    name: Build & Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      build-cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: website
        run: |
          npm ci
          npx playwright install chromium firefox webkit
          npx playwright install-deps

      - name: Build website
        working-directory: website
        run: npm run build:ci

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: website/build/
          retention-days: 1

  # Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'unit') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Run unit tests with coverage
        working-directory: website
        run: |
          npm run test:unit:coverage -- --maxWorkers=2 --passWithNoTests
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: website/coverage
          flags: unit-tests
          name: unit-test-coverage
          fail_ci_if_error: false

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'website/coverage/coverage-summary.json';
            
            if (fs.existsSync(path)) {
              const coverage = JSON.parse(fs.readFileSync(path, 'utf8'));
              const { statements, branches, functions, lines } = coverage.total;
              
              const comment = `## 📊 Test Coverage Report
            
            | Coverage Type | Percentage | Status |
            |---------------|------------|---------|
            | Statements | ${statements.pct}% | ${statements.pct >= 80 ? '✅' : statements.pct >= 70 ? '⚠️' : '❌'} |
            | Branches | ${branches.pct}% | ${branches.pct >= 80 ? '✅' : branches.pct >= 70 ? '⚠️' : '❌'} |
            | Functions | ${functions.pct}% | ${functions.pct >= 80 ? '✅' : functions.pct >= 70 ? '⚠️' : '❌'} |
            | Lines | ${lines.pct}% | ${lines.pct >= 80 ? '✅' : lines.pct >= 70 ? '⚠️' : '❌'} |
            
            **Overall Coverage: ${Math.round((statements.pct + branches.pct + functions.pct + lines.pct) / 4)}%**
            `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            website/coverage/
            website/test-results/
          retention-days: 7

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'integration') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/

      - name: Start test server
        working-directory: website
        run: |
          npx serve build -p 3000 &
          echo $! > server.pid
        
      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'

      - name: Run integration tests
        working-directory: website
        run: |
          npm run test:unit -- --testPathPattern="integration" --passWithNoTests
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Stop test server
        if: always()
        run: |
          if [ -f website/server.pid ]; then
            kill $(cat website/server.pid) || true
            rm website/server.pid
          fi

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: website/test-results/
          retention-days: 7

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'e2e') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            required: true
          - browser: firefox  
            required: false
          - browser: webkit
            required: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/

      - name: Run E2E tests
        working-directory: website
        run: |
          npx playwright test --project=${{ matrix.browser }} --reporter=html,json
        env:
          CI: true

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            website/playwright-report/
            website/test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'performance') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        working-directory: website
        run: |
          cat > .lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "staticDistDir": "./build",
                "numberOfRuns": 3,
                "settings": {
                  "preset": "desktop"
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.85}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["warn", {"minScore": 0.8}],
                  "categories:seo": ["warn", {"minScore": 0.8}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF
          
          lhci autorun || true

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'security') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Run security audit
        working-directory: website
        run: |
          # Production dependencies audit
          npm audit --omit=dev --audit-level moderate --format json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          CRITICAL=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ]; then
            echo "::error::Critical security vulnerabilities found: $CRITICAL"
            exit 1
          elif [ "$HIGH" -gt 0 ]; then
            echo "::warning::High security vulnerabilities found: $HIGH"
          fi

      - name: Run security-focused unit tests
        working-directory: website
        run: |
          npm run test:unit -- --testPathPattern="security" --passWithNoTests
        env:
          CI: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/

      - name: Security headers test
        working-directory: website
        run: |
          npx serve build -p 3001 &
          SERVER_PID=$!
          sleep 5
          
          # Test security headers
          RESPONSE=$(curl -I -s http://localhost:3001/ || echo "FAILED")
          
          echo "Testing security headers..."
          echo "$RESPONSE"
          
          # Check for basic security headers
          if ! echo "$RESPONSE" | grep -i "x-content-type-options"; then
            echo "::warning::Missing X-Content-Type-Options header"
          fi
          
          if ! echo "$RESPONSE" | grep -i "x-frame-options"; then
            echo "::warning::Missing X-Frame-Options header"
          fi
          
          kill $SERVER_PID || true

      - name: Upload security test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            website/audit-results.json
            website/test-results/
          retention-days: 7

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build, setup-matrix]
    if: contains(fromJSON(needs.setup-matrix.outputs.test-matrix).include[*].suite, 'accessibility') || github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            website/node_modules
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-deps-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/

      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli pa11y-ci

      - name: Start test server
        working-directory: website
        run: |
          npx serve build -p 3002 &
          echo $! > server.pid

      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:3002 > /dev/null; do sleep 1; done'

      - name: Run axe accessibility tests
        run: |
          axe http://localhost:3002 \
            --reporter json \
            --output axe-results.json \
            --timeout 30000 || true
            
          if [ -f axe-results.json ]; then
            VIOLATIONS=$(cat axe-results.json | jq '.violations | length')
            echo "Accessibility violations found: $VIOLATIONS"
            
            if [ "$VIOLATIONS" -gt 0 ]; then
              echo "::warning::$VIOLATIONS accessibility violations found"
              cat axe-results.json | jq '.violations'
            fi
          fi

      - name: Run Pa11y tests
        run: |
          echo "http://localhost:3002" > urls.txt
          echo "http://localhost:3002/docs/intro" >> urls.txt
          echo "http://localhost:3002/docs/agents" >> urls.txt
          
          pa11y-ci --sitemap-find http://localhost:3002 \
            --sitemap-exclude "*.pdf" \
            --threshold 5 || true

      - name: Stop test server
        if: always()
        run: |
          if [ -f website/server.pid ]; then
            kill $(cat website/server.pid) || true
            rm website/server.pid
          fi

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: |
            axe-results.json
            pa11y-results/
          retention-days: 7

  # Test Summary and Reporting
  test-summary:
    name: Test Summary & Reporting
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, accessibility-tests]
    if: always()
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate test summary
        id: summary
        run: |
          echo "# 📋 Test Suite Results" >> summary.md
          echo "" >> summary.md
          
          # Job status summary
          echo "## 🎯 Test Suite Status" >> summary.md
          echo "" >> summary.md
          echo "| Test Suite | Status | Required |" >> summary.md
          echo "|------------|--------|----------|" >> summary.md
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | ✅ Yes |" >> summary.md
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | ✅ Yes |" >> summary.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} | ✅ Yes |" >> summary.md
          echo "| Performance Tests | ${{ needs.performance-tests.result }} | ⚠️ Optional |" >> summary.md
          echo "| Security Tests | ${{ needs.security-tests.result }} | ✅ Yes |" >> summary.md
          echo "| Accessibility Tests | ${{ needs.accessibility-tests.result }} | ⚠️ Optional |" >> summary.md
          echo "" >> summary.md
          
          # Coverage summary
          if [ -f "test-results/unit-test-results/coverage-summary.json" ]; then
            echo "## 📊 Coverage Report" >> summary.md
            echo "" >> summary.md
            echo "Coverage details available in artifacts." >> summary.md
            echo "" >> summary.md
          fi
          
          # Required tests check
          REQUIRED_FAILED=0
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then REQUIRED_FAILED=$((REQUIRED_FAILED + 1)); fi
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then REQUIRED_FAILED=$((REQUIRED_FAILED + 1)); fi
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then REQUIRED_FAILED=$((REQUIRED_FAILED + 1)); fi
          if [[ "${{ needs.security-tests.result }}" == "failure" ]]; then REQUIRED_FAILED=$((REQUIRED_FAILED + 1)); fi
          
          echo "## 🎯 Summary" >> summary.md
          echo "" >> summary.md
          if [ $REQUIRED_FAILED -eq 0 ]; then
            echo "✅ **All required tests passed!**" >> summary.md
            echo "required_tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ **$REQUIRED_FAILED required test suite(s) failed**" >> summary.md
            echo "required_tests_passed=false" >> $GITHUB_OUTPUT
          fi
          
          # Optional tests summary
          OPTIONAL_WARNINGS=0
          if [[ "${{ needs.performance-tests.result }}" == "failure" ]]; then OPTIONAL_WARNINGS=$((OPTIONAL_WARNINGS + 1)); fi
          if [[ "${{ needs.accessibility-tests.result }}" == "failure" ]]; then OPTIONAL_WARNINGS=$((OPTIONAL_WARNINGS + 1)); fi
          
          if [ $OPTIONAL_WARNINGS -gt 0 ]; then
            echo "" >> summary.md
            echo "⚠️ **$OPTIONAL_WARNINGS optional test suite(s) had issues**" >> summary.md
          fi

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('summary.md')) {
              const summary = fs.readFileSync('summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: summary.md
          retention-days: 30

      - name: Set job status
        run: |
          if [[ "${{ steps.summary.outputs.required_tests_passed }}" != "true" ]]; then
            echo "Required tests failed"
            exit 1
          fi
          echo "All required tests passed"

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always()
    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Clean up artifacts older than 7 days
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts for this run`);
            
            // Log artifact info but don't delete current run artifacts
            artifacts.data.artifacts.forEach(artifact => {
              console.log(`Artifact: ${artifact.name}, Size: ${artifact.size_in_bytes} bytes`);
            });