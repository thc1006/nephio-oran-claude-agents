name: Docker Build & Push - Fixed

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - 'docker/**'
      - 'Dockerfile*'
      - '.github/workflows/docker-build-push-fixed.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'website/**'
      - 'docker/**'
      - 'Dockerfile*'
      - '.github/workflows/docker-build-push-fixed.yml'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'

jobs:
  # Build website first
  build-website:
    name: Build Website
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: website/package-lock.json
      
      - name: Install dependencies
        working-directory: website
        run: npm ci
      
      - name: Build website
        working-directory: website
        run: npm run build:fast
        env:
          NODE_ENV: production
      
      - name: Upload website build
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: website/build/
          retention-days: 1

  # Docker build and push
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-website
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download website build
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: website/build/
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          
          # Copy website build files
          COPY website/build/ /usr/share/nginx/html/
          
          # Copy custom nginx config if it exists
          COPY docker/nginx.conf /etc/nginx/nginx.conf 2>/dev/null || echo "Using default nginx config"
          
          # Expose port 80
          EXPOSE 80
          
          # Health check
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost/ || exit 1
          
          # Start nginx
          CMD ["nginx", "-g", "daemon off;"]
          EOF
      
      - name: Create nginx config
        run: |
          mkdir -p docker
          cat > docker/nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              sendfile        on;
              keepalive_timeout  65;
              
              gzip on;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
              
              server {
                  listen       80;
                  server_name  localhost;
                  
                  location / {
                      root   /usr/share/nginx/html;
                      index  index.html index.htm;
                      try_files $uri $uri/ /index.html;
                  }
                  
                  # Cache static assets
                  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                      expires 1y;
                      add_header Cache-Control "public, no-transform";
                  }
                  
                  # Security headers
                  add_header X-Frame-Options DENY;
                  add_header X-Content-Type-Options nosniff;
                  add_header X-XSS-Protection "1; mode=block";
                  
                  error_page   500 502 503 504  /50x.html;
                  location = /50x.html {
                      root   /usr/share/nginx/html;
                  }
              }
          }
          EOF
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** " >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platform:** linux/amd64" >> $GITHUB_STEP_SUMMARY

  # Test the built image
  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Test image
        run: |
          # Get the first tag from the build output
          IMAGE_TAG=$(echo "${{ needs.docker-build.outputs.image-tags }}" | head -n1)
          echo "Testing image: $IMAGE_TAG"
          
          # Run the container
          docker run -d -p 8080:80 --name test-container $IMAGE_TAG
          
          # Wait for container to start
          sleep 10
          
          # Test if the website is accessible
          if curl -f http://localhost:8080; then
            echo "✅ Container test passed"
          else
            echo "❌ Container test failed"
            docker logs test-container
            exit 1
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container

  # Summary
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-website, docker-build, test-image]
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Website Build | ${{ needs.build-website.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Test | ${{ needs.test-image.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-website.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" && "${{ needs.test-image.result }}" == "success" ]]; then
            echo "🎉 **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some builds failed**" >> $GITHUB_STEP_SUMMARY
          fi