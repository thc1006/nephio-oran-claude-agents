name: CI - Build, Test & Validate

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - '.github/workflows/ci.yml'
      - 'agents/**'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'website/**'
      - '.github/workflows/ci.yml'
      - 'agents/**'
      - 'docs/**'
  workflow_dispatch:

# Cancel in-progress runs of the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v2'
  # Pre-install global tools to reduce runtime installation
  GLOBAL_TOOLS_CACHE_KEY: 'global-tools-v1'

jobs:
  # Shared setup job to prepare dependencies and tools
  setup:
    name: Setup Dependencies & Tools
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
      tools-cache-hit: ${{ steps.cache-tools.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: website/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Cache global tools
        id: cache-tools
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-${{ env.GLOBAL_TOOLS_CACHE_KEY }}-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GLOBAL_TOOLS_CACHE_KEY }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: website
        run: npm ci

      - name: Install global tools
        if: steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.npm-global
          npm config set prefix '~/.npm-global'
          export PATH=~/.npm-global/bin:$PATH
          npm install -g markdownlint-cli@latest linkinator@latest @axe-core/cli@latest @lhci/cli@latest

  # Content validation and grep checks
  validate-content:
    name: Validate Content & Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for banned phrases
        run: |
          echo "Checking for banned phrases..."
          BANNED_PHRASES=("expected later" "2024-2025" "beta.27")
          EXIT_CODE=0
          
          for phrase in "${BANNED_PHRASES[@]}"; do
            echo "Checking for: $phrase"
            # Exclude scripts directory from the search
            if grep -r --include="*.md" --include="*.mdx" --include="*.ts" --include="*.tsx" \
               --exclude-dir="scripts" \
               "$phrase" website/ agents/ docs/ 2>/dev/null; then
              echo "❌ Found banned phrase: $phrase"
              EXIT_CODE=1
            else
              echo "✅ No instances of: $phrase"
            fi
          done
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "⚠️ Content validation found banned phrases but allowing CI to continue"
          else
            echo "✅ Content validation passed"
          fi

      - name: Verify version consistency
        run: |
          echo "Verifying version consistency..."
          EXIT_CODE=0
          
          # Check O-RAN L version (2025-06-30)
          if ! grep -r "O-RAN L (2025-06-30)" website/ agents/ docs/ >/dev/null 2>&1; then
            echo "❌ O-RAN L version not found or incorrect"
            EXIT_CODE=1
          else
            echo "✅ O-RAN L version correct"
          fi
          
          # Check Nephio R5 version pattern (v5.x)
          if ! grep -rE "Nephio R5.*v5\.[0-9]+" website/ agents/ docs/ >/dev/null 2>&1; then
            echo "❌ Nephio R5 version pattern not found"
            EXIT_CODE=1
          else
            echo "✅ Nephio R5 version pattern found"
          fi
          
          # Check kpt version (v1.0.0-beta.55)
          if ! grep -r "kpt v1.0.0-beta.55" website/ agents/ docs/ >/dev/null 2>&1; then
            echo "❌ kpt version not found or incorrect"
            EXIT_CODE=1
          else
            echo "✅ kpt version correct"
          fi
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "⚠️ Version consistency check found issues but allowing CI to continue"
          else
            echo "✅ Version consistency check passed"
          fi

      - name: Verify Kubernetes version policy
        run: |
          echo "Verifying Kubernetes 'latest three minor releases' policy..."
          # This is a pattern check - actual versions should be dynamically validated
          if grep -r "latest three minor releases" website/ agents/ docs/ >/dev/null 2>&1; then
            echo "✅ Kubernetes version policy reference found"
          else
            echo "⚠️ Kubernetes version policy not explicitly referenced"
          fi

  # Markdown linting
  markdown-lint:
    name: Markdown Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore global tools cache
        uses: actions/cache@v4
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-${{ env.GLOBAL_TOOLS_CACHE_KEY }}-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GLOBAL_TOOLS_CACHE_KEY }}-

      - name: Setup PATH for global tools
        run: echo "~/.npm-global/bin" >> $GITHUB_PATH

      - name: Run markdownlint
        run: |
          # Only lint .md files, not .mdx files, in check mode (no --fix)
          # Check each directory individually to handle missing directories
          for dir in website/docs agents docs; do
            if [ -d "$dir" ]; then
              find "$dir" -name "*.md" -type f \
                ! -path "*/node_modules/*" \
                ! -path "*/build/*" \
                -exec markdownlint {} --config .markdownlint.json \;
            fi
          done
          
          # Check blog if it exists
          if [ -d "website/blog" ]; then
            find website/blog -name "*.md" -type f \
              ! -path "*/node_modules/*" \
              ! -path "*/build/*" \
              -exec markdownlint {} --config .markdownlint.json \;
          fi

  # Build and test
  build-and-test:
    name: Build & Test Website
    runs-on: ubuntu-latest
    needs: [setup, validate-content, markdown-lint]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node modules cache
        uses: actions/cache@v4
        with:
          path: website/node_modules
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('website/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: Cache Docusaurus build cache
        uses: actions/cache@v4
        with:
          path: |
            website/.docusaurus
            website/build/.cache
          key: ${{ runner.os }}-docusaurus-${{ env.CACHE_VERSION }}-${{ hashFiles('website/src/**/*', 'website/docs/**/*', 'website/docusaurus.config.js') }}
          restore-keys: |
            ${{ runner.os }}-docusaurus-${{ env.CACHE_VERSION }}-

      - name: Install dependencies (if cache miss)
        if: needs.setup.outputs.cache-hit != 'true'
        working-directory: website
        run: npm ci --prefer-offline

      - name: Type checking
        working-directory: website
        run: npm run typecheck

      - name: Content validation
        working-directory: website
        run: npm run validate:content || echo "⚠️ Content validation found issues but allowing CI to continue"

      - name: Build website
        working-directory: website
        run: npm run build:ci
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: website/build/
          retention-days: 7

      - name: Test build output
        working-directory: website
        run: |
          # Check if critical files exist
          if [ ! -f "build/index.html" ]; then
            echo "❌ Main index.html not found"
            exit 1
          fi
          
          if [ ! -f "build/sitemap.xml" ]; then
            echo "❌ Sitemap not generated"
            exit 1
          fi
          
          # Check for basic content
          if ! grep -q "Nephio O-RAN Claude Agents" build/index.html; then
            echo "❌ Title not found in index.html"
            exit 1
          fi
          
          echo "✅ Build validation passed"

  # Link checking
  link-check:
    name: Link Checking
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: Install dependencies
        working-directory: website
        run: npm ci

      - name: Install linkinator
        run: npm install -g linkinator

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: website/build/

      - name: Start local server
        working-directory: website
        run: npx serve build -p 3000 &
        
      - name: Wait for server
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 1; done'

      - name: Run link checker
        run: |
          linkinator http://localhost:3000 \
            --recurse \
            --timeout 10000 \
            --markdown \
            --skip "mailto:" \
            --skip "tel:" \
            --skip "linkedin.com" \
            --skip "twitter.com" \
            --skip "localhost" \
            --skip "127.0.0.1" \
            --skip "/404" \
            --skip "zh-TW/404" \
            --format json > link-results.json || true

      - name: Process link results
        run: |
          if [ -f link-results.json ]; then
            # Check for broken links (status codes 4xx, 5xx)
            BROKEN_LINKS=$(cat link-results.json | jq -r '.links[] | select(.status >= 400) | .url' || echo "")
            if [ -n "$BROKEN_LINKS" ]; then
              echo "❌ Broken links found:"
              echo "$BROKEN_LINKS"
              exit 1
            else
              echo "✅ No broken links found"
            fi
          else
            echo "⚠️ Link check results not found"
          fi

  # Accessibility testing
  accessibility-check:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: website
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: website/build/

      - name: Install axe-core CLI
        run: npm install -g @axe-core/cli

      - name: Start local server
        working-directory: website
        run: npx serve build -p 3001 &

      - name: Wait for server
        run: |
          timeout 30 bash -c 'until curl -s http://localhost:3001 > /dev/null; do sleep 1; done'

      - name: Run accessibility tests
        run: |
          axe http://localhost:3001 \
            --reporter json \
            --output axe-results.json \
            --timeout 30000 || true

      - name: Process accessibility results
        run: |
          if [ -f axe-results.json ]; then
            VIOLATIONS=$(cat axe-results.json | jq '.violations | length')
            if [ "$VIOLATIONS" -gt 0 ]; then
              echo "❌ Accessibility violations found: $VIOLATIONS"
              cat axe-results.json | jq '.violations'
              exit 1
            else
              echo "✅ No accessibility violations found"
            fi
          else
            echo "⚠️ Accessibility test results not found"
          fi

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results-${{ github.sha }}
          path: axe-results.json
          retention-days: 7

  # Lighthouse CI for performance
  lighthouse-ci:
    name: Lighthouse Performance Testing
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: website
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build-${{ github.sha }}
          path: website/build/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Create Lighthouse CI config
        run: |
          cat > lighthouserc.json << 'EOF'
          {
            "ci": {
              "collect": {
                "staticDistDir": "./website/build",
                "numberOfRuns": 3,
                "settings": {
                  "preset": "desktop"
                }
              },
              "assert": {
                "assertions": {
                  "categories:performance": ["error", {"minScore": 0.9}],
                  "categories:accessibility": ["error", {"minScore": 0.9}],
                  "categories:best-practices": ["error", {"minScore": 0.75}],
                  "categories:seo": ["error", {"minScore": 0.9}]
                }
              },
              "upload": {
                "target": "temporary-public-storage"
              }
            }
          }
          EOF

      - name: Run Lighthouse CI
        run: lhci autorun

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results-${{ github.sha }}
          path: .lighthouseci/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: website/package-lock.json

      - name: Install dependencies for security scan
        working-directory: website
        run: npm ci --audit=false

      - name: Run npm audit
        working-directory: website
        run: |
          # Run audit and capture output - only check production dependencies
          npm audit --omit=dev --audit-level high --format json > audit-results.json || echo '{}' > audit-results.json
          
          # Check if audit-results.json exists and has content
          if [ -s audit-results.json ]; then
            # Check for high/critical vulnerabilities in production dependencies only
            HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
            CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
            
            if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "❌ High/Critical vulnerabilities found in production dependencies"
              echo "High: $HIGH_VULNS, Critical: $CRITICAL_VULNS"
              npm audit --omit=dev --audit-level high
              exit 1
            else
              echo "✅ No high/critical vulnerabilities found in production dependencies"
            fi
          else
            echo "✅ No security issues detected"
          fi

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.sha }}
          path: website/audit-results.json
          retention-days: 7

  # Final status check
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [validate-content, markdown-lint, build-and-test, link-check, accessibility-check, lighthouse-ci, security-scan]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "Checking CI job results..."
          echo "  validate-content: ${{ needs.validate-content.result }}"
          echo "  markdown-lint: ${{ needs.markdown-lint.result }}"
          echo "  build-and-test: ${{ needs.build-and-test.result }}"
          echo "  link-check: ${{ needs.link-check.result }}"
          echo "  accessibility-check: ${{ needs.accessibility-check.result }}"
          echo "  lighthouse-ci: ${{ needs.lighthouse-ci.result }}"
          echo "  security-scan: ${{ needs.security-scan.result }}"
          
          if [[ "${{ needs.validate-content.result }}" == "failure" ]] || \
             [[ "${{ needs.markdown-lint.result }}" == "failure" ]] || \
             [[ "${{ needs.build-and-test.result }}" == "failure" ]] || \
             [[ "${{ needs.link-check.result }}" == "failure" ]] || \
             [[ "${{ needs.accessibility-check.result }}" == "failure" ]] || \
             [[ "${{ needs.lighthouse-ci.result }}" == "failure" ]] || \
             [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed - one or more jobs failed"
            exit 1
          else
            echo "✅ CI pipeline completed successfully"
          fi