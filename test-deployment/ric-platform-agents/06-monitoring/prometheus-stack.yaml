# Prometheus Monitoring Stack - Based on monitoring-analytics-agent.md
# Implements O-RAN L Release observability with AI/ML analytics

---
# Monitoring Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    oran.org/release: l-release
    nephio.org/version: r5
    istio-injection: enabled

---
# Prometheus Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-server
    app.kubernetes.io/version: "3.5.0"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: prometheus
    security.oran.org/scanned: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus-server
        app.kubernetes.io/version: "3.5.0"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: prometheus
    spec:
      serviceAccountName: prometheus-server
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        imagePullPolicy: Always
        ports:
        - containerPort: 9090
          name: web
          protocol: TCP
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=10GB
        # Native histograms (stable in Prometheus 3.x)
        - --enable-feature=native-histograms
        - --enable-feature=utf8-names
        env:
        - name: GODEBUG
          valueFrom:
            configMapKeyRef:
              name: fips-config
              key: GODEBUG
              optional: true
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        - name: prometheus-storage
          mountPath: /prometheus
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-pvc
      - name: tmp
        emptyDir: {}

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'ric-platform'
        environment: 'production'
        oran_release: 'l-release'
        nephio_version: 'r5'

    # Rule files for O-RAN L Release KPIs
    rule_files:
      - "/etc/prometheus/rules/oran_l_release_rules.yml"
      - "/etc/prometheus/rules/nephio_r5_rules.yml"
      - "/etc/prometheus/rules/ai_ml_rules.yml"

    scrape_configs:
      # RIC Platform Components
      - job_name: 'ric-platform'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - ric-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)

      # E2 Manager Metrics
      - job_name: 'e2mgr'
        static_configs:
        - targets: ['e2mgr.ric-platform.svc.cluster.local:8080']
        metrics_path: '/metrics'
        scrape_interval: 10s

      # A1 Mediator Metrics  
      - job_name: 'a1mediator'
        static_configs:
        - targets: ['a1mediator.ric-platform.svc.cluster.local:10000']
        metrics_path: '/a1-p/metrics'
        scrape_interval: 10s

      # xApps Metrics
      - job_name: 'xapps'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - ric-platform
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_oran_org_xapp_type]
          action: keep
          regex: .+
        - source_labels: [__meta_kubernetes_service_label_oran_org_xapp_type]
          action: replace
          target_label: xapp_type

      # VES Collector (L Release)
      - job_name: 'ves-collector'
        static_configs:
        - targets: ['ves-collector.o-ran-smo.svc.cluster.local:8080']
        metrics_path: '/metrics'
        scrape_interval: 30s

      # Kubernetes Metrics
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true

      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          action: keep
          regex: node-exporter

      # Python O1 Simulator (Key L Release Feature)
      - job_name: 'python-o1-simulator'
        static_configs:
        - targets: ['netconf-server.ric-platform.svc.cluster.local:8081']
        metrics_path: '/metrics'
        scrape_interval: 30s

---
# Prometheus Recording Rules for O-RAN L Release
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-rules
data:
  oran_l_release_rules.yml: |
    groups:
    - name: oran_l_release_kpis
      interval: 30s
      rules:
      # Enhanced PRB Utilization with AI prediction
      - record: oran_l:prb_usage_dl_predicted
        expr: |
          predict_linear(
            oran_prb_usage_dl[1h], 3600
          ) + 
          oran_ai_ml_adjustment_factor

      # Energy Efficiency KPI (new in L Release)
      - record: oran_l:energy_efficiency
        expr: |
          sum by (cell_id) (
            oran_throughput_mbps / oran_power_consumption_watts
          )

      # AI/ML Model Performance
      - record: oran_l:ai_ml_inference_latency
        expr: |
          histogram_quantile(0.99,
            rate(ai_ml_inference_duration_seconds_bucket[5m])
          )

      # Network Slice SLA Compliance
      - record: oran_l:slice_sla_compliance
        expr: |
          sum by (slice_id) (
            (oran_slice_latency < bool on() oran_slice_sla_latency) *
            (oran_slice_throughput > bool on() oran_slice_sla_throughput)
          ) / 2 * 100

      # E2 Interface Health
      - record: oran_l:e2_interface_health
        expr: |
          sum by (node_id) (
            up{job="e2mgr"}
          ) / count by (node_id) (
            up{job="e2mgr"}
          ) * 100

      # xApp Health Score
      - record: oran_l:xapp_health_score
        expr: |
          sum by (xapp_type) (
            up{job="xapps"}
          ) / count by (xapp_type) (
            up{job="xapps"}
          ) * 100

  nephio_r5_rules.yml: |
    groups:
    - name: nephio_r5_kpis
      interval: 60s
      rules:
      # ArgoCD Application Health
      - record: nephio_r5:argocd_app_health
        expr: |
          sum by (app) (
            argocd_app_health_status == 1
          ) / count by (app) (argocd_app_health_status) * 100

      # OCloud Resource Utilization
      - record: nephio_r5:ocloud_utilization
        expr: |
          sum(ocloud_node_capacity_cpu - ocloud_node_available_cpu) /
          sum(ocloud_node_capacity_cpu) * 100

      # Package Deployment Success Rate
      - record: nephio_r5:package_success_rate
        expr: |
          sum(rate(nephio_package_deployed_total[1h])) /
          sum(rate(nephio_package_attempted_total[1h])) * 100

      # GitOps Sync Status
      - record: nephio_r5:gitops_sync_health
        expr: |
          sum(argocd_app_info{sync_status="Synced"}) /
          sum(argocd_app_info) * 100

  ai_ml_rules.yml: |
    groups:
    - name: ai_ml_l_release
      interval: 30s
      rules:
      # Kubeflow Pipeline Success Rate
      - record: ai_ml:pipeline_success_rate
        expr: |
          sum(rate(kubeflow_pipeline_run_succeeded_total[5m])) /
          sum(rate(kubeflow_pipeline_run_total[5m])) * 100

      # Model Inference Latency
      - record: ai_ml:model_inference_p99
        expr: |
          histogram_quantile(0.99,
            rate(model_inference_duration_seconds_bucket[5m])
          )

      # Python O1 Simulator Metrics
      - record: ai_ml:python_o1_sim_health
        expr: |
          up{job="python-o1-simulator"}

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: "12.1.0"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: grafana
    security.oran.org/scanned: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/version: "12.1.0"
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: grafana
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:12.1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: grafana
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_FEATURE_TOGGLES_ENABLE
          value: "scenes,canvas"  # Grafana 12.1.0 features
        - name: GF_INSTALL_PLUGINS
          value: "grafana-worldmap-panel,grafana-piechart-panel"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
      - name: tmp
        emptyDir: {}

---
# Services

# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-server
spec:
  selector:
    app.kubernetes.io/name: prometheus-server
  ports:
  - name: web
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
spec:
  selector:
    app.kubernetes.io/name: grafana
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  type: LoadBalancer

---
# ServiceAccounts

# Prometheus ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-server

---
# Grafana ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana

---
# ClusterRole for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
  labels:
    app.kubernetes.io/name: prometheus-server
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
  labels:
    app.kubernetes.io/name: prometheus-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: monitoring

---
# PersistentVolumeClaims

# Prometheus Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-pvc
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd

---
# Grafana Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana-storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
# Secrets

# Grafana Admin Password
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: monitoring
type: Opaque
data:
  password: YWRtaW4xMjM=  # admin123 (base64)

---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana-config
data:
  grafana.ini: |
    [analytics]
    check_for_updates = false
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    http_port = 3000
    
    [security]
    admin_user = admin
    admin_password = $__env{GF_SECURITY_ADMIN_PASSWORD}
    
    [users]
    allow_sign_up = false
    
    [auth.anonymous]
    enabled = false
    
    [feature_toggles]
    enable = scenes,canvas

  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus-server:9090
      isDefault: true
      editable: false

---
# Grafana Dashboards ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana-dashboards
data:
  oran-l-release-dashboard.json: |
    {
      "dashboard": {
        "title": "O-RAN SC L Release & Nephio R5 Operations",
        "uid": "oran-l-nephio-r5",
        "version": 2,
        "description": "Enhanced monitoring with L Release features and R5 capabilities",
        "panels": [
          {
            "id": 1,
            "title": "AI/ML Model Performance",
            "type": "timeseries",
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0},
            "targets": [{
              "expr": "oran_l:ai_ml_inference_latency",
              "legendFormat": "{{model_name}}",
              "refId": "A"
            }],
            "fieldConfig": {
              "defaults": {
                "custom": {
                  "drawStyle": "line",
                  "lineInterpolation": "smooth"
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Energy Efficiency Heatmap",
            "type": "heatmap",
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
            "targets": [{
              "expr": "oran_l:energy_efficiency",
              "refId": "A"
            }],
            "options": {
              "calculate": true,
              "cellGap": 1,
              "color": {
                "scheme": "Turbo",
                "steps": 128
              }
            }
          },
          {
            "id": 3,
            "title": "RIC Platform Health",
            "type": "stat",
            "gridPos": {"h": 4, "w": 6, "x": 0, "y": 8},
            "targets": [{
              "expr": "oran_l:xapp_health_score",
              "refId": "A"
            }],
            "fieldConfig": {
              "defaults": {
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 80},
                    {"color": "green", "value": 95}
                  ]
                },
                "unit": "percent"
              }
            }
          },
          {
            "id": 4,
            "title": "Python O1 Simulator Status",
            "type": "canvas",
            "gridPos": {"h": 4, "w": 6, "x": 6, "y": 8},
            "targets": [{
              "expr": "ai_ml:python_o1_sim_health",
              "refId": "A"
            }],
            "options": {
              "root": {
                "elements": [
                  {
                    "type": "metric-value",
                    "config": {
                      "text": "O1 Sim: ${__value.text}",
                      "size": 20
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    }