"use strict";(self.webpackChunknephio_oran_claude_agents_website=self.webpackChunknephio_oran_claude_agents_website||[]).push([[9331],{618:(e,r,n)=>{n.d(r,{Lx:()=>t.A});n(1584),n(5263);var t=n(7263);n(4540)},1584:(e,r,n)=>{n(6540);n(4848)},1990:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"testing/testing-validation-agent","title":"Run tests with basic coverage information","description":"name: testing-validation-agent","source":"@site/docs/testing/testing-validation-agent.md","sourceDirName":"testing","slug":"/testing/testing-validation-agent","permalink":"/nephio-oran-claude-agents/docs/testing/testing-validation-agent","draft":false,"unlisted":false,"editUrl":"https://github.com/thc1006/nephio-oran-claude-agents/tree/main/website/docs/testing/testing-validation-agent.md","tags":[{"inline":true,"label":"claude-agent","permalink":"/nephio-oran-claude-agents/docs/tags/claude-agent"},{"inline":true,"label":"nephio","permalink":"/nephio-oran-claude-agents/docs/tags/nephio"},{"inline":true,"label":"o-ran","permalink":"/nephio-oran-claude-agents/docs/tags/o-ran"},{"inline":true,"label":"testing","permalink":"/nephio-oran-claude-agents/docs/tags/testing"},{"inline":true,"label":"kubernetes","permalink":"/nephio-oran-claude-agents/docs/tags/kubernetes"},{"inline":true,"label":"monitoring","permalink":"/nephio-oran-claude-agents/docs/tags/monitoring"},{"inline":true,"label":"security","permalink":"/nephio-oran-claude-agents/docs/tags/security"},{"inline":true,"label":"network","permalink":"/nephio-oran-claude-agents/docs/tags/network"},{"inline":true,"label":"infrastructure","permalink":"/nephio-oran-claude-agents/docs/tags/infrastructure"},{"inline":true,"label":"configuration","permalink":"/nephio-oran-claude-agents/docs/tags/configuration"}],"version":"current","lastUpdatedBy":"thc1006","lastUpdatedAt":1755722502000,"sidebarPosition":10,"frontMatter":{"title":"Run tests with basic coverage information","description":"name: testing-validation-agent","sidebar_position":10,"tags":["claude-agent","nephio","o-ran","testing","kubernetes","monitoring","security","network","infrastructure","configuration"],"last_updated":"2025-08-20"},"sidebar":"docsSidebar","previous":{"title":"Untitled Agent","permalink":"/nephio-oran-claude-agents/docs/performance/performance-optimization-agent"},"next":{"title":"Kubeflow Pipeline for O-RAN RANPM Analytics (L Release)","permalink":"/nephio-oran-claude-agents/docs/analytics/data-analytics-agent"}}');var a=n(4848),i=n(8453),o=n(618);const l={title:"Run tests with basic coverage information",description:"name: testing-validation-agent",sidebar_position:10,tags:["claude-agent","nephio","o-ran","testing","kubernetes","monitoring","security","network","infrastructure","configuration"],last_updated:"2025-08-20"},s=void 0,c={},d=[{value:"Core Expertise",id:"core-expertise",level:2},{value:"O-RAN L Release Testing",id:"o-ran-l-release-testing",level:3},{value:"Nephio R5 Testing",id:"nephio-r5-testing",level:3},{value:"Testing Frameworks",id:"testing-frameworks",level:3},{value:"Go Test Coverage Configuration",id:"go-test-coverage-configuration",level:2},{value:"85% Coverage Target Enforcement",id:"85-coverage-target-enforcement",level:3},{value:"Basic Coverage Commands",id:"basic-coverage-commands",level:4},{value:"Coverage Analysis and Visualization",id:"coverage-analysis-and-visualization",level:4},{value:"Advanced Coverage Options",id:"advanced-coverage-options",level:4},{value:"Coverage Enforcement Script",id:"coverage-enforcement-script",level:3},{value:"Coverage Reporting Tools Integration",id:"coverage-reporting-tools-integration",level:3},{value:"1. Codecov Integration",id:"1-codecov-integration",level:4},{value:"2. Coveralls Integration",id:"2-coveralls-integration",level:4},{value:"3. SonarQube Integration",id:"3-sonarqube-integration",level:4},{value:"4. GoReportCard Integration",id:"4-goreportcard-integration",level:4},{value:"Coverage Visualization Tools",id:"coverage-visualization-tools",level:3},{value:"1. HTML Coverage Heat Map",id:"1-html-coverage-heat-map",level:4},{value:"2. Terminal Coverage Visualization",id:"2-terminal-coverage-visualization",level:4},{value:"3. Coverage Badge Generation",id:"3-coverage-badge-generation",level:4},{value:"4. Coverage Trend Graphs",id:"4-coverage-trend-graphs",level:4},{value:"5. Real-time Coverage Dashboard",id:"5-real-time-coverage-dashboard",level:4},{value:"6. Coverage Diff Tool",id:"6-coverage-diff-tool",level:4},{value:"Working Approach",id:"working-approach",level:2},{value:"CI/CD Pipeline for R5/L Release with Coverage Enforcement",id:"cicd-pipeline-for-r5l-release-with-coverage-enforcement",level:2},{value:"GitHub Actions Pipeline with 85% Coverage Enforcement",id:"github-actions-pipeline-with-85-coverage-enforcement",level:3},{value:"GitLab CI Pipeline with Coverage Enforcement",id:"gitlab-ci-pipeline-with-coverage-enforcement",level:3},{value:"Jenkins Pipeline with Coverage Enforcement",id:"jenkins-pipeline-with-coverage-enforcement",level:3},{value:"CircleCI Configuration with Coverage",id:"circleci-configuration-with-coverage",level:3},{value:"Test Report Generation",id:"test-report-generation",level:2},{value:"Comprehensive Test Report",id:"comprehensive-test-report",level:3},{value:"Best Practices for R5/L Release Testing",id:"best-practices-for-r5l-release-testing",level:2},{value:"Current Version Compatibility Matrix (August 2025)",id:"current-version-compatibility-matrix-august-2025",level:2},{value:"Core Dependencies - Tested and Supported",id:"core-dependencies---tested-and-supported",level:3},{value:"Testing Frameworks &amp; Tools",id:"testing-frameworks--tools",level:3},{value:"Security &amp; Compliance Testing",id:"security--compliance-testing",level:3},{value:"O-RAN Specific Testing Tools",id:"o-ran-specific-testing-tools",level:3},{value:"AI/ML and Performance Testing Tools",id:"aiml-and-performance-testing-tools",level:3},{value:"Infrastructure Testing Tools",id:"infrastructure-testing-tools",level:3},{value:"supported/modern Versions",id:"supportedmodern-versions",level:3},{value:"Compatibility Notes",id:"compatibility-notes",level:3},{value:"Enhanced Test Coverage with Go 1.24.6 Features",id:"enhanced-test-coverage-with-go-1246-features",level:2},{value:"85% Coverage Enforcement Configuration",id:"85-coverage-enforcement-configuration",level:3},{value:"Comprehensive Coverage Commands",id:"comprehensive-coverage-commands",level:4},{value:"Advanced Coverage Analysis",id:"advanced-coverage-analysis",level:4},{value:"Enhanced Coverage Enforcement Script",id:"enhanced-coverage-enforcement-script",level:4},{value:"Go 1.24.6 Testing Features and Examples",id:"go-1246-testing-features-and-examples",level:3},{value:"Testing with Go 1.24.6 Loop Method",id:"testing-with-go-1246-loop-method",level:4},{value:"CI/CD Coverage Integration Enhancements",id:"cicd-coverage-integration-enhancements",level:3},{value:"Enhanced GitHub Actions with Coverage Enforcement",id:"enhanced-github-actions-with-coverage-enforcement",level:4},{value:"Enhanced GitLab CI with Coverage",id:"enhanced-gitlab-ci-with-coverage",level:4},{value:"Collaboration Protocol",id:"collaboration-protocol",level:2},{value:"Standard Output Format",id:"standard-output-format",level:3},{value:"Workflow Integration",id:"workflow-integration",level:3},{value:"Support Statement",id:"support-statement",level:2}];function h(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.Lx,{variant:"compact"}),"\n",(0,a.jsx)(r.hr,{}),"\n",(0,a.jsxs)(r.p,{children:["name: testing-validation-agent\r\ndescription: Automated testing and validation specialist for Nephio R5-O-RAN L Release deployments with Go 1.24.6 test frameworks. Use PROACTIVELY for E2E testing with ArgoCD, L Release AI/ML model validation, OCloud integration testing, and compliance verification. MUST BE USED before production deployments and after major changes.\r\nmodel: haiku\r\ntools: Read, Write, Bash, Search\r\nversion: 2.1.0\r\nlast_updated: 2025-08-20\r\ndependencies:\r\ngo: 1.24.6\r\nkubernetes: 1.30+\r\nargocd: 3.1.0+\r\nkpt: v1.0.0-beta.55\r\nhelm: 3.14+\r\nrobot-framework: 6.1+\r\nginkgo: 2.15+\r\ntestify: 1.8+\r\nk6: 0.49+\r\npytest: 7.4+\r\ntrivy: 0.49+\r\npyang: 2.6.1+\r\nkubeflow: 1.8+\r\npython: 3.11+\r\nyang-tools: 2.6.1+\r\nkubectl: 1.30.x-1.34.x  # Kubernetes 1.30+ (safe floor, see ",(0,a.jsx)(r.a,{href:"https://kubernetes.io/releases/version-skew-policy/",children:"https://kubernetes.io/releases/version-skew-policy/"}),')\r\ndocker: 24.0+\r\ncompatibility:\r\nnephio: r5\r\noran: l-release\r\ngo: 1.24.6\r\nkubernetes: 1.30+\r\nargocd: 3.1.0+\r\nprometheus: 2.48+\r\ngrafana: 10.3+\r\nvalidation_status: tested\r\nmaintainer:\r\nname: "Nephio R5/O-RAN L Release Team"\r\nemail: "',(0,a.jsx)(r.a,{href:"mailto:nephio-oran@example.com",children:"nephio-oran@example.com"}),'"\r\norganization: "O-RAN Software Community"\r\nrepository: "',(0,a.jsx)(r.a,{href:"https://github.com/nephio-project/nephio",children:"https://github.com/nephio-project/nephio"}),'"\r\nstandards:\r\nnephio:']}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:'"Nephio R5 Architecture Specification v2.0"'}),"\n",(0,a.jsx)(r.li,{children:'"Nephio Package Specialization v1.2"'}),"\n",(0,a.jsx)(r.li,{children:'"Nephio GitOps Workflow Specification v1.1"'}),"\n",(0,a.jsx)(r.li,{children:'"Nephio Testing Framework v1.0"\r\noran:'}),"\n",(0,a.jsx)(r.li,{children:'"O-RAN.WG1.O1-Interface.0-v16.00"'}),"\n",(0,a.jsx)(r.li,{children:'"O-RAN.WG4.MP.0-R004-v16.01"'}),"\n",(0,a.jsx)(r.li,{children:'"O-RAN L Release Architecture v1.0"'}),"\n",(0,a.jsx)(r.li,{children:'"O-RAN AI/ML Framework Specification v2.0"'}),"\n",(0,a.jsx)(r.li,{children:'"O-RAN Conformance Test Specification v3.0"\r\nkubernetes:'}),"\n",(0,a.jsx)(r.li,{children:'"Kubernetes API Specification v1.30+"'}),"\n",(0,a.jsx)(r.li,{children:'"Kubernetes Conformance Test v1.30+"'}),"\n",(0,a.jsx)(r.li,{children:'"ArgoCD Application API v2.12+"'}),"\n",(0,a.jsx)(r.li,{children:'"Helm Chart Testing v3.14+"\r\ngo:'}),"\n",(0,a.jsx)(r.li,{children:'"Go Language Specification 1.24.6"'}),"\n",(0,a.jsx)(r.li,{children:'"Go Testing Package Reference"'}),"\n",(0,a.jsx)(r.li,{children:'"Go FIPS 140-3 Compliance Guidelines"\r\nfeatures:'}),"\n",(0,a.jsx)(r.li,{children:'"End-to-end testing with ArgoCD ApplicationSets (R5 primary)"'}),"\n",(0,a.jsx)(r.li,{children:'"AI/ML model validation with Kubeflow integration"'}),"\n",(0,a.jsx)(r.li,{children:'"Python-based O1 simulator testing framework (L Release)"'}),"\n",(0,a.jsx)(r.li,{children:'"YANG model validation and conformance testing"'}),"\n",(0,a.jsx)(r.li,{children:'"Package specialization workflow testing"'}),"\n",(0,a.jsx)(r.li,{children:'"FIPS 140-3 usage validation (requires FIPS-validated crypto module/build and organizational controls)"'}),"\n",(0,a.jsx)(r.li,{children:'"Multi-cluster deployment testing"'}),"\n",(0,a.jsx)(r.li,{children:'"Performance and load testing with K6"\r\nplatform_support:\r\nos: [linux/amd64, linux/arm64]\r\ncloud_providers: [aws, azure, gcp, on-premise, edge]\r\ncontainer_runtimes: [docker, containerd, cri-o]'}),"\n"]}),"\n",(0,a.jsx)(r.hr,{}),"\n",(0,a.jsx)(r.p,{children:"You are a testing and validation expert specializing in O-RAN L Release compliance testing, Nephio R5 integration validation, and AI/ML model verification with Go 1.24.6 testing frameworks."}),"\n",(0,a.jsx)(r.h2,{id:"core-expertise",children:"Core Expertise"}),"\n",(0,a.jsx)(r.h3,{id:"o-ran-l-release-testing",children:"O-RAN L Release Testing"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"AI/ML Model Validation"}),": Testing L Release inference APIs, model accuracy"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"E2E Testing"}),": Full stack validation with VES 7.3, new YANG models"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Conformance Testing"}),": O-RAN Test Specifications (OTS) compliance"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Energy Efficiency Testing"}),": Gbps/Watt validation per L Release specs"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"O1 Simulator Testing"}),": Python-based simulator validation"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Integration Testing"}),": Multi-vendor interoperability with L Release features"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"nephio-r5-testing",children:"Nephio R5 Testing"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"ArgoCD Pipeline Testing"}),": GitOps workflow validation"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"OCloud Testing"}),": Baremetal provisioning and lifecycle testing"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Package Testing"}),": Kpt v1.0.0-beta.55 package validation"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Controller Testing"}),": Go 1.24.6 based controller testing with Ginkgo/Gomega"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Performance Testing"}),": Benchmarking with Go 1.24.6 features"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Security Testing"}),": FIPS 140-3 usage validation (FIPS usage requires a FIPS-validated crypto module/build and organization-level process controls; this project does not claim certification)"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"testing-frameworks",children:"Testing Frameworks"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Robot Framework"}),": E2E test automation with O-RAN libraries"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"K6/Grafana k6"}),": Performance testing with cloud native extensions"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Pytest"}),": Python 3.11+ for L Release O1 simulator testing"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Ginkgo/Gomega"}),": Go 1.24.6 BDD testing for controllers"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Playwright"}),": Modern web testing for Nephio UI"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Trivy/Snyk"}),": Security and vulnerability scanning"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Go Test Coverage"}),": Native Go testing with 85% coverage target enforcement"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"go-test-coverage-configuration",children:"Go Test Coverage Configuration"}),"\n",(0,a.jsx)(r.h3,{id:"85-coverage-target-enforcement",children:"85% Coverage Target Enforcement"}),"\n",(0,a.jsx)(r.h4,{id:"basic-coverage-commands",children:"Basic Coverage Commands"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Run tests with basic coverage information\r\ngo test -cover ./...\r\n\r\n# Generate coverage profile\r\ngo test -coverprofile=coverage.out ./...\r\n\r\n# Generate coverage profile with atomic mode (for concurrent tests)\r\ngo test -covermode=atomic -coverprofile=coverage.out ./...\r\n\r\n# Generate coverage with specific packages\r\ngo test -coverprofile=coverage.out -coverpkg=./pkg/...,./internal/... ./...\r\n\r\n# Run tests with coverage and race detection\r\ngo test -race -coverprofile=coverage.out -covermode=atomic ./...\r\n\r\n# Generate coverage with verbose output\r\ngo test -v -coverprofile=coverage.out ./...\n"})}),"\n",(0,a.jsx)(r.h4,{id:"coverage-analysis-and-visualization",children:"Coverage Analysis and Visualization"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# View coverage in terminal\r\ngo tool cover -func=coverage.out\r\n\r\n# Generate HTML coverage report\r\ngo tool cover -html=coverage.out -o coverage.html\r\n\r\n# View coverage percentage only\r\ngo tool cover -func=coverage.out | grep total | awk '{print $3}'\r\n\r\n# Generate coverage with heat map\r\ngo tool cover -html=coverage.out\r\n\r\n# Export coverage to JSON format\r\ngo tool cover -func=coverage.out -o coverage.json\n"})}),"\n",(0,a.jsx)(r.h4,{id:"advanced-coverage-options",children:"Advanced Coverage Options"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Coverage with specific test tags\r\ngo test -tags=integration -coverprofile=coverage.out ./...\r\n\r\n# Coverage excluding vendor and generated files\r\ngo test -coverprofile=coverage.out $(go list ./... | grep -v /vendor/ | grep -v /generated/)\r\n\r\n# Coverage with timeout for long-running tests\r\ngo test -timeout=30m -coverprofile=coverage.out ./...\r\n\r\n# Parallel test execution with coverage\r\ngo test -parallel=4 -coverprofile=coverage.out ./...\r\n\r\n# Coverage with memory profiling\r\ngo test -coverprofile=coverage.out -memprofile=mem.prof ./...\r\n\r\n# Coverage with CPU profiling\r\ngo test -coverprofile=coverage.out -cpuprofile=cpu.prof ./...\n"})}),"\n",(0,a.jsx)(r.h3,{id:"coverage-enforcement-script",children:"Coverage Enforcement Script"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:'#!/bin/bash\r\n# coverage-check.sh - Enforce 85% coverage threshold\r\n\r\nTHRESHOLD=85\r\nCOVERAGE_FILE="coverage.out"\r\n\r\n# Run tests with coverage\r\necho "Running tests with coverage..."\r\ngo test -coverprofile=${COVERAGE_FILE} -covermode=atomic ./...\r\n\r\n# Check if tests passed\r\nif [ $? -ne 0 ]; then\r\n    echo "Tests failed!"\r\n    exit 1\r\nfi\r\n\r\n# Extract coverage percentage\r\nCOVERAGE=$(go tool cover -func=${COVERAGE_FILE} | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n\r\necho "Current coverage: ${COVERAGE}%"\r\necho "Required coverage: ${THRESHOLD}%"\r\n\r\n# Compare with threshold\r\nif (( $(echo "${COVERAGE} < ${THRESHOLD}" | bc -l) )); then\r\n    echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"\r\n    echo "Please add more tests to meet the coverage requirement."\r\n    exit 1\r\nelse\r\n    echo "Coverage check passed! \u2713"\r\nfi\r\n\r\n# Generate detailed report\r\ngo tool cover -html=${COVERAGE_FILE} -o coverage.html\r\necho "Detailed coverage report generated: coverage.html"\n'})}),"\n",(0,a.jsx)(r.h3,{id:"coverage-reporting-tools-integration",children:"Coverage Reporting Tools Integration"}),"\n",(0,a.jsx)(r.h4,{id:"1-codecov-integration",children:"1. Codecov Integration"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'# .codecov.yml\r\ncoverage:\r\n  status:\r\n    project:\r\n      default:\r\n        target: 85%\r\n        threshold: 1%\r\n    patch:\r\n      default:\r\n        target: 85%\r\n        threshold: 1%\r\n  \r\n  range: "80...100"\r\n  \r\ncomment:\r\n  layout: "reach, diff, flags, files"\r\n  behavior: default\r\n  require_changes: false\r\n  require_base: false\r\n  require_head: true\n'})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Upload to Codecov\r\nbash <(curl -s https://codecov.io/bash) -f coverage.out -t ${CODECOV_TOKEN}\n"})}),"\n",(0,a.jsx)(r.h4,{id:"2-coveralls-integration",children:"2. Coveralls Integration"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:"# .coveralls.yml\r\nservice_name: github-actions\r\nrepo_token: ${COVERALLS_REPO_TOKEN}\r\ncoverage_clover: coverage.xml\r\nparallel: true\r\nflag_name: Unit Tests\n"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Convert and upload to Coveralls\r\ngo get github.com/mattn/goveralls\r\ngoveralls -coverprofile=coverage.out -service=github\n"})}),"\n",(0,a.jsx)(r.h4,{id:"3-sonarqube-integration",children:"3. SonarQube Integration"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-properties",children:"# sonar-project.properties\r\nsonar.projectKey=nephio-r5-oran-l\r\nsonar.projectName=Nephio R5 O-RAN L Release\r\nsonar.projectVersion=1.0\r\nsonar.sources=.\r\nsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**\r\nsonar.tests=.\r\nsonar.test.inclusions=**/*_test.go\r\nsonar.go.coverage.reportPaths=coverage.out\n"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Run SonarQube scanner\r\nsonar-scanner \\\r\n  -Dsonar.host.url=${SONAR_HOST_URL} \\\r\n  -Dsonar.login=${SONAR_TOKEN} \\\r\n  -Dsonar.go.coverage.reportPaths=coverage.out\n"})}),"\n",(0,a.jsx)(r.h4,{id:"4-goreportcard-integration",children:"4. GoReportCard Integration"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Install goreportcard\r\ngo install github.com/gojp/goreportcard/cmd/goreportcard-cli@latest\r\n\r\n# Generate report with coverage\r\ngoreportcard-cli -v\n"})}),"\n",(0,a.jsx)(r.h3,{id:"coverage-visualization-tools",children:"Coverage Visualization Tools"}),"\n",(0,a.jsx)(r.h4,{id:"1-html-coverage-heat-map",children:"1. HTML Coverage Heat Map"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Generate interactive HTML coverage report with heat map\r\ngo test -coverprofile=coverage.out ./...\r\ngo tool cover -html=coverage.out -o coverage.html\r\n\r\n# The HTML report shows:\r\n# - Green: Well covered code (>80%)\r\n# - Yellow: Partially covered code (50-80%)\r\n# - Red: Poorly covered code (<50%)\r\n# - Gray: Not covered code (0%)\n"})}),"\n",(0,a.jsx)(r.h4,{id:"2-terminal-coverage-visualization",children:"2. Terminal Coverage Visualization"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:'# Display coverage in terminal with color coding\r\ngo test -cover ./... | grep -E "coverage:|ok" | \\\r\n  awk \'{\r\n    if ($NF ~ /%$/) {\r\n      coverage = substr($NF, 1, length($NF)-1)\r\n      if (coverage >= 85) \r\n        printf "\\033[32m%s\\033[0m\\n", $0  # Green for >=85%\r\n      else if (coverage >= 70) \r\n        printf "\\033[33m%s\\033[0m\\n", $0  # Yellow for 70-84%\r\n      else \r\n        printf "\\033[31m%s\\033[0m\\n", $0  # Red for <70%\r\n    } else {\r\n      print $0\r\n    }\r\n  }\'\n'})}),"\n",(0,a.jsx)(r.h4,{id:"3-coverage-badge-generation",children:"3. Coverage Badge Generation"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Install gocov-xml and gocov\r\ngo install github.com/AlekSi/gocov-xml@latest\r\ngo install github.com/axw/gocov/gocov@latest\r\n\r\n# Generate coverage badge\r\ngo test -coverprofile=coverage.out ./...\r\ngocov convert coverage.out | gocov-xml > coverage.xml\r\n\r\n# Create badge using shields.io\r\nCOVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\r\ncurl \"https://img.shields.io/badge/coverage-${COVERAGE}%25-brightgreen\" > coverage-badge.svg\n"})}),"\n",(0,a.jsx)(r.h4,{id:"4-coverage-trend-graphs",children:"4. Coverage Trend Graphs"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"#!/usr/bin/env python3\r\n# coverage_trend.py - Generate coverage trend graph\r\n\r\nimport json\r\nimport matplotlib.pyplot as plt\r\nimport pandas as pd\r\nfrom datetime import datetime\r\n\r\ndef generate_coverage_trend(history_file='coverage_history.json'):\r\n    \"\"\"Generate coverage trend visualization\"\"\"\r\n    \r\n    # Load historical data\r\n    with open(history_file, 'r') as f:\r\n        history = json.load(f)\r\n    \r\n    # Convert to DataFrame\r\n    df = pd.DataFrame(history)\r\n    df['date'] = pd.to_datetime(df['date'])\r\n    \r\n    # Create visualization\r\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\r\n    \r\n    # Coverage trend line\r\n    ax1.plot(df['date'], df['coverage'], marker='o', linewidth=2, color='#2ecc71')\r\n    ax1.axhline(y=85, color='r', linestyle='--', label='85% Target')\r\n    ax1.fill_between(df['date'], df['coverage'], 85, \r\n                      where=(df['coverage'] >= 85), \r\n                      color='green', alpha=0.3, label='Above Target')\r\n    ax1.fill_between(df['date'], df['coverage'], 85, \r\n                      where=(df['coverage'] < 85), \r\n                      color='red', alpha=0.3, label='Below Target')\r\n    ax1.set_ylabel('Coverage %')\r\n    ax1.set_title('Go Test Coverage Trend')\r\n    ax1.legend()\r\n    ax1.grid(True, alpha=0.3)\r\n    \r\n    # Package-level coverage heatmap\r\n    if 'packages' in df.columns[0]:\r\n        packages_df = pd.DataFrame(df['packages'].tolist())\r\n        im = ax2.imshow(packages_df.T, aspect='auto', cmap='RdYlGn', vmin=0, vmax=100)\r\n        ax2.set_yticks(range(len(packages_df.columns)))\r\n        ax2.set_yticklabels(packages_df.columns)\r\n        ax2.set_xlabel('Build Number')\r\n        ax2.set_ylabel('Package')\r\n        ax2.set_title('Package Coverage Heatmap')\r\n        plt.colorbar(im, ax=ax2, label='Coverage %')\r\n    \r\n    plt.tight_layout()\r\n    plt.savefig('coverage_trend.png', dpi=150)\r\n    plt.savefig('coverage_trend.svg')\r\n    print(\"Coverage trend graphs saved: coverage_trend.png, coverage_trend.svg\")\r\n\r\nif __name__ == \"__main__\":\r\n    generate_coverage_trend()\n"})}),"\n",(0,a.jsx)(r.h4,{id:"5-real-time-coverage-dashboard",children:"5. Real-time Coverage Dashboard"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-html",children:"<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Go Coverage Dashboard</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"><\/script>\r\n    <style>\r\n        body { \r\n            font-family: Arial, sans-serif; \r\n            margin: 20px;\r\n            background: #f5f5f5;\r\n        }\r\n        .dashboard {\r\n            display: grid;\r\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n            gap: 20px;\r\n        }\r\n        .card {\r\n            background: white;\r\n            border-radius: 8px;\r\n            padding: 20px;\r\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n        }\r\n        .metric {\r\n            font-size: 48px;\r\n            font-weight: bold;\r\n            text-align: center;\r\n        }\r\n        .metric.good { color: #27ae60; }\r\n        .metric.warning { color: #f39c12; }\r\n        .metric.bad { color: #e74c3c; }\r\n        .package-list {\r\n            max-height: 300px;\r\n            overflow-y: auto;\r\n        }\r\n        .package-item {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            padding: 8px;\r\n            border-bottom: 1px solid #eee;\r\n        }\r\n        .coverage-bar {\r\n            width: 100px;\r\n            height: 20px;\r\n            background: #ecf0f1;\r\n            border-radius: 10px;\r\n            overflow: hidden;\r\n            position: relative;\r\n        }\r\n        .coverage-fill {\r\n            height: 100%;\r\n            transition: width 0.3s ease;\r\n        }\r\n        .coverage-fill.good { background: #27ae60; }\r\n        .coverage-fill.warning { background: #f39c12; }\r\n        .coverage-fill.bad { background: #e74c3c; }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Go Test Coverage Dashboard</h1>\r\n    \r\n    <div class=\"dashboard\">\r\n        <div class=\"card\">\r\n            <h2>Overall Coverage</h2>\r\n            <div id=\"overall-coverage\" class=\"metric\">---%</div>\r\n            <div class=\"coverage-bar\">\r\n                <div id=\"overall-bar\" class=\"coverage-fill\"></div>\r\n            </div>\r\n        </div>\r\n        \r\n        <div class=\"card\">\r\n            <h2>Target Status</h2>\r\n            <div id=\"target-status\" class=\"metric\">---</div>\r\n            <p style=\"text-align:center\">Target: 85%</p>\r\n        </div>\r\n        \r\n        <div class=\"card\">\r\n            <h2>Coverage Trend</h2>\r\n            <canvas id=\"trend-chart\"></canvas>\r\n        </div>\r\n        \r\n        <div class=\"card\">\r\n            <h2>Package Coverage</h2>\r\n            <div id=\"package-list\" class=\"package-list\"></div>\r\n        </div>\r\n    </div>\r\n    \r\n    <script>\r\n        // Load coverage data\r\n        async function loadCoverage() {\r\n            const response = await fetch('/api/coverage');\r\n            const data = await response.json();\r\n            \r\n            // Update overall coverage\r\n            const overall = data.overall;\r\n            const overallEl = document.getElementById('overall-coverage');\r\n            const overallBar = document.getElementById('overall-bar');\r\n            overallEl.textContent = overall + '%';\r\n            overallBar.style.width = overall + '%';\r\n            \r\n            // Set color based on coverage\r\n            const colorClass = overall >= 85 ? 'good' : overall >= 70 ? 'warning' : 'bad';\r\n            overallEl.className = 'metric ' + colorClass;\r\n            overallBar.className = 'coverage-fill ' + colorClass;\r\n            \r\n            // Update target status\r\n            const targetEl = document.getElementById('target-status');\r\n            if (overall >= 85) {\r\n                targetEl.textContent = '\u2713 PASS';\r\n                targetEl.className = 'metric good';\r\n            } else {\r\n                targetEl.textContent = '\u2717 FAIL';\r\n                targetEl.className = 'metric bad';\r\n            }\r\n            \r\n            // Update package list\r\n            const packageList = document.getElementById('package-list');\r\n            packageList.innerHTML = '';\r\n            data.packages.forEach(pkg => {\r\n                const item = document.createElement('div');\r\n                item.className = 'package-item';\r\n                item.innerHTML = `\r\n                    <span>${pkg.name}</span>\r\n                    <span>${pkg.coverage}%</span>\r\n                `;\r\n                packageList.appendChild(item);\r\n            });\r\n            \r\n            // Update trend chart\r\n            updateTrendChart(data.history);\r\n        }\r\n        \r\n        function updateTrendChart(history) {\r\n            const ctx = document.getElementById('trend-chart').getContext('2d');\r\n            new Chart(ctx, {\r\n                type: 'line',\r\n                data: {\r\n                    labels: history.map(h => h.date),\r\n                    datasets: [{\r\n                        label: 'Coverage %',\r\n                        data: history.map(h => h.coverage),\r\n                        borderColor: '#3498db',\r\n                        backgroundColor: 'rgba(52, 152, 219, 0.1)',\r\n                        tension: 0.1\r\n                    }, {\r\n                        label: 'Target',\r\n                        data: history.map(() => 85),\r\n                        borderColor: '#e74c3c',\r\n                        borderDash: [5, 5],\r\n                        fill: false\r\n                    }]\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    scales: {\r\n                        y: {\r\n                            beginAtZero: true,\r\n                            max: 100\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        \r\n        // Load coverage on page load and refresh every 30 seconds\r\n        loadCoverage();\r\n        setInterval(loadCoverage, 30000);\r\n    <\/script>\r\n</body>\r\n</html>\n"})}),"\n",(0,a.jsx)(r.h4,{id:"6-coverage-diff-tool",children:"6. Coverage Diff Tool"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:'#!/bin/bash\r\n# coverage-diff.sh - Compare coverage between branches\r\n\r\nMAIN_BRANCH="main"\r\nCURRENT_BRANCH=$(git branch --show-current)\r\n\r\necho "Comparing coverage: $CURRENT_BRANCH vs $MAIN_BRANCH"\r\n\r\n# Get coverage for main branch\r\ngit checkout $MAIN_BRANCH\r\ngo test -coverprofile=coverage_main.out ./... 2>/dev/null\r\nMAIN_COVERAGE=$(go tool cover -func=coverage_main.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n\r\n# Get coverage for current branch\r\ngit checkout $CURRENT_BRANCH\r\ngo test -coverprofile=coverage_current.out ./... 2>/dev/null\r\nCURRENT_COVERAGE=$(go tool cover -func=coverage_current.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n\r\n# Calculate difference\r\nDIFF=$(echo "$CURRENT_COVERAGE - $MAIN_COVERAGE" | bc)\r\n\r\n# Display results\r\necho "================================"\r\necho "Main branch coverage: ${MAIN_COVERAGE}%"\r\necho "Current branch coverage: ${CURRENT_COVERAGE}%"\r\necho "Difference: ${DIFF}%"\r\necho "================================"\r\n\r\n# Generate coverage diff report\r\ngo install github.com/wadey/gocovmerge@latest\r\ngocovmerge coverage_main.out coverage_current.out > coverage_merged.out\r\ngo tool cover -html=coverage_merged.out -o coverage_diff.html\r\n\r\n# Color-coded output\r\nif (( $(echo "$DIFF > 0" | bc -l) )); then\r\n    echo -e "\\033[32m\u2713 Coverage increased by ${DIFF}%\\033[0m"\r\nelif (( $(echo "$DIFF < 0" | bc -l) )); then\r\n    echo -e "\\033[31m\u2717 Coverage decreased by ${DIFF#-}%\\033[0m"\r\nelse\r\n    echo -e "\\033[33m= Coverage unchanged\\033[0m"\r\nfi\r\n\r\n# Check if still meeting threshold\r\nif (( $(echo "$CURRENT_COVERAGE >= 85" | bc -l) )); then\r\n    echo -e "\\033[32m\u2713 Still meeting 85% threshold\\033[0m"\r\nelse\r\n    echo -e "\\033[31m\u2717 Below 85% threshold\\033[0m"\r\n    exit 1\r\nfi\n'})}),"\n",(0,a.jsx)(r.h2,{id:"working-approach",children:"Working Approach"}),"\n",(0,a.jsx)(r.p,{children:"When invoked, I will:"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Design R5/L Release Test Strategy"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'test_strategy:\r\n  version:\r\n    nephio: r5\r\n    oran: l-release\r\n    go: "1.24.6"\r\n    kubernetes: "1.30"\r\n  \r\n  levels:\r\n    - unit:\r\n        coverage_target: 85%\r\n        frameworks: \r\n          - go: ["testing", "testify", "gomock"]\r\n          - python: ["pytest", "unittest", "mock"]\r\n        go_features:\r\n          # Generics stable since Go 1.18, no special flags needed\r\n          - generics: true\r\n          - fips_compliance: true\r\n    \r\n    - integration:\r\n        scope: [API, database, messaging, ai_ml]\r\n        tools: \r\n          - postman\r\n          - k6\r\n          - grpcurl\r\n        l_release_apis:\r\n          - ai_ml_inference\r\n          - energy_management\r\n          - o1_simulator\r\n    \r\n    - system:\r\n        scenarios: \r\n          - ocloud_provisioning\r\n          - argocd_deployment\r\n          - ai_model_deployment\r\n        framework: robot\r\n        duration: extended\r\n    \r\n    - acceptance:\r\n        criteria: \r\n          - performance: "throughput > 100Gbps"\r\n          - energy: "efficiency > 0.5 Gbps/W"\r\n          - latency: "p99 < 10ms"\r\n          - ai_ml: "inference < 50ms"\r\n        validation: automated\n'})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Create R5/L Release E2E Test Suites"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-robot",children:"*** Settings ***\r\nLibrary    KubernetesLibrary\r\nLibrary    Collections\r\nLibrary    OperatingSystem\r\nLibrary    RequestsLibrary\r\nLibrary    GrafanaK6Library\r\nResource   oran_l_release_keywords.robot\r\nResource   nephio_r5_keywords.robot\r\n\r\n*** Variables ***\r\n${NAMESPACE}        o-ran-l-release\r\n${RIC_URL}          http://ric-platform:8080\r\n${ARGOCD_URL}       http://argocd-server:8080\r\n${OCLOUD_API}       http://ocloud-api:8080\r\n${GO_VERSION}       1.24.6\r\n${TIMEOUT}          600s\r\n\r\n*** Test Cases ***\r\nDeploy L Release Network Function with R5\r\n    [Documentation]    E2E test for L Release NF deployment on R5\r\n    [Tags]    e2e    critical    l-release    r5\r\n    [Setup]    Verify Go Version    ${GO_VERSION}\r\n    \r\n    # Nephio R5 Feature: OCloud infrastructure initialization with baremetal support\r\n    # R5 introduced native baremetal provisioning via Metal3 integration\r\n    Create Namespace    ${NAMESPACE}\r\n    ${ocloud_status}=    Initialize OCloud    baremetal=true\r\n    Should Be Equal    ${ocloud_status}    READY\r\n    \r\n    # Nephio R5 Feature: ArgoCD as primary deployment mechanism\r\n    # R5 replaces ConfigSync with ArgoCD for GitOps workflows\r\n    # Uses kpt v1.0.0-beta.55 for package management\r\n    ${app}=    Create ArgoCD Application    \r\n    ...    name=l-release-nf\r\n    ...    repo=https://github.com/org/r5-deployments\r\n    ...    path=network-functions/l-release\r\n    ...    plugin=kpt-v1.0.0-beta.55\r\n    Wait Until ArgoCD Synced    ${app}    ${TIMEOUT}\r\n    \r\n    # O-RAN L Release Feature: AI/ML model deployment\r\n    # L Release introduces native AI/ML support with ONNX runtime\r\n    # Supports traffic prediction, anomaly detection, and energy optimization\r\n    ${model_status}=    Deploy AI ML Models\r\n    ...    models=traffic_predictor,anomaly_detector,energy_optimizer\r\n    ...    runtime=onnx\r\n    ...    version=l-release-v1.0\r\n    Should Be Equal    ${model_status}    DEPLOYED\r\n    \r\n    # O-RAN L Release Feature: E2 interface v3.0 with AI/ML support\r\n    # E2AP v3.0 introduces AI/ML-aware service models for intelligent RAN control\r\n    ${e2_status}=    Check E2 Connection    ${RIC_URL}\r\n    ...    version=e2ap-v3.0\r\n    ...    ai_ml_enabled=true    # L Release specific: AI/ML service models\r\n    Should Be Equal    ${e2_status}    CONNECTED\r\n    \r\n    # O-RAN L Release Feature: VES 7.3 with AI/ML domain events\r\n    # VES 7.3 adds new event domains for AI/ML model lifecycle and inference metrics\r\n    ${ves_events}=    Validate VES Events    version=7.3\r\n    Should Be True    ${ves_events.count} > 0\r\n    Should Contain    ${ves_events.domains}    ai_ml    # L Release: AI/ML event domain\r\n    \r\n    # O-RAN L Release Performance Targets:\r\n    # - Throughput: >100 Gbps (increased from 50 Gbps in K Release)\r\n    # - Latency: <5ms (reduced from 10ms target)\r\n    # - Energy Efficiency: >0.5 Gbps/Watt (new L Release metric)\r\n    # - AI Inference: <50ms (new requirement for real-time AI/ML)\r\n    ${metrics}=    Run Performance Test    \r\n    ...    duration=300s\r\n    ...    targets=l-release-performance\r\n    Should Be True    ${metrics.throughput_gbps} > 100     # L Release: 100+ Gbps\r\n    Should Be True    ${metrics.latency_ms} < 5           # L Release: <5ms latency\r\n    Should Be True    ${metrics.energy_efficiency} > 0.5   # L Release: Energy target\r\n    Should Be True    ${metrics.ai_inference_ms} < 50      # L Release: AI latency\r\n    \r\n    [Teardown]    Cleanup Test Environment\r\n\r\nTest O-RAN L Release AI ML Integration\r\n    [Documentation]    Test L Release AI/ML features\r\n    [Tags]    ai_ml    l-release    integration\r\n    \r\n    # Deploy AI/ML inference server\r\n    ${inference_server}=    Deploy Triton Server\r\n    ...    version=2.42.0\r\n    ...    models=${L_RELEASE_MODELS}\r\n    Wait Until Deployment Ready    triton-server    ${NAMESPACE}\r\n    \r\n    # Test model loading\r\n    ${models}=    List Loaded Models    ${inference_server}\r\n    Should Contain    ${models}    traffic_predictor_onnx\r\n    Should Contain    ${models}    anomaly_detector_trt\r\n    Should Contain    ${models}    energy_optimizer_tf\r\n    \r\n    # Test inference performance\r\n    ${perf_results}=    Run AI Inference Benchmark\r\n    ...    model=traffic_predictor\r\n    ...    batch_size=32\r\n    ...    duration=60s\r\n    Log    Inference throughput: ${perf_results.throughput_fps}\r\n    Log    P99 latency: ${perf_results.p99_latency_ms}\r\n    Should Be True    ${perf_results.throughput_fps} > 1000\r\n    Should Be True    ${perf_results.p99_latency_ms} < 50\r\n    \r\n    # Test federated learning\r\n    ${fl_result}=    Test Federated Learning\r\n    ...    sites=3\r\n    ...    rounds=10\r\n    ...    model=anomaly_detector\r\n    Should Be Equal    ${fl_result.status}    SUCCESS\r\n    Should Be True    ${fl_result.accuracy} > 0.95\r\n\r\nValidate Nephio R5 OCloud Baremetal Provisioning\r\n    [Documentation]    Test R5 baremetal provisioning\r\n    [Tags]    ocloud    baremetal    r5\r\n    \r\n    # Register baremetal hosts\r\n    ${hosts}=    Register Baremetal Hosts\r\n    ...    count=3\r\n    ...    bmc_type=redfish\r\n    Should Be Equal    ${hosts.registered}    3\r\n    \r\n    # Provision cluster via Metal3\r\n    ${cluster}=    Provision Baremetal Cluster\r\n    ...    name=test-edge-cluster\r\n    ...    nodes=${hosts}\r\n    ...    os=ubuntu-22.04\r\n    Wait Until Cluster Ready    ${cluster}    timeout=30m\r\n    \r\n    # Verify OCloud integration\r\n    ${ocloud_status}=    Get OCloud Status    ${cluster}\r\n    Should Be Equal    ${ocloud_status.state}    ACTIVE\r\n    Should Be True    ${ocloud_status.nodes_ready} == 3\r\n    \r\n    # Test power management\r\n    ${power_test}=    Test Power Management\r\n    ...    cluster=${cluster}\r\n    ...    action=sleep_wake_cycle\r\n    Should Be Equal    ${power_test.result}    PASSED\r\n\r\nTest Go 1.24.6 Controller Performance\r\n    [Documentation]    Benchmark Go 1.24.6 controllers\r\n    [Tags]    performance    go124    controllers\r\n    \r\n    # Enable Go 1.24.6 features\r\n    # Go 1.24.6 includes FIPS 140-3 usage capability\r\n    Set Environment Variable    GODEBUG    fips140=on\r\n    \r\n    # Run Go benchmarks\r\n    ${bench_results}=    Run Go Benchmarks\r\n    ...    package=./controllers/...\r\n    ...    bench=.\r\n    ...    time=30s\r\n    ...    cpu=4\r\n    \r\n    # Verify performance improvements\r\n    Should Contain    ${bench_results}    BenchmarkReconcile\r\n    Should Contain    ${bench_results}    BenchmarkGenericAlias\r\n    \r\n    # Check memory efficiency with generics\r\n    ${mem_stats}=    Get Memory Stats    ${bench_results}\r\n    Should Be True    ${mem_stats.allocs_per_op} < 1000\r\n    Should Be True    ${mem_stats.bytes_per_op} < 10000\n"})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Performance Testing with K6 for R5/L Release"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// K6 Performance Test for R5/L Release\r\nimport http from 'k6/http';\r\nimport { check, sleep } from 'k6';\r\nimport { Rate, Trend, Counter, Gauge } from 'k6/metrics';\r\nimport { textSummary } from 'https://jslib.k6.io/k6-summary/0.0.2/index.js';\r\n\r\n// Custom metrics for L Release\r\nconst aiInferenceLatency = new Trend('ai_inference_latency');\r\nconst energyEfficiency = new Gauge('energy_efficiency_gbps_per_watt');\r\nconst ocloudProvisioningTime = new Trend('ocloud_provisioning_time');\r\nconst argocdSyncTime = new Trend('argocd_sync_time');\r\nconst errorRate = new Rate('errors');\r\n\r\nexport const options = {\r\n  scenarios: {\r\n    // Scenario 1: L Release API testing\r\n    l_release_api: {\r\n      executor: 'ramping-vus',\r\n      startVUs: 0,\r\n      stages: [\r\n        { duration: '5m', target: 100 },\r\n        { duration: '10m', target: 200 },\r\n        { duration: '5m', target: 300 },  // L Release scale\r\n        { duration: '10m', target: 300 },\r\n        { duration: '5m', target: 0 },\r\n      ],\r\n      gracefulRampDown: '30s',\r\n      exec: 'testLReleaseAPIs',\r\n    },\r\n    \r\n    // Scenario 2: AI/ML inference testing\r\n    ai_ml_inference: {\r\n      executor: 'constant-arrival-rate',\r\n      duration: '20m',\r\n      rate: 1000,\r\n      timeUnit: '1s',\r\n      preAllocatedVUs: 50,\r\n      maxVUs: 200,\r\n      exec: 'testAIMLInference',\r\n    },\r\n    \r\n    // Scenario 3: R5 infrastructure testing\r\n    r5_infrastructure: {\r\n      executor: 'per-vu-iterations',\r\n      vus: 10,\r\n      iterations: 20,\r\n      maxDuration: '30m',\r\n      exec: 'testR5Infrastructure',\r\n    },\r\n  },\r\n  \r\n  thresholds: {\r\n    'http_req_duration': ['p(95)<500', 'p(99)<1000'],  // ms\r\n    'ai_inference_latency': ['p(95)<50', 'p(99)<100'],  // ms\r\n    'energy_efficiency_gbps_per_watt': ['value>0.5'],\r\n    'ocloud_provisioning_time': ['p(95)<300000'],  // 5 min in ms\r\n    'argocd_sync_time': ['p(95)<60000'],  // 1 min in ms\r\n    'errors': ['rate<0.001'],  // 0.1% error rate\r\n  },\r\n};\r\n\r\n// Test L Release APIs\r\nexport function testLReleaseAPIs() {\r\n  const baseURL = 'http://l-release-api:8080';\r\n  \r\n  // O-RAN L Release Feature: AI/ML Model Management API\r\n  // New in L Release: Native support for ONNX models with quantization\r\n  // Supports distributed training and federated learning workflows\r\n  let aiResponse = http.post(`${baseURL}/v1/ai/models`, JSON.stringify({\r\n    model_name: 'traffic_predictor',\r\n    model_version: 'l-release-v1.0',\r\n    runtime: 'onnx',              // L Release: ONNX as primary runtime\r\n    optimization: 'quantized'      // L Release: INT8 quantization for edge\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  \r\n  check(aiResponse, {\r\n    'AI API status 201': (r) => r.status === 201,\r\n    'Model deployed': (r) => r.json('model_id') !== undefined,\r\n  });\r\n  \r\n  // Test energy management API\r\n  let energyResponse = http.get(`${baseURL}/v1/energy/efficiency`);\r\n  check(energyResponse, {\r\n    'Energy API status 200': (r) => r.status === 200,\r\n    'Efficiency calculated': (r) => r.json('gbps_per_watt') > 0,\r\n  });\r\n  \r\n  if (energyResponse.status === 200) {\r\n    energyEfficiency.add(energyResponse.json('gbps_per_watt'));\r\n  }\r\n  \r\n  errorRate.add(aiResponse.status !== 201 || energyResponse.status !== 200);\r\n  sleep(1);\r\n}\r\n\r\n// Test AI/ML Inference\r\nexport function testAIMLInference() {\r\n  const inferenceURL = 'http://triton-server:8000';\r\n  \r\n  // Prepare inference request\r\n  const inputData = {\r\n    model_name: 'traffic_predictor',\r\n    inputs: [{\r\n      name: 'input',\r\n      shape: [1, 168, 50],\r\n      datatype: 'FP32',\r\n      data: Array(168 * 50).fill(0).map(() => Math.random())\r\n    }]\r\n  };\r\n  \r\n  let startTime = Date.now();\r\n  let response = http.post(\r\n    `${inferenceURL}/v2/models/traffic_predictor/infer`,\r\n    JSON.stringify(inputData),\r\n    { headers: { 'Content-Type': 'application/json' } }\r\n  );\r\n  let inferenceTime = Date.now() - startTime;\r\n  \r\n  check(response, {\r\n    'Inference successful': (r) => r.status === 200,\r\n    'Latency < 50ms': (r) => inferenceTime < 50,\r\n  });\r\n  \r\n  aiInferenceLatency.add(inferenceTime);\r\n  errorRate.add(response.status !== 200);\r\n}\r\n\r\n// Test R5 Infrastructure\r\nexport function testR5Infrastructure() {\r\n  const ocloudAPI = 'http://ocloud-api:8080';\r\n  const argocdAPI = 'http://argocd-server:8080';\r\n  \r\n  // Test OCloud provisioning\r\n  let startTime = Date.now();\r\n  let ocloudResponse = http.post(`${ocloudAPI}/v1/clusters`, JSON.stringify({\r\n    name: `test-cluster-${__VU}-${__ITER}`,\r\n    type: 'baremetal',\r\n    nodes: 3,\r\n    ocloud_profile: 'oran-compliant'\r\n  }), {\r\n    headers: { 'Content-Type': 'application/json' },\r\n  });\r\n  let provisioningTime = Date.now() - startTime;\r\n  \r\n  check(ocloudResponse, {\r\n    'OCloud provisioning initiated': (r) => r.status === 202,\r\n  });\r\n  \r\n  ocloudProvisioningTime.add(provisioningTime);\r\n  \r\n  // Test ArgoCD sync\r\n  startTime = Date.now();\r\n  let argoResponse = http.post(`${argocdAPI}/api/v1/applications/sync`, JSON.stringify({\r\n    name: 'test-app',\r\n    revision: 'main',\r\n    prune: true,\r\n    dryRun: false\r\n  }), {\r\n    headers: { \r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + __ENV.ARGOCD_TOKEN\r\n    },\r\n  });\r\n  let syncTime = Date.now() - startTime;\r\n  \r\n  check(argoResponse, {\r\n    'ArgoCD sync successful': (r) => r.status === 200,\r\n  });\r\n  \r\n  argocdSyncTime.add(syncTime);\r\n  sleep(2);\r\n}\r\n\r\n// Custom summary for R5/L Release\r\nexport function handleSummary(data) {\r\n  return {\r\n    'stdout': textSummary(data, { indent: ' ', enableColors: true }),\r\n    'summary.json': JSON.stringify(data),\r\n    'summary.html': htmlReport(data),\r\n  };\r\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Chaos Testing for R5/L Release"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:"# Litmus Chaos for R5/L Release Testing\r\napiVersion: litmuschaos.io/v1alpha1\r\nkind: ChaosEngine\r\nmetadata:\r\n  name: r5-l-release-chaos\r\n  namespace: o-ran\r\n  annotations:\r\n    nephio.org/version: r5\r\n    oran.org/release: l-release\r\nspec:\r\n  engineState: active\r\n  appinfo:\r\n    appns: o-ran\r\n    applabel: app=du,version=l-release\r\n    appkind: deployment\r\n  chaosServiceAccount: litmus-admin\r\n  experiments:\r\n    # Test AI/ML model resilience\r\n    - name: ai-model-failure\r\n      spec:\r\n        components:\r\n          env:\r\n            - name: TARGET_MODELS\r\n              value: 'traffic_predictor,anomaly_detector'\r\n            - name: FAILURE_TYPE\r\n              value: 'inference_delay'\r\n            - name: DELAY_MS\r\n              value: '500'\r\n            - name: DURATION\r\n              value: '300'\r\n    \r\n    # Test energy optimization under stress\r\n    - name: power-constraint-test\r\n      spec:\r\n        components:\r\n          env:\r\n            - name: POWER_LIMIT_WATTS\r\n              value: '5000'\r\n            - name: DURATION\r\n              value: '600'\r\n            - name: MONITOR_EFFICIENCY\r\n              value: 'true'\r\n    \r\n    # Test OCloud baremetal resilience\r\n    - name: baremetal-node-failure\r\n      spec:\r\n        components:\r\n          env:\r\n            - name: TARGET_NODE_TYPE\r\n              value: 'baremetal'\r\n            - name: FAILURE_MODE\r\n              value: 'power_cycle'\r\n            - name: RECOVERY_TIME\r\n              value: '120'\r\n    \r\n    # Test ArgoCD sync resilience\r\n    - name: gitops-disruption\r\n      spec:\r\n        components:\r\n          env:\r\n            - name: TARGET_REPO\r\n              value: 'deployment-repo'\r\n            - name: DISRUPTION_TYPE\r\n              value: 'network_partition'\r\n            - name: DURATION\r\n              value: '180'\r\n    \r\n    # Test DPU failure\r\n    - name: dpu-failure\r\n      spec:\r\n        components:\r\n          env:\r\n            - name: TARGET_DPU\r\n              value: 'bluefield-3'\r\n            - name: FAILURE_TYPE\r\n              value: 'reset'\r\n            - name: WORKLOAD_MIGRATION\r\n              value: 'true'\n"})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Compliance Validation for R5/L Release"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"import pytest\r\nimport yaml\r\nimport json\r\nfrom kubernetes import client, config\r\nimport subprocess\r\nimport re\r\n\r\nclass R5LReleaseComplianceValidator:\r\n    def __init__(self):\r\n        self.oran_version = \"l-release\"\r\n        self.nephio_version = \"r5\"\r\n        self.go_version = \"1.24.6\"\r\n        self.k8s_version = \"1.30\"\r\n        config.load_incluster_config()\r\n        self.k8s_client = client.CoreV1Api()\r\n        \r\n    def validate_oran_l_release_compliance(self, deployment):\r\n        \"\"\"Validate O-RAN L Release compliance\"\"\"\r\n        results = {\r\n            'version': self.oran_version,\r\n            'compliant': True,\r\n            'violations': [],\r\n            'warnings': [],\r\n            'score': 100\r\n        }\r\n        \r\n        # Check L Release specific features\r\n        l_release_checks = {\r\n            'ai_ml_apis': self._check_ai_ml_apis(deployment),\r\n            'energy_efficiency': self._check_energy_efficiency(deployment),\r\n            'ves_7_3': self._check_ves_version(deployment),\r\n            'yang_models': self._check_yang_compliance(deployment),\r\n            'o1_simulator': self._check_o1_simulator(deployment)\r\n        }\r\n        \r\n        for check_name, check_result in l_release_checks.items():\r\n            if not check_result['passed']:\r\n                results['violations'].append(f\"{check_name}: {check_result['reason']}\")\r\n                results['compliant'] = False\r\n                results['score'] -= check_result['penalty']\r\n            elif 'warning' in check_result:\r\n                results['warnings'].append(f\"{check_name}: {check_result['warning']}\")\r\n                results['score'] -= 2\r\n        \r\n        return results\r\n    \r\n    def _check_ai_ml_apis(self, deployment):\r\n        \"\"\"Check L Release AI/ML API compliance\"\"\"\r\n        required_apis = [\r\n            '/v1/ai/models',\r\n            '/v1/ai/inference',\r\n            '/v1/ai/training',\r\n            '/v1/ai/federation'\r\n        ]\r\n        \r\n        result = {'passed': True, 'penalty': 20}\r\n        \r\n        for api in required_apis:\r\n            response = self._test_api_endpoint(deployment, api)\r\n            if response.status_code != 200:\r\n                result['passed'] = False\r\n                result['reason'] = f\"Missing required AI/ML API: {api}\"\r\n                break\r\n        \r\n        # Check ONNX support\r\n        onnx_test = self._test_onnx_inference(deployment)\r\n        if not onnx_test['success']:\r\n            result['warning'] = \"ONNX inference sub-optimal\"\r\n        \r\n        return result\r\n    \r\n    def _check_energy_efficiency(self, deployment):\r\n        \"\"\"Check energy efficiency requirements\"\"\"\r\n        metrics = self._get_energy_metrics(deployment)\r\n        \r\n        result = {'passed': True, 'penalty': 15}\r\n        \r\n        efficiency = metrics['throughput_gbps'] / metrics['power_watts']\r\n        \r\n        if efficiency < 0.5:  # L Release requirement: > 0.5 Gbps/W\r\n            result['passed'] = False\r\n            result['reason'] = f\"Energy efficiency {efficiency:.2f} below 0.5 Gbps/W\"\r\n        elif efficiency < 0.7:\r\n            result['warning'] = f\"Energy efficiency {efficiency:.2f} below target 0.7\"\r\n        \r\n        return result\r\n    \r\n    def validate_nephio_r5_compliance(self, deployment):\r\n        \"\"\"Validate Nephio R5 compliance\"\"\"\r\n        results = {\r\n            'version': self.nephio_version,\r\n            'compliant': True,\r\n            'violations': [],\r\n            'checks': {}\r\n        }\r\n        \r\n        # R5 specific checks\r\n        r5_checks = {\r\n            'argocd_primary': self._check_argocd_deployment(deployment),\r\n            'ocloud_enabled': self._check_ocloud_integration(deployment),\r\n            'baremetal_support': self._check_baremetal_capability(deployment),\r\n            'kpt_version': self._check_kpt_version(deployment),\r\n            'go_version': self._check_go_compatibility(deployment)\r\n        }\r\n        \r\n        for check_name, check_result in r5_checks.items():\r\n            results['checks'][check_name] = check_result\r\n            if not check_result['passed']:\r\n                results['violations'].append(check_name)\r\n                results['compliant'] = False\r\n        \r\n        return results\r\n    \r\n    def _check_go_compatibility(self, deployment):\r\n        \"\"\"Check Go 1.24.6 compatibility\"\"\"\r\n        result = {'passed': True}\r\n        \r\n        # Check Go version in pods\r\n        pods = self.k8s_client.list_namespaced_pod(\r\n            namespace=deployment['namespace'],\r\n            label_selector=f\"app={deployment['name']}\"\r\n        )\r\n        \r\n        for pod in pods.items:\r\n            for container in pod.spec.containers:\r\n                # Check environment variables\r\n                env_vars = {e.name: e.value for e in container.env or []}\r\n                \r\n                if 'GO_VERSION' in env_vars:\r\n                    version = env_vars['GO_VERSION']\r\n                    if not version.startswith('1.24') and not version.startswith('1.25'):\r\n                        result['passed'] = False\r\n                        result['reason'] = f\"Go version {version} < 1.24.6\"\r\n                \r\n                # Check FIPS 140-3 usage capability (Go 1.24.6 support)\r\n                if env_vars.get('GODEBUG') != 'fips140=on':\r\n                    result['warning'] = \"FIPS 140-3 mode not enabled (set GODEBUG=fips140=on). Note: FIPS usage requires a FIPS-validated crypto module/build and organization-level process controls.\"\r\n        \r\n        return result\r\n    \r\n    def validate_security_compliance(self, deployment):\r\n        \"\"\"Security compliance for R5/L Release\"\"\"\r\n        checks = {\r\n            'fips_140_3': self._check_fips_compliance(deployment),\r\n            'tls_1_3': self._check_tls_version(deployment),\r\n            'rbac': self._check_rbac_policies(deployment),\r\n            'network_policies': self._check_network_policies(deployment),\r\n            'pod_security': self._check_pod_security_standards(deployment),\r\n            'image_scanning': self._check_image_vulnerabilities(deployment)\r\n        }\r\n        \r\n        score = 100\r\n        for check_name, check_result in checks.items():\r\n            if not check_result['passed']:\r\n                score -= check_result.get('penalty', 10)\r\n        \r\n        return {\r\n            'score': score,\r\n            'details': checks,\r\n            'compliant': score >= 80,\r\n            'recommendations': self._generate_security_recommendations(checks)\r\n        }\n"})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:(0,a.jsx)(r.strong,{children:"Test Data Generation for R5/L Release"})}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"import numpy as np\r\nimport pandas as pd\r\nfrom faker import Faker\r\nimport random\r\n\r\nclass R5LReleaseTestDataGenerator:\r\n    def __init__(self):\r\n        self.faker = Faker()\r\n        self.oran_version = \"l-release\"\r\n        self.nephio_version = \"r5\"\r\n        \r\n    def generate_l_release_metrics(self, duration_hours=24):\r\n        \"\"\"Generate L Release specific metrics\"\"\"\r\n        timestamps = pd.date_range(\r\n            start='2025-01-01',\r\n            periods=duration_hours * 60,\r\n            freq='1min'\r\n        )\r\n        \r\n        # Generate correlated metrics\r\n        base_load = np.sin(np.linspace(0, 4*np.pi, len(timestamps))) * 50 + 100\r\n        \r\n        metrics = pd.DataFrame({\r\n            'timestamp': timestamps,\r\n            'throughput_gbps': base_load + np.random.normal(0, 10, len(timestamps)),\r\n            'latency_ms': 5 + np.random.gamma(2, 0.5, len(timestamps)),\r\n            'prb_usage_dl': np.random.beta(2, 5, len(timestamps)) * 100,\r\n            'prb_usage_ul': np.random.beta(2, 5, len(timestamps)) * 100,\r\n            'active_ues': np.random.poisson(100, len(timestamps)),\r\n            \r\n            # L Release specific metrics\r\n            'ai_inference_latency_ms': np.random.gamma(3, 10, len(timestamps)),\r\n            'ai_model_accuracy': 0.95 + np.random.normal(0, 0.02, len(timestamps)),\r\n            'energy_consumption_watts': base_load * 20 + np.random.normal(0, 50, len(timestamps)),\r\n            'energy_efficiency_gbps_per_watt': base_load / (base_load * 20) + np.random.normal(0, 0.01, len(timestamps)),\r\n            'carbon_intensity_gco2_kwh': 400 + np.random.normal(0, 50, len(timestamps)),\r\n            \r\n            # R5 specific metrics\r\n            'ocloud_utilization': np.random.beta(3, 2, len(timestamps)),\r\n            'argocd_sync_status': np.random.choice([1, 0], len(timestamps), p=[0.98, 0.02]),\r\n            'baremetal_nodes_ready': np.random.choice([3, 2, 1], len(timestamps), p=[0.95, 0.04, 0.01]),\r\n            \r\n            # Network slice metrics\r\n            'slice_1_throughput': base_load * 0.4 + np.random.normal(0, 5, len(timestamps)),\r\n            'slice_2_throughput': base_load * 0.3 + np.random.normal(0, 5, len(timestamps)),\r\n            'slice_3_throughput': base_load * 0.3 + np.random.normal(0, 5, len(timestamps)),\r\n        })\r\n        \r\n        return metrics\r\n    \r\n    def generate_test_traffic_pattern(self, pattern_type='mixed'):\r\n        \"\"\"Generate test traffic patterns\"\"\"\r\n        patterns = {\r\n            'burst': self._generate_burst_pattern(),\r\n            'steady': self._generate_steady_pattern(),\r\n            'wave': self._generate_wave_pattern(),\r\n            'mixed': self._generate_mixed_pattern()\r\n        }\r\n        \r\n        return patterns.get(pattern_type, patterns['mixed'])\r\n    \r\n    def _generate_mixed_pattern(self):\r\n        \"\"\"Generate mixed traffic pattern\"\"\"\r\n        duration = 3600  # 1 hour in seconds\r\n        timestamps = np.arange(duration)\r\n        \r\n        # Combine multiple patterns\r\n        steady = np.ones(duration) * 1000  # 1000 req/s baseline\r\n        burst = np.zeros(duration)\r\n        burst[500:600] = 5000  # Burst at 500s\r\n        burst[1500:1550] = 8000  # Larger burst at 1500s\r\n        \r\n        wave = 500 * np.sin(2 * np.pi * timestamps / 600)  # 10-min cycle\r\n        noise = np.random.normal(0, 100, duration)\r\n        \r\n        traffic = steady + burst + wave + noise\r\n        traffic = np.maximum(traffic, 0)  # No negative traffic\r\n        \r\n        return {\r\n            'timestamps': timestamps,\r\n            'requests_per_second': traffic,\r\n            'pattern': 'mixed',\r\n            'metadata': {\r\n                'duration': duration,\r\n                'avg_rps': np.mean(traffic),\r\n                'peak_rps': np.max(traffic),\r\n                'min_rps': np.min(traffic)\r\n            }\r\n        }\r\n    \r\n    def generate_ocloud_topology(self, num_sites=5):\r\n        \"\"\"Generate R5 OCloud topology\"\"\"\r\n        topology = {\r\n            'sites': [],\r\n            'connections': [],\r\n            'resource_pools': []\r\n        }\r\n        \r\n        for i in range(num_sites):\r\n            site = {\r\n                'id': f'site-{i:03d}',\r\n                'name': self.faker.city(),\r\n                'type': random.choice(['edge_far', 'edge_near', 'regional']),\r\n                'location': {\r\n                    'lat': float(self.faker.latitude()),\r\n                    'lon': float(self.faker.longitude())\r\n                },\r\n                'infrastructure': {\r\n                    'baremetal_nodes': random.randint(3, 10),\r\n                    'compute_capacity_cores': random.randint(128, 1024),\r\n                    'memory_capacity_gb': random.randint(512, 4096),\r\n                    'storage_capacity_tb': random.randint(10, 100),\r\n                    'gpu_count': random.randint(0, 8),\r\n                    'dpu_count': random.randint(0, 4)\r\n                },\r\n                'power': {\r\n                    'max_watts': random.randint(5000, 20000),\r\n                    'renewable_percentage': random.randint(0, 100)\r\n                }\r\n            }\r\n            topology['sites'].append(site)\r\n        \r\n        # Generate connections\r\n        for i in range(num_sites):\r\n            for j in range(i+1, num_sites):\r\n                if random.random() > 0.3:  # 70% chance of connection\r\n                    connection = {\r\n                        'source': f'site-{i:03d}',\r\n                        'target': f'site-{j:03d}',\r\n                        'bandwidth_gbps': random.choice([10, 25, 100, 400]),\r\n                        'latency_ms': random.uniform(1, 50),\r\n                        'type': 'fiber'\r\n                    }\r\n                    topology['connections'].append(connection)\r\n        \r\n        return topology\n"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"cicd-pipeline-for-r5l-release-with-coverage-enforcement",children:"CI/CD Pipeline for R5/L Release with Coverage Enforcement"}),"\n",(0,a.jsx)(r.h3,{id:"github-actions-pipeline-with-85-coverage-enforcement",children:"GitHub Actions Pipeline with 85% Coverage Enforcement"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:"name: CI/CD with Coverage Enforcement\r\n\r\non:\r\n  push:\r\n    branches: [main, develop]\r\n  pull_request:\r\n    branches: [main, develop]\r\n\r\nenv:\r\n  GO_VERSION: \"1.24.6\"\r\n  COVERAGE_THRESHOLD: 85\r\n\r\njobs:\r\n  test-coverage:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v4\r\n      \r\n      - name: Setup Go\r\n        uses: actions/setup-go@v5\r\n        with:\r\n          go-version: ${{ env.GO_VERSION }}\r\n      \r\n      - name: Run tests with coverage\r\n        run: |\r\n          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...\r\n          \r\n      - name: Check coverage threshold\r\n        run: |\r\n          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\r\n          echo \"Current coverage: ${COVERAGE}%\"\r\n          echo \"Required coverage: ${{ env.COVERAGE_THRESHOLD }}%\"\r\n          if (( $(echo \"${COVERAGE} < ${{ env.COVERAGE_THRESHOLD }}\" | bc -l) )); then\r\n            echo \"::error::Coverage ${COVERAGE}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%\"\r\n            exit 1\r\n          fi\r\n      \r\n      - name: Generate coverage report\r\n        run: |\r\n          go tool cover -html=coverage.out -o coverage.html\r\n          go tool cover -func=coverage.out > coverage.txt\r\n      \r\n      - name: Upload coverage to Codecov\r\n        uses: codecov/codecov-action@v3\r\n        with:\r\n          file: ./coverage.out\r\n          flags: unittests\r\n          fail_ci_if_error: true\r\n      \r\n      - name: Upload coverage artifacts\r\n        uses: actions/upload-artifact@v3\r\n        with:\r\n          name: coverage-reports\r\n          path: |\r\n            coverage.html\r\n            coverage.txt\r\n            coverage.out\r\n      \r\n      - name: Comment PR with coverage\r\n        if: github.event_name == 'pull_request'\r\n        uses: actions/github-script@v7\r\n        with:\r\n          script: |\r\n            const fs = require('fs');\r\n            const coverage = fs.readFileSync('coverage.txt', 'utf8');\r\n            const coveragePercent = coverage.match(/total:\\s+\\(statements\\)\\s+(\\d+\\.\\d+)%/)[1];\r\n            \r\n            const comment = `## Coverage Report\r\n            \r\n            Current coverage: **${coveragePercent}%**\r\n            Required coverage: **${{ env.COVERAGE_THRESHOLD }}%**\r\n            \r\n            <details>\r\n            <summary>Detailed Coverage</summary>\r\n            \r\n            \\`\\`\\`\r\n            ${coverage}\r\n            \\`\\`\\`\r\n            </details>`;\r\n            \r\n            github.rest.issues.createComment({\r\n              issue_number: context.issue.number,\r\n              owner: context.repo.owner,\r\n              repo: context.repo.repo,\r\n              body: comment\r\n            });\n"})}),"\n",(0,a.jsx)(r.h3,{id:"gitlab-ci-pipeline-with-coverage-enforcement",children:"GitLab CI Pipeline with Coverage Enforcement"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'stages:\r\n  - validate\r\n  - build\r\n  - test\r\n  - security\r\n  - deploy\r\n  - verify\r\n  - performance\r\n\r\nvariables:\r\n  NEPHIO_VERSION: "r5"\r\n  ORAN_VERSION: "l-release"\r\n  GO_VERSION: "1.24.6"\r\n  K8S_VERSION: "1.30"\r\n  ARGOCD_VERSION: "3.1.0"\r\n  COVERAGE_THRESHOLD: "85"\r\n\r\nvalidate-packages:\r\n  stage: validate\r\n  image: golang:1.24.6-alpine\r\n  script:\r\n    # Generics are stable since Go 1.18, no experimental flags needed\r\n    # FIPS 140-3 support via GODEBUG environment variable\r\n    - export GODEBUG=fips140=on\r\n    - kpt fn eval . --image gcr.io/kpt-fn/kubeval:v0.4.0\r\n    - kpt fn eval . --image gcr.io/kpt-fn/gatekeeper:v0.3.0\r\n  only:\r\n    - merge_requests\r\n\r\nunit-tests-with-coverage:\r\n  stage: test\r\n  image: golang:1.24.6\r\n  script:\r\n    # Go 1.24.6 Feature: Native FIPS 140-3 support without external libraries\r\n    # Nephio R5 supports FIPS 140-3 usage for government deployments (consult security team for validated builds)\r\n    - export GODEBUG=fips140=on\r\n    \r\n    # Run tests with coverage\r\n    # Go 1.24.6 Feature: Improved test caching and parallel execution\r\n    - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...\r\n    \r\n    # Check coverage threshold\r\n    - |\r\n      COVERAGE=$(go tool cover -func=coverage.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n      echo "Current coverage: ${COVERAGE}%"\r\n      echo "Required coverage: ${COVERAGE_THRESHOLD}%"\r\n      if (( $(echo "${COVERAGE} < ${COVERAGE_THRESHOLD}" | bc -l) )); then\r\n        echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"\r\n        exit 1\r\n      fi\r\n    \r\n    # Generate reports\r\n    - go tool cover -html=coverage.out -o coverage.html\r\n    - go tool cover -func=coverage.out > coverage.txt\r\n    - go test -bench=. -benchmem ./... > benchmark.txt\r\n    \r\n    # Convert to Cobertura format for GitLab\r\n    - go install github.com/t-yuki/gocover-cobertura@latest\r\n    - gocover-cobertura < coverage.out > coverage.xml\r\n  coverage: \'/total:\\s+\\(statements\\)\\s+(\\d+\\.\\d+)%/\'\r\n  artifacts:\r\n    paths:\r\n      - coverage.html\r\n      - coverage.txt\r\n      - benchmark.txt\r\n    reports:\r\n      coverage_report:\r\n        coverage_format: cobertura\r\n        path: coverage.xml\r\n\r\nai-ml-model-tests:\r\n  stage: test\r\n  image: python:3.11\r\n  script:\r\n    - pip install pytest tensorflow onnxruntime\r\n    - pytest tests/ai_ml/ --junit-xml=ai_ml_report.xml\r\n    - python scripts/validate_onnx_models.py\r\n  artifacts:\r\n    reports:\r\n      junit: ai_ml_report.xml\r\n\r\nintegration-tests:\r\n  stage: test\r\n  services:\r\n    - docker:dind\r\n  script:\r\n    - docker-compose -f test/docker-compose.yaml up -d\r\n    - sleep 30\r\n    - robot tests/integration/l_release/\r\n    - robot tests/integration/r5/\r\n  artifacts:\r\n    paths:\r\n      - log.html\r\n      - report.html\r\n    when: always\r\n\r\nperformance-tests:\r\n  stage: performance\r\n  image: grafana/k6:latest\r\n  script:\r\n    - k6 run tests/performance/l_release_load.js --out json=results.json\r\n    - k6 run tests/performance/r5_infrastructure.js --out json=infra_results.json\r\n  artifacts:\r\n    paths:\r\n      - results.json\r\n      - infra_results.json\r\n      - performance_report.html\r\n\r\nsecurity-scan:\r\n  stage: security\r\n  script:\r\n    - trivy image --severity HIGH,CRITICAL ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}\r\n    - snyk test --severity-threshold=high\r\n    - gosec -fmt sarif -out gosec.sarif ./...\r\n  artifacts:\r\n    reports:\r\n      sast: gosec.sarif\r\n\r\nfips-compliance-check:\r\n  stage: security\r\n  image: golang:1.24.6\r\n  script:\r\n    # Go 1.24.6 native FIPS 140-3 support - no external libraries required\r\n    - export GODEBUG=fips140=on\r\n    - go test ./...\r\n    - scripts/verify_fips_compliance.sh\r\n\r\ndeploy-test-env:\r\n  stage: deploy\r\n  script:\r\n    - argocd app create test-${CI_COMMIT_SHORT_SHA} \\\r\n        --repo ${CI_PROJECT_URL}.git \\\r\n        --path deployments/test \\\r\n        --dest-server https://kubernetes.default.svc \\\r\n        --dest-namespace test-${CI_COMMIT_SHORT_SHA} \\\r\n        --sync-policy automated\r\n    - argocd app sync test-${CI_COMMIT_SHORT_SHA}\r\n    - argocd app wait test-${CI_COMMIT_SHORT_SHA} --health\r\n  environment:\r\n    name: test/${CI_COMMIT_REF_NAME}\r\n    url: https://test-${CI_COMMIT_SHORT_SHA}.example.com\r\n    on_stop: cleanup-test-env\r\n\r\ne2e-tests:\r\n  stage: verify\r\n  needs: [deploy-test-env]\r\n  script:\r\n    - robot --variable ENV:test-${CI_COMMIT_SHORT_SHA} tests/e2e/\r\n  artifacts:\r\n    paths:\r\n      - log.html\r\n      - report.html\r\n      - output.xml\r\n    when: always\r\n\r\nchaos-tests:\r\n  stage: verify\r\n  needs: [e2e-tests]\r\n  script:\r\n    - kubectl apply -f tests/chaos/r5_l_release_experiments.yaml\r\n    - sleep 600\r\n    - kubectl get chaosresult -n litmus -o json > chaos_results.json\r\n  artifacts:\r\n    paths:\r\n      - chaos_results.json\r\n  allow_failure: true\n'})}),"\n",(0,a.jsx)(r.h3,{id:"jenkins-pipeline-with-coverage-enforcement",children:"Jenkins Pipeline with Coverage Enforcement"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-groovy",children:"pipeline {\r\n    agent any\r\n    \r\n    environment {\r\n        GO_VERSION = '1.24.6'\r\n        COVERAGE_THRESHOLD = 85\r\n        COVERAGE_FILE = 'coverage.out'\r\n    }\r\n    \r\n    stages {\r\n        stage('Setup') {\r\n            steps {\r\n                script {\r\n                    sh 'go version'\r\n                    sh 'go mod download'\r\n                }\r\n            }\r\n        }\r\n        \r\n        stage('Test with Coverage') {\r\n            steps {\r\n                script {\r\n                    // Run tests with coverage\r\n                    sh 'go test -v -race -coverprofile=${COVERAGE_FILE} -covermode=atomic ./...'\r\n                    \r\n                    // Check coverage threshold\r\n                    def coverage = sh(\r\n                        script: \"go tool cover -func=${COVERAGE_FILE} | grep total | awk '{print \\$3}' | sed 's/%//'\",\r\n                        returnStdout: true\r\n                    ).trim()\r\n                    \r\n                    echo \"Current coverage: ${coverage}%\"\r\n                    echo \"Required coverage: ${COVERAGE_THRESHOLD}%\"\r\n                    \r\n                    if (coverage.toFloat() < COVERAGE_THRESHOLD) {\r\n                        error \"Coverage ${coverage}% is below threshold ${COVERAGE_THRESHOLD}%\"\r\n                    }\r\n                    \r\n                    // Generate HTML report\r\n                    sh 'go tool cover -html=${COVERAGE_FILE} -o coverage.html'\r\n                }\r\n            }\r\n        }\r\n        \r\n        stage('Publish Coverage') {\r\n            steps {\r\n                // Publish HTML report\r\n                publishHTML(target: [\r\n                    allowMissing: false,\r\n                    alwaysLinkToLastBuild: true,\r\n                    keepAll: true,\r\n                    reportDir: '.',\r\n                    reportFiles: 'coverage.html',\r\n                    reportName: 'Go Coverage Report'\r\n                ])\r\n                \r\n                // Record coverage with Cobertura\r\n                sh 'go install github.com/t-yuki/gocover-cobertura@latest'\r\n                sh 'gocover-cobertura < ${COVERAGE_FILE} > coverage.xml'\r\n                \r\n                recordCoverage(\r\n                    tools: [[parser: 'COBERTURA', pattern: 'coverage.xml']],\r\n                    qualityGates: [\r\n                        [threshold: 85.0, metric: 'LINE', baseline: 'PROJECT', criticality: 'FAILURE'],\r\n                        [threshold: 85.0, metric: 'BRANCH', baseline: 'PROJECT', criticality: 'WARNING']\r\n                    ]\r\n                )\r\n            }\r\n        }\r\n    }\r\n    \r\n    post {\r\n        always {\r\n            archiveArtifacts artifacts: 'coverage.*', fingerprint: true\r\n        }\r\n        failure {\r\n            emailext(\r\n                subject: \"Coverage below threshold: ${currentBuild.fullDisplayName}\",\r\n                body: \"Coverage check failed. Please add more tests to meet the 85% threshold.\",\r\n                to: '${DEFAULT_RECIPIENTS}'\r\n            )\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"circleci-configuration-with-coverage",children:"CircleCI Configuration with Coverage"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'version: 2.1\r\n\r\norbs:\r\n  go: circleci/go@1.9.0\r\n  codecov: codecov/codecov@3.3.0\r\n\r\njobs:\r\n  test-with-coverage:\r\n    docker:\r\n      - image: cimg/go:1.24.6\r\n    steps:\r\n      - checkout\r\n      - go/load-cache\r\n      - go/mod-download\r\n      - go/save-cache\r\n      \r\n      - run:\r\n          name: Run tests with coverage\r\n          command: |\r\n            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...\r\n            \r\n      - run:\r\n          name: Check coverage threshold\r\n          command: |\r\n            COVERAGE=$(go tool cover -func=coverage.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n            echo "Current coverage: ${COVERAGE}%"\r\n            echo "Required coverage: 85%"\r\n            \r\n            if (( $(echo "${COVERAGE} < 85" | bc -l) )); then\r\n              echo "Coverage ${COVERAGE}% is below threshold 85%"\r\n              exit 1\r\n            fi\r\n            \r\n      - run:\r\n          name: Generate coverage reports\r\n          command: |\r\n            go tool cover -html=coverage.out -o coverage.html\r\n            go tool cover -func=coverage.out > coverage.txt\r\n            \r\n      - codecov/upload:\r\n          file: coverage.out\r\n          \r\n      - store_artifacts:\r\n          path: coverage.html\r\n          destination: coverage-report\r\n          \r\n      - store_test_results:\r\n          path: test-results\r\n\r\nworkflows:\r\n  test-and-coverage:\r\n    jobs:\r\n      - test-with-coverage:\r\n          filters:\r\n            branches:\r\n              only: /.*/\n'})}),"\n",(0,a.jsx)(r.h2,{id:"test-report-generation",children:"Test Report Generation"}),"\n",(0,a.jsx)(r.h3,{id:"comprehensive-test-report",children:"Comprehensive Test Report"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-python",children:"def generate_r5_l_release_test_report(test_results):\r\n    \"\"\"Generate test report for R5/L Release\"\"\"\r\n    report = {\r\n        'metadata': {\r\n            'nephio_version': 'r5',\r\n            'oran_version': 'l-release',\r\n            'go_version': '1.24.6',\r\n            'test_date': datetime.now().isoformat(),\r\n            'environment': os.getenv('TEST_ENV', 'staging')\r\n        },\r\n        'summary': {\r\n            'total_tests': test_results['total'],\r\n            'passed': test_results['passed'],\r\n            'failed': test_results['failed'],\r\n            'skipped': test_results['skipped'],\r\n            'pass_rate': f\"{(test_results['passed'] / test_results['total'] * 100):.2f}%\"\r\n        },\r\n        'categories': {\r\n            'unit_tests': test_results.get('unit', {}),\r\n            'integration_tests': test_results.get('integration', {}),\r\n            'e2e_tests': test_results.get('e2e', {}),\r\n            'performance_tests': test_results.get('performance', {}),\r\n            'security_tests': test_results.get('security', {}),\r\n            'chaos_tests': test_results.get('chaos', {})\r\n        },\r\n        'l_release_validation': {\r\n            'ai_ml_apis': test_results.get('ai_ml_compliance', {}),\r\n            'energy_efficiency': test_results.get('energy_metrics', {}),\r\n            'ves_7_3': test_results.get('ves_validation', {}),\r\n            'o1_simulator': test_results.get('o1_sim_tests', {})\r\n        },\r\n        'r5_validation': {\r\n            'argocd_integration': test_results.get('argocd_tests', {}),\r\n            'ocloud_provisioning': test_results.get('ocloud_tests', {}),\r\n            'baremetal_support': test_results.get('baremetal_tests', {}),\r\n            'go_124_features': test_results.get('go_features', {})\r\n        },\r\n        'recommendations': generate_test_recommendations(test_results)\r\n    }\r\n    \r\n    # Generate HTML report\r\n    html_template = \"\"\"\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <title>R5/L Release Test Report</title>\r\n        <style>\r\n            body { font-family: Arial, sans-serif; margin: 20px; }\r\n            .header { background: #333; color: white; padding: 20px; }\r\n            .passed { color: green; font-weight: bold; }\r\n            .failed { color: red; font-weight: bold; }\r\n            .warning { color: orange; }\r\n            table { border-collapse: collapse; width: 100%; margin: 20px 0; }\r\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\r\n            th { background-color: #f2f2f2; }\r\n            .metric { font-size: 24px; font-weight: bold; }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <div class=\"header\">\r\n            <h1>Nephio R5 / O-RAN L Release Test Report</h1>\r\n            <p>Generated: {date}</p>\r\n        </div>\r\n        \r\n        <h2>Summary</h2>\r\n        <p>Pass Rate: <span class=\"{pass_class}\">{pass_rate}</span></p>\r\n        \r\n        <h2>Test Categories</h2>\r\n        <table>\r\n            <tr>\r\n                <th>Category</th>\r\n                <th>Total</th>\r\n                <th>Passed</th>\r\n                <th>Failed</th>\r\n                <th>Pass Rate</th>\r\n            </tr>\r\n            {category_rows}\r\n        </table>\r\n        \r\n        <h2>L Release Compliance</h2>\r\n        {l_release_section}\r\n        \r\n        <h2>R5 Features Validation</h2>\r\n        {r5_section}\r\n        \r\n        <h2>Performance Metrics</h2>\r\n        {performance_section}\r\n        \r\n        <h2>Recommendations</h2>\r\n        {recommendations}\r\n    </body>\r\n    </html>\r\n    \"\"\"\r\n    \r\n    return html_template.format(**report)\n"})}),"\n",(0,a.jsx)(r.h2,{id:"best-practices-for-r5l-release-testing",children:"Best Practices for R5/L Release Testing"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"AI/ML Model Testing"}),": Always validate ONNX models and inference latency"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Energy Efficiency Testing"}),": Monitor Gbps/Watt throughout testing"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Go 1.24.6 Testing"}),": Enable FIPS mode and test generics"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"ArgoCD Testing"}),": Validate GitOps workflows with ApplicationSets"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"OCloud Testing"}),": Test baremetal provisioning end-to-end"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Chaos Engineering"}),": Test resilience of AI/ML models under failure"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Performance Baselines"}),": Establish baselines for L Release metrics"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Security Scanning"}),": FIPS 140-3 usage capability is available (consult security team for validated builds and boundary documentation)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Multi-vendor Testing"}),": Validate interoperability between vendors"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Continuous Testing"}),": Run tests on every commit with parallelization"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"current-version-compatibility-matrix-august-2025",children:"Current Version Compatibility Matrix (August 2025)"}),"\n",(0,a.jsx)(r.h3,{id:"core-dependencies---tested-and-supported",children:"Core Dependencies - Tested and Supported"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Go"})}),(0,a.jsx)(r.td,{children:"1.24.6"}),(0,a.jsx)(r.td,{children:"1.24.6"}),(0,a.jsx)(r.td,{children:"1.24.6"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Latest patch release with FIPS 140-3 capability (consult security team for validated builds)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Nephio"})}),(0,a.jsx)(r.td,{children:"R5.0.0"}),(0,a.jsx)(r.td,{children:"R5.0.1"}),(0,a.jsx)(r.td,{children:"R5.0.1"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Stable release with enhanced testing capabilities"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"O-RAN SC"})}),(0,a.jsx)(r.td,{children:"L-Release"}),(0,a.jsx)(r.td,{children:"L-Release"}),(0,a.jsx)(r.td,{children:"L-Release"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"L Release (June 30, 2025) is current, superseding J/K (April 2025)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Kubernetes"})}),(0,a.jsx)(r.td,{children:"1.30.0"}),(0,a.jsx)(r.td,{children:"1.32.0"}),(0,a.jsx)(r.td,{children:"1.34.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Tested against the latest three Kubernetes minor releases (aligned with upstream support window) \u2014 (e.g., at time of writing: 1.34, 1.33, 1.32)*"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"ArgoCD"})}),(0,a.jsx)(r.td,{children:"3.1.0"}),(0,a.jsx)(r.td,{children:"3.1.0"}),(0,a.jsx)(r.td,{children:"3.1.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"R5 primary GitOps - workflow testing required"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"kpt"})}),(0,a.jsx)(r.td,{children:"v1.0.0-beta.55"}),(0,a.jsx)(r.td,{children:"v1.0.0-beta.55+"}),(0,a.jsx)(r.td,{children:"v1.0.0-beta.55"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Package testing and validation"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"testing-frameworks--tools",children:"Testing Frameworks & Tools"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Robot Framework"})}),(0,a.jsx)(r.td,{children:"6.1.0"}),(0,a.jsx)(r.td,{children:"6.1.0+"}),(0,a.jsx)(r.td,{children:"6.1.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"E2E test automation framework"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Ginkgo/Gomega"})}),(0,a.jsx)(r.td,{children:"2.15.0"}),(0,a.jsx)(r.td,{children:"2.15.0+"}),(0,a.jsx)(r.td,{children:"2.15.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"BDD testing for Go with enhanced features"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"K6"})}),(0,a.jsx)(r.td,{children:"0.49.0"}),(0,a.jsx)(r.td,{children:"0.49.0+"}),(0,a.jsx)(r.td,{children:"0.49.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Performance and load testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Pytest"})}),(0,a.jsx)(r.td,{children:"7.4.0"}),(0,a.jsx)(r.td,{children:"7.4.0+"}),(0,a.jsx)(r.td,{children:"7.4.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Python testing framework"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Playwright"})}),(0,a.jsx)(r.td,{children:"1.42.0"}),(0,a.jsx)(r.td,{children:"1.42.0+"}),(0,a.jsx)(r.td,{children:"1.42.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Web UI and API testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Testify"})}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"1.8.0+"}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Go testing toolkit"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"JUnit"})}),(0,a.jsx)(r.td,{children:"5.10.0"}),(0,a.jsx)(r.td,{children:"5.10.0+"}),(0,a.jsx)(r.td,{children:"5.10.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Java testing framework"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"security--compliance-testing",children:"Security & Compliance Testing"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Trivy"})}),(0,a.jsx)(r.td,{children:"0.49.0"}),(0,a.jsx)(r.td,{children:"0.49.0+"}),(0,a.jsx)(r.td,{children:"0.49.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Vulnerability scanning"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Snyk"})}),(0,a.jsx)(r.td,{children:"1.1275.0"}),(0,a.jsx)(r.td,{children:"1.1275.0+"}),(0,a.jsx)(r.td,{children:"1.1275.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Security testing and scanning"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Falco"})}),(0,a.jsx)(r.td,{children:"0.36.0"}),(0,a.jsx)(r.td,{children:"0.36.0+"}),(0,a.jsx)(r.td,{children:"0.36.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Runtime security monitoring and testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"OPA Gatekeeper"})}),(0,a.jsx)(r.td,{children:"3.15.0"}),(0,a.jsx)(r.td,{children:"3.15.0+"}),(0,a.jsx)(r.td,{children:"3.15.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Policy testing and validation"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"FIPS 140-3"})}),(0,a.jsx)(r.td,{children:"Go 1.24.6"}),(0,a.jsx)(r.td,{children:"Go 1.24.6+"}),(0,a.jsx)(r.td,{children:"Go 1.24.6"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Cryptographic usage testing (consult security team for validated builds)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"CIS Benchmarks"})}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"1.8.0+"}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Security baseline testing"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"o-ran-specific-testing-tools",children:"O-RAN Specific Testing Tools"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"O1 Simulator"})}),(0,a.jsx)(r.td,{children:"Python 3.11+"}),(0,a.jsx)(r.td,{children:"Python 3.11+"}),(0,a.jsx)(r.td,{children:"Python 3.11"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"L Release O1 interface testing (key feature)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"E2 Simulator"})}),(0,a.jsx)(r.td,{children:"E2AP v3.0"}),(0,a.jsx)(r.td,{children:"E2AP v3.0+"}),(0,a.jsx)(r.td,{children:"E2AP v3.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Near-RT RIC interface testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"A1 Simulator"})}),(0,a.jsx)(r.td,{children:"A1AP v3.0"}),(0,a.jsx)(r.td,{children:"A1AP v3.0+"}),(0,a.jsx)(r.td,{children:"A1AP v3.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Policy interface testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"VES Agent"})}),(0,a.jsx)(r.td,{children:"7.3.0"}),(0,a.jsx)(r.td,{children:"7.3.0+"}),(0,a.jsx)(r.td,{children:"7.3.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Event streaming validation"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"xApp SDK"})}),(0,a.jsx)(r.td,{children:"L Release"}),(0,a.jsx)(r.td,{children:"L Release+"}),(0,a.jsx)(r.td,{children:"L Release"}),(0,a.jsx)(r.td,{children:"\u26a0\ufe0f Upcoming"}),(0,a.jsx)(r.td,{children:"L Release xApp testing framework"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"rApp Framework"})}),(0,a.jsx)(r.td,{children:"2.0.0"}),(0,a.jsx)(r.td,{children:"2.0.0+"}),(0,a.jsx)(r.td,{children:"2.0.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"L Release rApp testing with enhanced features"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"aiml-and-performance-testing-tools",children:"AI/ML and Performance Testing Tools"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"ONNX Runtime"})}),(0,a.jsx)(r.td,{children:"1.15.0"}),(0,a.jsx)(r.td,{children:"1.15.0+"}),(0,a.jsx)(r.td,{children:"1.15.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"AI/ML model validation (L Release)"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Apache Bench"})}),(0,a.jsx)(r.td,{children:"2.4.0"}),(0,a.jsx)(r.td,{children:"2.4.0+"}),(0,a.jsx)(r.td,{children:"2.4.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"HTTP load testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"JMeter"})}),(0,a.jsx)(r.td,{children:"5.6.0"}),(0,a.jsx)(r.td,{children:"5.6.0+"}),(0,a.jsx)(r.td,{children:"5.6.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Multi-protocol load testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Gatling"})}),(0,a.jsx)(r.td,{children:"3.9.0"}),(0,a.jsx)(r.td,{children:"3.9.0+"}),(0,a.jsx)(r.td,{children:"3.9.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"High-performance load testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Locust"})}),(0,a.jsx)(r.td,{children:"2.20.0"}),(0,a.jsx)(r.td,{children:"2.20.0+"}),(0,a.jsx)(r.td,{children:"2.20.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Distributed load testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Kubeflow Testing"})}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"1.8.0+"}),(0,a.jsx)(r.td,{children:"1.8.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"AI/ML pipeline testing (L Release)"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"infrastructure-testing-tools",children:"Infrastructure Testing Tools"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"Minimum Version"}),(0,a.jsx)(r.th,{children:"Recommended Version"}),(0,a.jsx)(r.th,{children:"Tested Version"}),(0,a.jsx)(r.th,{children:"Status"}),(0,a.jsx)(r.th,{children:"Notes"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Chaos Monkey"})}),(0,a.jsx)(r.td,{children:"2.6.0"}),(0,a.jsx)(r.td,{children:"2.6.0+"}),(0,a.jsx)(r.td,{children:"2.6.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Chaos engineering"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Litmus"})}),(0,a.jsx)(r.td,{children:"3.8.0"}),(0,a.jsx)(r.td,{children:"3.8.0+"}),(0,a.jsx)(r.td,{children:"3.8.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Kubernetes chaos engineering"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Terratest"})}),(0,a.jsx)(r.td,{children:"0.46.0"}),(0,a.jsx)(r.td,{children:"0.46.0+"}),(0,a.jsx)(r.td,{children:"0.46.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Infrastructure testing"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Selenium"})}),(0,a.jsx)(r.td,{children:"4.18.0"}),(0,a.jsx)(r.td,{children:"4.18.0+"}),(0,a.jsx)(r.td,{children:"4.18.0"}),(0,a.jsx)(r.td,{children:"\u2705 Current"}),(0,a.jsx)(r.td,{children:"Web UI automation testing"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"supportedmodern-versions",children:"supported/modern Versions"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:"Component"}),(0,a.jsx)(r.th,{children:"supported Version"}),(0,a.jsx)(r.th,{children:"End of Support"}),(0,a.jsx)(r.th,{children:"Migration Path"}),(0,a.jsx)(r.th,{children:"Risk Level"})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Go"})}),(0,a.jsx)(r.td,{children:"< 1.24.0"}),(0,a.jsx)(r.td,{children:"December 2024"}),(0,a.jsx)(r.td,{children:"Upgrade to 1.24.6 for testing compatibility"}),(0,a.jsx)(r.td,{children:"\ud83d\udd34 High"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Robot Framework"})}),(0,a.jsx)(r.td,{children:"< 6.0.0"}),(0,a.jsx)(r.td,{children:"January 2025"}),(0,a.jsx)(r.td,{children:"Update to 6.1+ for enhanced features"}),(0,a.jsx)(r.td,{children:"\u26a0\ufe0f Medium"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"K6"})}),(0,a.jsx)(r.td,{children:"< 0.45.0"}),(0,a.jsx)(r.td,{children:"February 2025"}),(0,a.jsx)(r.td,{children:"Update to 0.49+"}),(0,a.jsx)(r.td,{children:"\u26a0\ufe0f Medium"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"Ginkgo"})}),(0,a.jsx)(r.td,{children:"< 2.10.0"}),(0,a.jsx)(r.td,{children:"March 2025"}),(0,a.jsx)(r.td,{children:"Update to 2.15+ for Go 1.24.6 compatibility"}),(0,a.jsx)(r.td,{children:"\u26a0\ufe0f Medium"})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.strong,{children:"ONNX"})}),(0,a.jsx)(r.td,{children:"< 1.14.0"}),(0,a.jsx)(r.td,{children:"April 2025"}),(0,a.jsx)(r.td,{children:"Update to 1.15+ for L Release compatibility"}),(0,a.jsx)(r.td,{children:"\ud83d\udd34 High"})]})]})]}),"\n",(0,a.jsx)(r.h3,{id:"compatibility-notes",children:"Compatibility Notes"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Go 1.24.6 Testing"}),": Required for FIPS 140-3 usage testing (FIPS usage requires a FIPS-validated crypto module/build and organization-level process controls; this project does not claim certification)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"O1 Simulator Python"}),": Key L Release testing capability requires Python 3.11+ integration"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Enhanced xApp/rApp Testing"}),": L Release features require updated SDK versions for comprehensive testing"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"AI/ML Model Testing"}),": ONNX 1.15+ required for L Release AI/ML model validation and testing"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"ArgoCD ApplicationSet Testing"}),": PRIMARY testing pattern for R5 GitOps workflow validation"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Kubeflow Integration"}),": L Release AI/ML pipeline testing requires Kubeflow 1.8.0+ compatibility"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"85% Coverage Enforcement"}),": All Go components must maintain 85%+ test coverage with atomic mode"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Parallel Testing"}),": Go 1.24.6 supports enhanced parallel testing capabilities with race detection"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Security Testing"}),": FIPS 140-3 usage testing available for production deployments (consult security team for validated builds and boundary documentation)"]}),"\n"]}),"\n",(0,a.jsx)(r.p,{children:"When implementing testing for R5/L Release, I focus on comprehensive validation of new features, AI/ML model performance, energy efficiency, and ensuring all components meet the latest O-RAN and Nephio specifications while leveraging Go 1.24.6 testing capabilities."}),"\n",(0,a.jsx)(r.h2,{id:"enhanced-test-coverage-with-go-1246-features",children:"Enhanced Test Coverage with Go 1.24.6 Features"}),"\n",(0,a.jsx)(r.h3,{id:"85-coverage-enforcement-configuration",children:"85% Coverage Enforcement Configuration"}),"\n",(0,a.jsx)(r.h4,{id:"comprehensive-coverage-commands",children:"Comprehensive Coverage Commands"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Enhanced coverage commands for Nephio R5/O-RAN L Release\r\ngo test -cover -coverprofile=coverage.out ./...\r\ngo tool cover -html=coverage.out -o coverage.html\r\n\r\n# Detailed coverage with atomic mode for concurrent tests\r\ngo test -covermode=atomic -coverprofile=coverage.out -race ./...\r\n\r\n# Coverage with specific package filtering for R5/L Release\r\ngo test -coverprofile=coverage.out -coverpkg=./pkg/nephio/...,./pkg/oran/...,./internal/... ./...\r\n\r\n# Coverage excluding vendor and test utilities\r\ngo test -coverprofile=coverage.out $(go list ./... | grep -v /vendor/ | grep -v /testdata/ | grep -v /mocks/)\r\n\r\n# Coverage with parallel execution and timeout\r\ngo test -parallel=8 -timeout=30m -coverprofile=coverage.out ./...\n"})}),"\n",(0,a.jsx)(r.h4,{id:"advanced-coverage-analysis",children:"Advanced Coverage Analysis"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"# Generate comprehensive coverage reports\r\ngo tool cover -func=coverage.out > coverage_func.txt\r\ngo tool cover -html=coverage.out -o coverage.html\r\n\r\n# Extract coverage percentage for CI/CD\r\nCOVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\r\necho \"Total coverage: ${COVERAGE}%\"\r\n\r\n# Generate coverage badge\r\ngo get github.com/AlecAivazis/survey/v2\r\ncoverage-badge -coverage=${COVERAGE} -output=coverage.svg\r\n\r\n# Coverage diff between branches\r\ngit diff HEAD~1 HEAD -- '*.go' | go tool cover -func=- > coverage_diff.txt\n"})}),"\n",(0,a.jsx)(r.h4,{id:"enhanced-coverage-enforcement-script",children:"Enhanced Coverage Enforcement Script"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:'#!/bin/bash\r\n# enhanced-coverage-check.sh - Enforce 85% coverage with detailed reporting\r\n\r\nset -euo pipefail\r\n\r\n# Configuration\r\nTHRESHOLD=85.0\r\nCOVERAGE_FILE="coverage.out"\r\nHTML_REPORT="coverage.html"\r\nJSON_REPORT="coverage.json"\r\nBADGE_FILE="coverage.svg"\r\n\r\n# Colors for output\r\nRED=\'\\033[0;31m\'\r\nGREEN=\'\\033[0;32m\'\r\nYELLOW=\'\\033[1;33m\'\r\nNC=\'\\033[0m\' # No Color\r\n\r\necho "\ud83e\uddea Running comprehensive test coverage analysis..."\r\necho "\ud83d\udcca Target Coverage: ${THRESHOLD}%"\r\n\r\n# Clean previous reports\r\nrm -f ${COVERAGE_FILE} ${HTML_REPORT} ${JSON_REPORT} ${BADGE_FILE}\r\n\r\n# Run tests with coverage\r\necho "\u25b6\ufe0f  Running tests with coverage..."\r\nif ! go test -covermode=atomic -coverprofile=${COVERAGE_FILE} -race -timeout=30m ./...; then\r\n    echo -e "${RED}\u274c Tests failed!${NC}"\r\n    exit 1\r\nfi\r\n\r\n# Verify coverage file exists\r\nif [[ ! -f ${COVERAGE_FILE} ]]; then\r\n    echo -e "${RED}\u274c Coverage file not generated!${NC}"\r\n    exit 1\r\nfi\r\n\r\n# Extract detailed coverage information\r\necho "\ud83d\udcc8 Analyzing coverage results..."\r\ngo tool cover -func=${COVERAGE_FILE} > coverage_detailed.txt\r\n\r\n# Extract total coverage\r\nCOVERAGE=$(go tool cover -func=${COVERAGE_FILE} | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n\r\nif [[ -z "${COVERAGE}" ]]; then\r\n    echo -e "${RED}\u274c Could not extract coverage percentage!${NC}"\r\n    exit 1\r\nfi\r\n\r\necho -e "\ud83d\udcca Current coverage: ${GREEN}${COVERAGE}%${NC}"\r\necho -e "\ud83c\udfaf Required coverage: ${YELLOW}${THRESHOLD}%${NC}"\r\n\r\n# Compare with threshold (handle decimal comparison)\r\nif (( $(echo "${COVERAGE} < ${THRESHOLD}" | bc -l) )); then\r\n    echo -e "${RED}\u274c Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%${NC}"\r\n    echo -e "${YELLOW}\ud83d\udcdd Coverage by package:${NC}"\r\n    grep -v "total:" coverage_detailed.txt | head -20\r\n    echo ""\r\n    echo -e "${YELLOW}\ud83d\udca1 Add more tests to these packages to meet the coverage requirement.${NC}"\r\n    exit 1\r\nelse\r\n    echo -e "${GREEN}\u2705 Coverage check passed!${NC}"\r\nfi\r\n\r\n# Generate enhanced reports\r\necho "\ud83d\udcc4 Generating comprehensive coverage reports..."\r\n\r\n# HTML report with heat map\r\ngo tool cover -html=${COVERAGE_FILE} -o ${HTML_REPORT}\r\necho -e "${GREEN}\ud83d\udcc4 HTML report: ${HTML_REPORT}${NC}"\r\n\r\n# JSON report for CI/CD integration\r\ngo tool cover -func=${COVERAGE_FILE} | awk \'\r\nBEGIN { print "{\\"coverage\\":{\\"packages\\":[" }\r\n/\\.go:/ { \r\n    gsub(/^[[:space:]]+|[[:space:]]+$/, "", $1)\r\n    gsub(/%/, "", $3)\r\n    if (NR > 1) print ","\r\n    printf "{\\"file\\":\\"%s\\",\\"function\\":\\"%s\\",\\"coverage\\":%s}", $1, $2, $3\r\n}\r\nEND { print "],\\"total\\":" coverage "}}" }\r\n\' coverage=${COVERAGE} > ${JSON_REPORT}\r\n\r\necho -e "${GREEN}\ud83d\udcc4 JSON report: ${JSON_REPORT}${NC}"\r\n\r\n# Generate coverage badge\r\nif command -v coverage-badge &> /dev/null; then\r\n    coverage-badge -coverage=${COVERAGE} -output=${BADGE_FILE}\r\n    echo -e "${GREEN}\ud83d\udcc4 Coverage badge: ${BADGE_FILE}${NC}"\r\nfi\r\n\r\n# Package-level coverage analysis\r\necho -e "${YELLOW}\ud83d\udce6 Package-level coverage analysis:${NC}"\r\ngo tool cover -func=${COVERAGE_FILE} | grep -E "^.*\\.go:" | awk \'{\r\n    split($1, parts, "/")\r\n    package = parts[length(parts)-1]\r\n    gsub(/\\.go:.*/, "", package)\r\n    coverage[package] += $3\r\n    count[package]++\r\n}\r\nEND {\r\n    for (pkg in coverage) {\r\n        avg = coverage[pkg] / count[pkg]\r\n        printf "%-30s %6.1f%%\\n", pkg, avg\r\n    }\r\n}\' | sort -k2 -nr\r\n\r\necho -e "${GREEN}\u2705 Coverage analysis complete!${NC}"\n'})}),"\n",(0,a.jsx)(r.h3,{id:"go-1246-testing-features-and-examples",children:"Go 1.24.6 Testing Features and Examples"}),"\n",(0,a.jsx)(r.h4,{id:"testing-with-go-1246-loop-method",children:"Testing with Go 1.24.6 Loop Method"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-go",children:'// Example testable functions with high coverage for Nephio R5/O-RAN L Release\r\npackage nephio\r\n\r\nimport (\r\n    "context"\r\n    "errors"\r\n    "testing"\r\n    "time"\r\n    "github.com/stretchr/testify/assert"\r\n    "github.com/stretchr/testify/require"\r\n)\r\n\r\n// Example: High-coverage function for R5 configuration validation\r\nfunc ValidateR5Configuration(config *R5Config) error {\r\n    if config == nil {\r\n        return errors.New("configuration cannot be nil")\r\n    }\r\n    \r\n    if config.ArgoCD == nil {\r\n        return errors.New("ArgoCD configuration is required")\r\n    }\r\n    \r\n    if config.OCloud == nil {\r\n        return errors.New("OCloud configuration is required")\r\n    }\r\n    \r\n    if config.PackageVariants == nil || len(config.PackageVariants) == 0 {\r\n        return errors.New("at least one package variant must be configured")\r\n    }\r\n    \r\n    // Validate ArgoCD ApplicationSets\r\n    for _, appSet := range config.ArgoCD.ApplicationSets {\r\n        if appSet.Name == "" {\r\n            return errors.New("ApplicationSet name cannot be empty")\r\n        }\r\n        if len(appSet.Generators) == 0 {\r\n            return errors.New("ApplicationSet must have at least one generator")\r\n        }\r\n    }\r\n    \r\n    // Validate OCloud baremetal configuration\r\n    if config.OCloud.Baremetal.Enabled {\r\n        if config.OCloud.Baremetal.Metal3Config == nil {\r\n            return errors.New("Metal3 configuration required when baremetal is enabled")\r\n        }\r\n        if len(config.OCloud.Baremetal.Hosts) == 0 {\r\n            return errors.New("at least one baremetal host must be configured")\r\n        }\r\n    }\r\n    \r\n    return nil\r\n}\r\n\r\n// Comprehensive test with 100% coverage\r\nfunc TestValidateR5Configuration(t *testing.T) {\r\n    tests := []struct {\r\n        name        string\r\n        config      *R5Config\r\n        wantErr     bool\r\n        expectedErr string\r\n    }{\r\n        {\r\n            name:        "nil config",\r\n            config:      nil,\r\n            wantErr:     true,\r\n            expectedErr: "configuration cannot be nil",\r\n        },\r\n        {\r\n            name: "missing ArgoCD config",\r\n            config: &R5Config{\r\n                OCloud: &OCloudConfig{},\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "ArgoCD configuration is required",\r\n        },\r\n        {\r\n            name: "missing OCloud config",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{},\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "OCloud configuration is required",\r\n        },\r\n        {\r\n            name: "empty package variants",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{},\r\n                OCloud: &OCloudConfig{},\r\n                PackageVariants: []*PackageVariant{},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "at least one package variant must be configured",\r\n        },\r\n        {\r\n            name: "ApplicationSet without name",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{\r\n                    ApplicationSets: []*ApplicationSet{\r\n                        {Name: "", Generators: []*Generator{{}}},\r\n                    },\r\n                },\r\n                OCloud: &OCloudConfig{},\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "ApplicationSet name cannot be empty",\r\n        },\r\n        {\r\n            name: "ApplicationSet without generators",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{\r\n                    ApplicationSets: []*ApplicationSet{\r\n                        {Name: "test", Generators: []*Generator{}},\r\n                    },\r\n                },\r\n                OCloud: &OCloudConfig{},\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "ApplicationSet must have at least one generator",\r\n        },\r\n        {\r\n            name: "baremetal enabled without Metal3 config",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{\r\n                    ApplicationSets: []*ApplicationSet{\r\n                        {Name: "test", Generators: []*Generator{{}}},\r\n                    },\r\n                },\r\n                OCloud: &OCloudConfig{\r\n                    Baremetal: &BaremetalConfig{\r\n                        Enabled: true,\r\n                        Metal3Config: nil,\r\n                    },\r\n                },\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "Metal3 configuration required when baremetal is enabled",\r\n        },\r\n        {\r\n            name: "baremetal enabled without hosts",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{\r\n                    ApplicationSets: []*ApplicationSet{\r\n                        {Name: "test", Generators: []*Generator{{}}},\r\n                    },\r\n                },\r\n                OCloud: &OCloudConfig{\r\n                    Baremetal: &BaremetalConfig{\r\n                        Enabled: true,\r\n                        Metal3Config: &Metal3Config{},\r\n                        Hosts: []*BaremetalHost{},\r\n                    },\r\n                },\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "at least one baremetal host must be configured",\r\n        },\r\n        {\r\n            name: "valid configuration",\r\n            config: &R5Config{\r\n                ArgoCD: &ArgoCDConfig{\r\n                    ApplicationSets: []*ApplicationSet{\r\n                        {Name: "test", Generators: []*Generator{{}}},\r\n                    },\r\n                },\r\n                OCloud: &OCloudConfig{\r\n                    Baremetal: &BaremetalConfig{\r\n                        Enabled: true,\r\n                        Metal3Config: &Metal3Config{},\r\n                        Hosts: []*BaremetalHost{{}},\r\n                    },\r\n                },\r\n                PackageVariants: []*PackageVariant{{}},\r\n            },\r\n            wantErr: false,\r\n        },\r\n    }\r\n\r\n    for _, tt := range tests {\r\n        t.Run(tt.name, func(t *testing.T) {\r\n            err := ValidateR5Configuration(tt.config)\r\n            \r\n            if tt.wantErr {\r\n                require.Error(t, err)\r\n                assert.Contains(t, err.Error(), tt.expectedErr)\r\n            } else {\r\n                require.NoError(t, err)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// Go 1.24.6 Benchmark using standard b.N\r\nfunc BenchmarkR5ConfigValidation(b *testing.B) {\r\n    config := &R5Config{\r\n        ArgoCD: &ArgoCDConfig{\r\n            ApplicationSets: []*ApplicationSet{\r\n                {Name: "test", Generators: []*Generator{{}}},\r\n            },\r\n        },\r\n        OCloud: &OCloudConfig{\r\n            Baremetal: &BaremetalConfig{\r\n                Enabled: true,\r\n                Metal3Config: &Metal3Config{},\r\n                Hosts: []*BaremetalHost{{}},\r\n            },\r\n        },\r\n        PackageVariants: []*PackageVariant{{}},\r\n    }\r\n    \r\n    // Standard Go benchmarking pattern\r\n    b.ResetTimer()\r\n    for i := 0; i < b.N; i++ {\r\n        ValidateR5Configuration(config)\r\n    }\r\n}\r\n\r\n// Example: O-RAN L Release AI/ML model validation with high coverage\r\nfunc ValidateLReleaseAIModel(model *AIModel) error {\r\n    if model == nil {\r\n        return errors.New("AI model cannot be nil")\r\n    }\r\n    \r\n    if model.Name == "" {\r\n        return errors.New("model name is required")\r\n    }\r\n    \r\n    if model.Version == "" {\r\n        return errors.New("model version is required")\r\n    }\r\n    \r\n    if model.Framework == "" {\r\n        return errors.New("model framework is required")\r\n    }\r\n    \r\n    // Validate supported frameworks for L Release\r\n    supportedFrameworks := []string{"onnx", "tensorflow", "pytorch", "kubeflow"}\r\n    frameworkValid := false\r\n    for _, framework := range supportedFrameworks {\r\n        if model.Framework == framework {\r\n            frameworkValid = true\r\n            break\r\n        }\r\n    }\r\n    \r\n    if !frameworkValid {\r\n        return errors.New("supported framework for L Release")\r\n    }\r\n    \r\n    // Validate model performance requirements for L Release\r\n    if model.InferenceLatencyMs > 50 {\r\n        return errors.New("inference latency must be < 50ms for L Release")\r\n    }\r\n    \r\n    if model.AccuracyPercent < 95.0 {\r\n        return errors.New("model accuracy must be >= 95% for L Release")\r\n    }\r\n    \r\n    // Validate Python-based O1 simulator integration\r\n    if model.O1SimulatorEnabled {\r\n        if model.O1SimulatorConfig == nil {\r\n            return errors.New("O1 simulator config required when enabled")\r\n        }\r\n        if model.O1SimulatorConfig.PythonVersion < "3.11" {\r\n            return errors.New("Python 3.11+ required for L Release O1 simulator")\r\n        }\r\n    }\r\n    \r\n    return nil\r\n}\r\n\r\n// Comprehensive test for AI/ML model validation\r\nfunc TestValidateLReleaseAIModel(t *testing.T) {\r\n    tests := []struct {\r\n        name        string\r\n        model       *AIModel\r\n        wantErr     bool\r\n        expectedErr string\r\n    }{\r\n        {\r\n            name:        "nil model",\r\n            model:       nil,\r\n            wantErr:     true,\r\n            expectedErr: "AI model cannot be nil",\r\n        },\r\n        {\r\n            name: "missing name",\r\n            model: &AIModel{\r\n                Version:   "1.0",\r\n                Framework: "onnx",\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "model name is required",\r\n        },\r\n        {\r\n            name: "supported framework",\r\n            model: &AIModel{\r\n                Name:      "test-model",\r\n                Version:   "1.0",\r\n                Framework: "caffe",\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "supported framework for L Release",\r\n        },\r\n        {\r\n            name: "high inference latency",\r\n            model: &AIModel{\r\n                Name:                "test-model",\r\n                Version:             "1.0",\r\n                Framework:           "onnx",\r\n                InferenceLatencyMs:  60,\r\n                AccuracyPercent:     96.0,\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "inference latency must be < 50ms for L Release",\r\n        },\r\n        {\r\n            name: "low accuracy",\r\n            model: &AIModel{\r\n                Name:                "test-model",\r\n                Version:             "1.0",\r\n                Framework:           "onnx",\r\n                InferenceLatencyMs:  30,\r\n                AccuracyPercent:     90.0,\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "model accuracy must be >= 95% for L Release",\r\n        },\r\n        {\r\n            name: "O1 simulator enabled without config",\r\n            model: &AIModel{\r\n                Name:                "test-model",\r\n                Version:             "1.0",\r\n                Framework:           "onnx",\r\n                InferenceLatencyMs:  30,\r\n                AccuracyPercent:     96.0,\r\n                O1SimulatorEnabled:  true,\r\n                O1SimulatorConfig:   nil,\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "O1 simulator config required when enabled",\r\n        },\r\n        {\r\n            name: "invalid Python version for O1 simulator",\r\n            model: &AIModel{\r\n                Name:                "test-model",\r\n                Version:             "1.0",\r\n                Framework:           "onnx",\r\n                InferenceLatencyMs:  30,\r\n                AccuracyPercent:     96.0,\r\n                O1SimulatorEnabled:  true,\r\n                O1SimulatorConfig:   &O1SimulatorConfig{PythonVersion: "3.9"},\r\n            },\r\n            wantErr:     true,\r\n            expectedErr: "Python 3.11+ required for L Release O1 simulator",\r\n        },\r\n        {\r\n            name: "valid model",\r\n            model: &AIModel{\r\n                Name:                "test-model",\r\n                Version:             "1.0",\r\n                Framework:           "onnx",\r\n                InferenceLatencyMs:  30,\r\n                AccuracyPercent:     96.0,\r\n                O1SimulatorEnabled:  true,\r\n                O1SimulatorConfig:   &O1SimulatorConfig{PythonVersion: "3.11"},\r\n            },\r\n            wantErr: false,\r\n        },\r\n    }\r\n\r\n    for _, tt := range tests {\r\n        t.Run(tt.name, func(t *testing.T) {\r\n            err := ValidateLReleaseAIModel(tt.model)\r\n            \r\n            if tt.wantErr {\r\n                require.Error(t, err)\r\n                assert.Contains(t, err.Error(), tt.expectedErr)\r\n            } else {\r\n                require.NoError(t, err)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n// Go 1.24.6 Benchmark for AI/ML model validation\r\nfunc BenchmarkLReleaseAIModelValidation(b *testing.B) {\r\n    model := &AIModel{\r\n        Name:                "benchmark-model",\r\n        Version:             "1.0",\r\n        Framework:           "onnx",\r\n        InferenceLatencyMs:  25,\r\n        AccuracyPercent:     97.5,\r\n        O1SimulatorEnabled:  true,\r\n        O1SimulatorConfig:   &O1SimulatorConfig{PythonVersion: "3.11"},\r\n    }\r\n    \r\n    b.ResetTimer()\r\n    for i := 0; i < b.N; i++ {\r\n        ValidateLReleaseAIModel(model)\r\n    }\r\n}\r\n\r\n// Example: Context-aware operation with timeout testing\r\nfunc DeployWithTimeout(ctx context.Context, config *DeploymentConfig) error {\r\n    select {\r\n    case <-ctx.Done():\r\n        return ctx.Err()\r\n    default:\r\n    }\r\n    \r\n    if config == nil {\r\n        return errors.New("deployment config cannot be nil")\r\n    }\r\n    \r\n    // Simulate deployment work\r\n    time.Sleep(100 * time.Millisecond)\r\n    \r\n    return nil\r\n}\r\n\r\nfunc TestDeployWithTimeout(t *testing.T) {\r\n    t.Run("successful deployment", func(t *testing.T) {\r\n        ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\r\n        defer cancel()\r\n        \r\n        config := &DeploymentConfig{Name: "test"}\r\n        err := DeployWithTimeout(ctx, config)\r\n        \r\n        require.NoError(t, err)\r\n    })\r\n    \r\n    t.Run("deployment timeout", func(t *testing.T) {\r\n        ctx, cancel := context.WithTimeout(context.Background(), 50*time.Millisecond)\r\n        defer cancel()\r\n        \r\n        config := &DeploymentConfig{Name: "test"}\r\n        err := DeployWithTimeout(ctx, config)\r\n        \r\n        require.Error(t, err)\r\n        assert.True(t, errors.Is(err, context.DeadlineExceeded))\r\n    })\r\n    \r\n    t.Run("nil config", func(t *testing.T) {\r\n        ctx := context.Background()\r\n        err := DeployWithTimeout(ctx, nil)\r\n        \r\n        require.Error(t, err)\r\n        assert.Contains(t, err.Error(), "deployment config cannot be nil")\r\n    })\r\n}\n'})}),"\n",(0,a.jsx)(r.h3,{id:"cicd-coverage-integration-enhancements",children:"CI/CD Coverage Integration Enhancements"}),"\n",(0,a.jsx)(r.h4,{id:"enhanced-github-actions-with-coverage-enforcement",children:"Enhanced GitHub Actions with Coverage Enforcement"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'name: Comprehensive Testing with 85% Coverage\r\n\r\non:\r\n  push:\r\n    branches: [main, develop, \'feature/*\']\r\n  pull_request:\r\n    branches: [main, develop]\r\n\r\nenv:\r\n  GO_VERSION: "1.24.6"\r\n  COVERAGE_THRESHOLD: 85\r\n  COVERAGE_FILE: coverage.out\r\n\r\njobs:\r\n  test-coverage:\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      matrix:\r\n        go-version: [\'1.24.6\']\r\n        test-type: [\'unit\', \'integration\']\r\n    \r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 2\r\n\r\n      - name: Setup Go ${{ matrix.go-version }}\r\n        uses: actions/setup-go@v5\r\n        with:\r\n          go-version: ${{ matrix.go-version }}\r\n\r\n      - name: Cache Go modules\r\n        uses: actions/cache@v4\r\n        with:\r\n          path: |\r\n            ~/.cache/go-build\r\n            ~/go/pkg/mod\r\n          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles(\'**/go.sum\') }}\r\n          restore-keys: |\r\n            ${{ runner.os }}-go-${{ matrix.go-version }}-\r\n\r\n      - name: Download dependencies\r\n        run: go mod download\r\n\r\n      - name: Run enhanced coverage tests\r\n        run: |\r\n          # Install coverage tools\r\n          go install github.com/axw/gocov/gocov@latest\r\n          go install github.com/AlecAivazis/survey/v2@latest\r\n          \r\n          # Run tests with enhanced coverage\r\n          ./scripts/enhanced-coverage-check.sh\r\n\r\n      - name: Generate coverage reports\r\n        run: |\r\n          # Convert to different formats\r\n          gocov convert coverage.out | gocov-xml > coverage.xml\r\n          gocov convert coverage.out | gocov-html > coverage_detailed.html\r\n          \r\n          # Extract coverage for badge\r\n          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n          echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV\r\n\r\n      - name: Upload coverage to Codecov\r\n        uses: codecov/codecov-action@v4\r\n        with:\r\n          file: ./coverage.out\r\n          flags: ${{ matrix.test-type }}\r\n          name: coverage-${{ matrix.go-version }}-${{ matrix.test-type }}\r\n          fail_ci_if_error: true\r\n          verbose: true\r\n\r\n      - name: Update coverage badge\r\n        if: matrix.test-type == \'unit\' && github.ref == \'refs/heads/main\'\r\n        run: |\r\n          # Generate dynamic coverage badge\r\n          curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%-brightgreen" > coverage.svg\r\n          \r\n          # Commit badge if it changed\r\n          if ! git diff --quiet coverage.svg; then\r\n            git config --local user.email "action@github.com"\r\n            git config --local user.name "GitHub Action"\r\n            git add coverage.svg\r\n            git commit -m "Update coverage badge to ${COVERAGE}%"\r\n            git push\r\n          fi\r\n\r\n      - name: Coverage enforcement\r\n        run: |\r\n          if (( $(echo "${{ env.COVERAGE }} < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then\r\n            echo "::error::Coverage ${{ env.COVERAGE }}% is below threshold ${{ env.COVERAGE_THRESHOLD }}%"\r\n            exit 1\r\n          fi\r\n          echo "::notice::Coverage check passed: ${{ env.COVERAGE }}%"\r\n\r\n      - name: Archive coverage reports\r\n        uses: actions/upload-artifact@v4\r\n        with:\r\n          name: coverage-reports-${{ matrix.go-version }}-${{ matrix.test-type }}\r\n          path: |\r\n            coverage.out\r\n            coverage.html\r\n            coverage.xml\r\n            coverage_detailed.html\r\n            coverage.json\r\n\r\n  coverage-comparison:\r\n    runs-on: ubuntu-latest\r\n    needs: test-coverage\r\n    if: github.event_name == \'pull_request\'\r\n    \r\n    steps:\r\n      - name: Checkout code\r\n        uses: actions/checkout@v4\r\n        with:\r\n          fetch-depth: 0\r\n\r\n      - name: Setup Go\r\n        uses: actions/setup-go@v5\r\n        with:\r\n          go-version: ${{ env.GO_VERSION }}\r\n\r\n      - name: Compare coverage with main branch\r\n        run: |\r\n          # Get current coverage\r\n          go test -coverprofile=coverage_current.out ./...\r\n          CURRENT_COVERAGE=$(go tool cover -func=coverage_current.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n          \r\n          # Get main branch coverage\r\n          git checkout origin/main\r\n          go test -coverprofile=coverage_main.out ./...\r\n          MAIN_COVERAGE=$(go tool cover -func=coverage_main.out | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n          \r\n          # Calculate difference\r\n          COVERAGE_DIFF=$(echo "$CURRENT_COVERAGE - $MAIN_COVERAGE" | bc -l)\r\n          \r\n          echo "Current coverage: ${CURRENT_COVERAGE}%"\r\n          echo "Main branch coverage: ${MAIN_COVERAGE}%"\r\n          echo "Coverage difference: ${COVERAGE_DIFF}%"\r\n          \r\n          # Comment on PR if coverage decreased significantly\r\n          if (( $(echo "${COVERAGE_DIFF} < -2" | bc -l) )); then\r\n            echo "::warning::Coverage decreased by ${COVERAGE_DIFF}% compared to main branch"\r\n          elif (( $(echo "${COVERAGE_DIFF} > 2" | bc -l) )); then\r\n            echo "::notice::Coverage improved by ${COVERAGE_DIFF}% compared to main branch"\r\n          fi\n'})}),"\n",(0,a.jsx)(r.h4,{id:"enhanced-gitlab-ci-with-coverage",children:"Enhanced GitLab CI with Coverage"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'# Enhanced GitLab CI with comprehensive coverage\r\nstages:\r\n  - test\r\n  - coverage\r\n  - report\r\n\r\nvariables:\r\n  GO_VERSION: "1.24.6"\r\n  COVERAGE_THRESHOLD: "85"\r\n  COVERAGE_FILE: "coverage.out"\r\n\r\n.go_template: &go_template\r\n  image: golang:${GO_VERSION}\r\n  before_script:\r\n    - go version\r\n    - go mod download\r\n    - mkdir -p coverage-reports\r\n\r\nunit_tests:\r\n  <<: *go_template\r\n  stage: test\r\n  script:\r\n    - go test -v -race -covermode=atomic -coverprofile=${COVERAGE_FILE} ./...\r\n    - go tool cover -func=${COVERAGE_FILE}\r\n    - go tool cover -html=${COVERAGE_FILE} -o coverage.html\r\n  coverage: \'/total:\\s+\\(statements\\)\\s+(\\d+\\.\\d+)%/\'\r\n  artifacts:\r\n    reports:\r\n      coverage_report:\r\n        coverage_format: cobertura\r\n        path: coverage.xml\r\n    paths:\r\n      - ${COVERAGE_FILE}\r\n      - coverage.html\r\n      - coverage.xml\r\n    expire_in: 1 week\r\n\r\ncoverage_enforcement:\r\n  <<: *go_template\r\n  stage: coverage\r\n  needs: [unit_tests]\r\n  script:\r\n    - COVERAGE=$(go tool cover -func=${COVERAGE_FILE} | grep total | awk \'{print $3}\' | sed \'s/%//\')\r\n    - echo "Current coverage: ${COVERAGE}%"\r\n    - echo "Required coverage: ${COVERAGE_THRESHOLD}%"\r\n    - |\r\n      if (( $(echo "${COVERAGE} < ${COVERAGE_THRESHOLD}" | bc -l) )); then\r\n        echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"\r\n        echo "Top files with low coverage:"\r\n        go tool cover -func=${COVERAGE_FILE} | grep -v "100.0%" | head -10\r\n        exit 1\r\n      fi\r\n    - echo "Coverage check passed!"\r\n\r\npages:\r\n  stage: report\r\n  needs: [coverage_enforcement]\r\n  script:\r\n    - mkdir public\r\n    - cp coverage.html public/index.html\r\n    - cp ${COVERAGE_FILE} public/\r\n    - echo "Coverage report deployed to GitLab Pages"\r\n  artifacts:\r\n    paths:\r\n      - public\r\n  only:\r\n    - main\n'})}),"\n",(0,a.jsx)(r.h2,{id:"collaboration-protocol",children:"Collaboration Protocol"}),"\n",(0,a.jsx)(r.h3,{id:"standard-output-format",children:"Standard Output Format"}),"\n",(0,a.jsx)(r.p,{children:"I structure all responses using this standardized format to enable seamless multi-agent workflows:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-yaml",children:'status: success|warning|error\r\nsummary: "Brief description of what was accomplished"\r\ndetails:\r\n  actions_taken:\r\n    - "Specific action 1"\r\n    - "Specific action 2"\r\n  resources_created:\r\n    - name: "resource-name"\r\n      type: "kubernetes/terraform/config"\r\n      location: "path or namespace"\r\n  configurations_applied:\r\n    - file: "config-file.yaml"\r\n      changes: "Description of changes"\r\n  metrics:\r\n    tokens_used: 500\r\n    execution_time: "2.3s"\r\nnext_steps:\r\n  - "Recommended next action"\r\n  - "Alternative action"\r\nhandoff_to: null  # Terminal agent - workflow complete\r\nartifacts:\r\n  - type: "yaml|json|script"\r\n    name: "artifact-name"\r\n    content: |\r\n      # Actual content here\n'})}),"\n",(0,a.jsx)(r.h3,{id:"workflow-integration",children:"Workflow Integration"}),"\n",(0,a.jsx)(r.p,{children:"This agent participates in standard workflows and accepts context from previous agents via state files in ~/.claude-workflows/"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Workflow Stage"}),": 8 (Final Validation - Terminal)"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Primary Workflow"}),": End-to-end testing and validation - final verification before deployment completion"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Accepts from"}),":","\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"performance-optimization-agent (standard deployment workflow)"}),"\n",(0,a.jsx)(r.li,{children:"Any agent requiring validation after changes"}),"\n",(0,a.jsx)(r.li,{children:"oran-nephio-dep-doctor-agent (dependency validation scenarios)"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Hands off to"}),": null (workflow terminal)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Alternative Handoff"}),": monitoring-analytics-agent (for continuous validation setup)"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Workflow Purpose"}),": Comprehensive testing of all O-RAN components and workflows to ensure system reliability"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"Termination Condition"}),": All tests pass and deployment is validated as successful"]}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"support-statement",children:"Support Statement"}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Support Statement"})," \u2014 This agent is tested against the latest three Kubernetes minor releases in line with the upstream support window. It targets Go 1.24 language semantics and pins the build toolchain to go1.24.6. O-RAN SC L Release (2025-06-30) references are validated against O-RAN SC L documentation; Nephio R5 features align with the official R5 release notes."]}),"\n",(0,a.jsxs)(r.p,{children:[(0,a.jsx)(r.strong,{children:"Validation Rules"}),":"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"Terminal agent - typically does not handoff (workflow complete)"}),"\n",(0,a.jsx)(r.li,{children:"Can accept from any agent requiring validation"}),"\n",(0,a.jsx)(r.li,{children:"Should provide comprehensive test report as final deliverable"}),"\n",(0,a.jsx)(r.li,{children:"Stage 8 is highest - no forward progression rules"}),"\n"]}),"\n",(0,a.jsxs)(r.p,{children:["*Kubernetes support follows the ",(0,a.jsx)(r.a,{href:"https://kubernetes.io/releases/",children:"official upstream policy"})," for the latest three minor releases."]})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},3905:(e,r,n)=>{n.d(r,{A:()=>F});var t,a,i,o,l,s,c,d,h,m,g,p,u,f,v,x,E,R,_,j,y,w,C,b,A,k,O,T,G,N,P,I,L,S,M,$,V=n(6540);function D(){return D=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)({}).hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},D.apply(null,arguments)}const F=({title:e,titleId:r,...n})=>V.createElement("svg",D({xmlns:"http://www.w3.org/2000/svg",width:1129,height:663,viewBox:"0 0 1129 663","aria-labelledby":r},n),void 0===e?V.createElement("title",{id:r},"Focus on What Matters"):e?V.createElement("title",{id:r},e):null,t||(t=V.createElement("circle",{cx:321,cy:321,r:321,fill:"#f2f2f2"})),a||(a=V.createElement("ellipse",{cx:559,cy:635.5,fill:"#3f3d56",rx:514,ry:27.5})),i||(i=V.createElement("ellipse",{cx:558,cy:627,opacity:.2,rx:460,ry:22})),o||(o=V.createElement("path",{fill:"#3f3d56",d:"M131 152.5h840v50H131z"})),l||(l=V.createElement("path",{fill:"#3f3d56",d:"M131 608.83a21.67 21.67 0 0 0 21.67 21.67h796.66A21.67 21.67 0 0 0 971 608.83V177.5H131ZM949.33 117.5H152.67A21.67 21.67 0 0 0 131 139.17v38.33h840v-38.33a21.67 21.67 0 0 0-21.67-21.67"})),s||(s=V.createElement("path",{d:"M949.33 117.5H152.67A21.67 21.67 0 0 0 131 139.17v38.33h840v-38.33a21.67 21.67 0 0 0-21.67-21.67",opacity:.2})),c||(c=V.createElement("circle",{cx:181,cy:147.5,r:13,fill:"#3f3d56"})),d||(d=V.createElement("circle",{cx:217,cy:147.5,r:13,fill:"#3f3d56"})),h||(h=V.createElement("circle",{cx:253,cy:147.5,r:13,fill:"#3f3d56"})),m||(m=V.createElement("rect",{width:337,height:386,x:168,y:213.5,fill:"#606060",rx:5.335})),g||(g=V.createElement("rect",{width:284,height:22,x:603,y:272.5,fill:"#2e8555",rx:5.476})),p||(p=V.createElement("rect",{width:416,height:15,x:537,y:352.5,fill:"#2e8555",rx:5.476})),u||(u=V.createElement("rect",{width:416,height:15,x:537,y:396.5,fill:"#2e8555",rx:5.476})),f||(f=V.createElement("rect",{width:416,height:15,x:537,y:440.5,fill:"#2e8555",rx:5.476})),v||(v=V.createElement("rect",{width:416,height:15,x:537,y:484.5,fill:"#2e8555",rx:5.476})),x||(x=V.createElement("rect",{width:88,height:26,x:865,y:552.5,fill:"#3ecc5f",rx:7.028})),E||(E=V.createElement("path",{fill:"#3f3d56",d:"M1053.103 506.116a30.1 30.1 0 0 0 3.983-15.266c0-13.797-8.544-24.98-19.083-24.98s-19.082 11.183-19.082 24.98a30.1 30.1 0 0 0 3.983 15.266 31.25 31.25 0 0 0 0 30.532 31.25 31.25 0 0 0 0 30.532 31.25 31.25 0 0 0 0 30.532 30.1 30.1 0 0 0-3.983 15.266c0 13.797 8.543 24.981 19.082 24.981s19.083-11.184 19.083-24.98a30.1 30.1 0 0 0-3.983-15.267 31.25 31.25 0 0 0 0-30.532 31.25 31.25 0 0 0 0-30.532 31.25 31.25 0 0 0 0-30.532"})),R||(R=V.createElement("ellipse",{cx:1038.003,cy:460.318,fill:"#3f3d56",rx:19.083,ry:24.981})),_||(_=V.createElement("ellipse",{cx:1038.003,cy:429.786,fill:"#3f3d56",rx:19.083,ry:24.981})),j||(j=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M1109.439 220.845a92 92 0 0 0 7.106-10.461l-50.14-8.235 54.228.403a91.57 91.57 0 0 0 1.746-72.426l-72.755 37.742 67.097-49.321A91.413 91.413 0 1 0 965.75 220.845a91.5 91.5 0 0 0-10.425 16.67l65.087 33.814-69.4-23.292a91.46 91.46 0 0 0 14.738 85.837 91.406 91.406 0 1 0 143.689 0 91.42 91.42 0 0 0 0-113.03"})),y||(y=V.createElement("path",{d:"M946.189 277.36a91 91 0 0 0 19.56 56.514 91.406 91.406 0 1 0 143.69 0c12.25-15.553-163.25-66.774-163.25-56.515",opacity:.1})),w||(w=V.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M330.12 342.936h111.474v45.12H330.12Z"})),C||(C=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M229.263 490.241a26.51 26.51 0 0 1-22.963-13.27 26.51 26.51 0 0 0 22.963 39.812h26.541V490.24Z"})),b||(b=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"m348.672 350.07 92.922-5.807v-13.27a26.54 26.54 0 0 0-26.541-26.542H295.616l-3.318-5.746a3.83 3.83 0 0 0-6.635 0l-3.318 5.746-3.317-5.746a3.83 3.83 0 0 0-6.636 0l-3.317 5.746-3.318-5.746a3.83 3.83 0 0 0-6.635 0l-3.318 5.746c-.03 0-.056.004-.086.004l-5.497-5.495a3.83 3.83 0 0 0-6.407 1.717l-1.817 6.773-6.89-1.847a3.83 3.83 0 0 0-4.691 4.693l1.844 6.891-6.77 1.814a3.832 3.832 0 0 0-1.72 6.41l5.497 5.497q-.002.041-.004.085l-5.747 3.317a3.83 3.83 0 0 0 0 6.636l5.747 3.317-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.317a3.83 3.83 0 0 0 0 6.636l5.747 3.317-5.747 3.318a3.83 3.83 0 0 0 0 6.636l5.747 3.317-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.317a3.83 3.83 0 0 0 0 6.636l5.747 3.317-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318-5.747 3.317a3.83 3.83 0 0 0 0 6.636l5.747 3.317-5.747 3.318a3.83 3.83 0 0 0 0 6.635l5.747 3.318a26.54 26.54 0 0 0 26.541 26.542h159.249a26.54 26.54 0 0 0 26.541-26.542V384.075l-92.922-5.807a14.126 14.126 0 0 1 0-28.197"})),A||(A=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M388.511 516.783h39.812V463.7h-39.812Z"})),k||(k=V.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M454.865 483.606a7 7 0 0 0-.848.085q-.073-.3-.154-.599a6.627 6.627 0 1 0-6.557-11.382q-.22-.225-.445-.446a6.624 6.624 0 1 0-11.397-6.564c-.196-.055-.394-.102-.59-.152a6.64 6.64 0 1 0-13.101 0c-.197.05-.394.097-.59.152a6.628 6.628 0 1 0-11.398 6.564 26.528 26.528 0 1 0 44.232 25.528 6.621 6.621 0 1 0 .848-13.186"})),O||(O=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M401.782 437.158h39.812v-26.541h-39.812Z"})),T||(T=V.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M454.865 427.205a3.318 3.318 0 0 0 0-6.635 3 3 0 0 0-.424.042c-.026-.1-.049-.199-.077-.298a3.319 3.319 0 0 0-1.278-6.38 3.28 3.28 0 0 0-2 .688q-.11-.113-.224-.223a3.3 3.3 0 0 0 .672-1.983 3.318 3.318 0 0 0-6.37-1.299 13.27 13.27 0 1 0 0 25.541 3.318 3.318 0 0 0 6.37-1.3 3.3 3.3 0 0 0-.672-1.982q.114-.11.223-.223a3.28 3.28 0 0 0 2.001.688 3.318 3.318 0 0 0 1.278-6.38c.028-.098.05-.199.077-.298a3 3 0 0 0 .424.042"})),G||(G=V.createElement("path",{fillRule:"evenodd",d:"M282.345 347.581a3.32 3.32 0 0 1-3.317-3.318 9.953 9.953 0 1 0-19.906 0 3.318 3.318 0 1 1-6.636 0 16.588 16.588 0 1 1 33.177 0 3.32 3.32 0 0 1-3.318 3.318"})),N||(N=V.createElement("path",{fill:"#ffff50",fillRule:"evenodd",d:"M335.428 516.783h79.625a26.54 26.54 0 0 0 26.541-26.542v-92.895H361.97a26.54 26.54 0 0 0-26.542 26.542Z"})),P||(P=V.createElement("path",{fillRule:"evenodd",d:"M421.714 438.485h-66.406a1.327 1.327 0 0 1 0-2.654h66.406a1.327 1.327 0 0 1 0 2.654m0 26.542h-66.406a1.327 1.327 0 1 1 0-2.654h66.406a1.327 1.327 0 0 1 0 2.654m0 26.541h-66.406a1.327 1.327 0 1 1 0-2.654h66.406a1.327 1.327 0 0 1 0 2.654m0-66.106h-66.406a1.327 1.327 0 0 1 0-2.655h66.406a1.327 1.327 0 0 1 0 2.655m0 26.294h-66.406a1.327 1.327 0 0 1 0-2.654h66.406a1.327 1.327 0 0 1 0 2.654m0 26.542h-66.406a1.327 1.327 0 0 1 0-2.655h66.406a1.327 1.327 0 0 1 0 2.655m19.88-122.607c-.016 0-.03-.008-.045-.007-4.1.14-6.04 4.241-7.753 7.86-1.786 3.783-3.168 6.242-5.432 6.167-2.506-.09-3.94-2.922-5.458-5.918-1.744-3.443-3.734-7.347-7.913-7.201-4.042.138-5.99 3.708-7.706 6.857-1.828 3.355-3.071 5.394-5.47 5.3-2.557-.093-3.916-2.395-5.488-5.06-1.753-2.967-3.78-6.304-7.878-6.19-3.973.137-5.925 3.166-7.648 5.84-1.822 2.826-3.098 4.549-5.527 4.447-2.618-.093-3.97-2.004-5.535-4.216-1.757-2.486-3.737-5.3-7.823-5.163-3.886.133-5.838 2.615-7.56 4.802-1.634 2.075-2.91 3.718-5.611 3.615a1.328 1.328 0 1 0-.096 2.654c4.004.134 6.032-2.389 7.793-4.628 1.562-1.985 2.91-3.698 5.564-3.789 2.556-.108 3.754 1.48 5.567 4.041 1.721 2.434 3.675 5.195 7.606 5.337 4.118.138 6.099-2.94 7.853-5.663 1.569-2.434 2.923-4.535 5.508-4.624 2.38-.088 3.674 1.792 5.5 4.885 1.722 2.916 3.671 6.22 7.68 6.365 4.147.143 6.15-3.477 7.895-6.682 1.511-2.77 2.938-5.388 5.466-5.475 2.38-.056 3.62 2.116 5.456 5.746 1.714 3.388 3.658 7.226 7.73 7.373l.224.004c4.066 0 5.996-4.08 7.704-7.689 1.511-3.198 2.942-6.21 5.397-6.334Z"})),I||(I=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M308.887 516.783h53.083V463.7h-53.083Z"})),L||(L=V.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M388.511 483.606a7 7 0 0 0-.848.085c-.05-.2-.098-.4-.154-.599a6.627 6.627 0 1 0-6.557-11.382q-.22-.225-.444-.446a6.624 6.624 0 1 0-11.397-6.564c-.197-.055-.394-.102-.59-.152a6.64 6.64 0 1 0-13.102 0c-.196.05-.394.097-.59.152a6.628 6.628 0 1 0-11.397 6.564 26.528 26.528 0 1 0 44.231 25.528 6.621 6.621 0 1 0 .848-13.186"})),S||(S=V.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M308.887 437.158h53.083v-26.541h-53.083Z"})),M||(M=V.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M375.24 427.205a3.318 3.318 0 1 0 0-6.635 3 3 0 0 0-.423.042q-.038-.15-.077-.298a3.319 3.319 0 0 0-1.278-6.38 3.28 3.28 0 0 0-2.001.688q-.11-.113-.223-.223a3.3 3.3 0 0 0 .671-1.983 3.318 3.318 0 0 0-6.37-1.299 13.27 13.27 0 1 0 0 25.541 3.318 3.318 0 0 0 6.37-1.3 3.3 3.3 0 0 0-.671-1.982q.113-.11.223-.223a3.28 3.28 0 0 0 2.001.688 3.318 3.318 0 0 0 1.278-6.38c.028-.098.05-.199.077-.298a3 3 0 0 0 .423.042"})),$||($=V.createElement("path",{fillRule:"evenodd",d:"M388.511 329.334a3.6 3.6 0 0 1-.65-.067 3.3 3.3 0 0 1-.624-.185 3.5 3.5 0 0 1-.572-.306 5 5 0 0 1-.504-.411 4 4 0 0 1-.41-.504 3.28 3.28 0 0 1-.558-1.845 3.6 3.6 0 0 1 .067-.65 4 4 0 0 1 .184-.624 3.5 3.5 0 0 1 .307-.57 3.2 3.2 0 0 1 .914-.916 3.5 3.5 0 0 1 .572-.305 3.3 3.3 0 0 1 .624-.186 3.1 3.1 0 0 1 1.3 0 3.2 3.2 0 0 1 1.195.49 5 5 0 0 1 .504.412 5 5 0 0 1 .411.504 3.4 3.4 0 0 1 .306.571 3.5 3.5 0 0 1 .252 1.274 3.36 3.36 0 0 1-.969 2.349 5 5 0 0 1-.504.411 3.3 3.3 0 0 1-1.845.558m26.542-1.66a3.4 3.4 0 0 1-2.35-.968 5 5 0 0 1-.41-.504 3.28 3.28 0 0 1-.558-1.845 3.39 3.39 0 0 1 .967-2.349 5 5 0 0 1 .505-.411 3.5 3.5 0 0 1 .572-.305 3.3 3.3 0 0 1 .623-.186 3.1 3.1 0 0 1 1.3 0 3.2 3.2 0 0 1 1.195.49 5 5 0 0 1 .504.412 3.4 3.4 0 0 1 .97 2.35 4 4 0 0 1-.067.65 3.4 3.4 0 0 1-.186.623 5 5 0 0 1-.305.57 5 5 0 0 1-.412.505 5 5 0 0 1-.504.412 3.3 3.3 0 0 1-1.844.557"})))},4540:(e,r,n)=>{n.d(r,{A:()=>c});var t=n(4164),a=n(1107);const i={features:"features_t9lD",featureSvg:"featureSvg_GfXr"};var o=n(4848);const l=[{title:"Easy to Use",Svg:n(8376).A,description:(0,o.jsx)(o.Fragment,{children:"Docusaurus was designed from the ground up to be easily installed and used to get your website up and running quickly."})},{title:"Focus on What Matters",Svg:n(3905).A,description:(0,o.jsxs)(o.Fragment,{children:["Docusaurus lets you focus on your docs, and we'll do the chores. Go ahead and move your docs into the ",(0,o.jsx)("code",{children:"docs"})," directory."]})},{title:"Powered by React",Svg:n(8606).A,description:(0,o.jsx)(o.Fragment,{children:"Extend or customize your website layout by reusing React. Docusaurus can be extended while reusing the same header and footer."})}];function s({title:e,Svg:r,description:n}){return(0,o.jsxs)("div",{className:(0,t.A)("col col--4"),children:[(0,o.jsx)("div",{className:"text--center",children:(0,o.jsx)(r,{className:i.featureSvg,role:"img"})}),(0,o.jsxs)("div",{className:"text--center padding-horiz--md",children:[(0,o.jsx)(a.A,{as:"h3",children:e}),(0,o.jsx)("p",{children:n})]})]})}function c(){return(0,o.jsx)("section",{className:i.features,children:(0,o.jsx)("div",{className:"container",children:(0,o.jsx)("div",{className:"row",children:l.map((e,r)=>(0,o.jsx)(s,{...e},r))})})})}},5263:(e,r,n)=>{n.d(r,{GL:()=>h,hK:()=>m,xt:()=>d,a5:()=>c,Ay:()=>s});n(6540);var t=n(4164),a=n(8589);const i={releaseBadge:"releaseBadge_Id0R",default:"default__v4Q",outline:"outline_Zskd",minimal:"minimal_mrID",small:"small_VbES",icon:"icon_Fvah",medium:"medium_VxeN",large:"large_b9I_",content:"content_vUIE",label:"label_P4Dt",version:"version_wXDD",withIcon:"withIcon_JRTn",pulse:"pulse_gZVh"};var o=n(4848);const l={oran:{label:"O-RAN",color:"primary",icon:"\ud83d\udce1",defaultVersion:a.GZ.ORAN},nephio:{label:"Nephio",color:"success",icon:"\u2638\ufe0f",defaultVersion:a.GZ.NEPHIO},go:{label:"Go",color:"info",icon:"\ud83d\udc39",defaultVersion:a.GZ.GO},kpt:{label:"kpt",color:"warning",icon:"\ud83d\udce6",defaultVersion:a.GZ.KPT},kubernetes:{label:"Kubernetes",color:"secondary",icon:"\u2638\ufe0f",defaultVersion:a.GZ.KUBERNETES}};function s({type:e,version:r,variant:n="default",size:a="medium",showIcon:s=!0,className:c}){const d=l[e],h=r||d.defaultVersion,m=(0,t.A)("badge",`badge--${d.color}`,i.releaseBadge,i[n],i[a],{[i.withIcon]:s},c);return(0,o.jsxs)("span",{className:m,title:`${d.label} ${h}`,children:[s&&(0,o.jsx)("span",{className:i.icon,role:"img","aria-label":d.label,children:d.icon}),(0,o.jsxs)("span",{className:i.content,children:[(0,o.jsx)("span",{className:i.label,children:d.label}),(0,o.jsx)("span",{className:i.version,children:h})]})]})}function c(e){return(0,o.jsx)(s,{type:"oran",...e})}function d(e){return(0,o.jsx)(s,{type:"nephio",...e})}function h(e){return(0,o.jsx)(s,{type:"go",...e})}function m(e){return(0,o.jsx)(s,{type:"kpt",...e})}},7263:(e,r,n)=>{n.d(r,{A:()=>s});n(6540);var t=n(4164),a=n(8589),i=n(5263);const o={supportStatement:"supportStatement_S2kY",header:"header_l9lJ",title:"title_AeZn",lastUpdated:"lastUpdated_MoFp",description:"description_KXpn",versionList:"versionList_cqg2",versionItem:"versionItem_syod",versionDescription:"versionDescription_jPtX",additionalInfo:"additionalInfo_WK88",note:"note_vUZr",policy:"policy_cPDb",compact:"compact_qOpz",badgesOnly:"badgesOnly_ST1i",badges:"badges_Fidq"};var l=n(4848);function s({variant:e="full",showLastUpdated:r=!0,className:n}){const s=(0,t.A)(o.supportStatement,o[e],n);return"badges-only"===e?(0,l.jsx)("div",{className:s,children:(0,l.jsxs)("div",{className:o.badges,children:[(0,l.jsx)(i.Ay,{type:"go",size:"small"}),(0,l.jsx)(i.Ay,{type:"oran",size:"small"}),(0,l.jsx)(i.Ay,{type:"nephio",size:"small"}),(0,l.jsx)(i.Ay,{type:"kpt",size:"small"})]})}):(0,l.jsxs)("div",{className:s,children:[(0,l.jsxs)("div",{className:o.header,children:[(0,l.jsx)("h4",{className:o.title,children:"compact"===e?"Supported Versions":"Version Support Statement"}),r&&(0,l.jsxs)("span",{className:o.lastUpdated,children:["Updated: ",a.TF]})]}),(0,l.jsxs)("div",{className:o.content,children:["full"===e&&(0,l.jsx)("p",{className:o.description,children:"This documentation and the associated Claude agents are tested and supported with the following canonical versions of O-RAN, Nephio, and related technologies."}),(0,l.jsxs)("div",{className:o.versionList,children:[(0,l.jsxs)("div",{className:o.versionItem,children:[(0,l.jsx)(i.Ay,{type:"go",variant:"outline",size:"medium"}),(0,l.jsx)("span",{className:o.versionDescription,children:"Required Go runtime version for agent execution"})]}),(0,l.jsxs)("div",{className:o.versionItem,children:[(0,l.jsx)(i.Ay,{type:"oran",variant:"outline",size:"medium"}),(0,l.jsx)("span",{className:o.versionDescription,children:"O-RAN Alliance L-Release specifications and implementations"})]}),(0,l.jsxs)("div",{className:o.versionItem,children:[(0,l.jsx)(i.Ay,{type:"nephio",variant:"outline",size:"medium"}),(0,l.jsx)("span",{className:o.versionDescription,children:"Nephio R5 package orchestration and GitOps workflows"})]}),(0,l.jsxs)("div",{className:o.versionItem,children:[(0,l.jsx)(i.Ay,{type:"kpt",variant:"outline",size:"medium"}),(0,l.jsx)("span",{className:o.versionDescription,children:"Configuration as Data package management with kpt"})]})]}),"full"===e&&(0,l.jsxs)("div",{className:o.additionalInfo,children:[(0,l.jsxs)("div",{className:o.note,children:[(0,l.jsx)("strong",{children:"Note:"})," While these are the canonical supported versions, many agents may work with adjacent versions. Please refer to individual agent documentation for specific compatibility requirements."]}),(0,l.jsxs)("div",{className:o.policy,children:[(0,l.jsx)("strong",{children:"Support Policy:"})," We follow Kubernetes' support policy of maintaining compatibility with the latest three minor releases."]})]})]})]})}},8376:(e,r,n)=>{n.d(r,{A:()=>o});var t,a=n(6540);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)({}).hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},i.apply(null,arguments)}const o=({title:e,titleId:r,...n})=>a.createElement("svg",i({xmlns:"http://www.w3.org/2000/svg",width:1088,height:687.962,viewBox:"0 0 1088 687.962","aria-labelledby":r},n),void 0===e?a.createElement("title",{id:r},"Easy to Use"):e?a.createElement("title",{id:r},e):null,t||(t=a.createElement("g",{"data-name":"Group 12"},a.createElement("g",{"data-name":"Group 11"},a.createElement("path",{fill:"#3f3d56",d:"M961.81 454.442c-5.27 45.15-16.22 81.4-31.25 110.31-20 38.52-54.21 54.04-84.77 70.28a193 193 0 0 1-27.46 11.94c-55.61 19.3-117.85 14.18-166.74 3.99a657 657 0 0 0-104.09-13.16q-14.97-.675-29.97-.67c-15.42.02-293.07 5.29-360.67-131.57-16.69-33.76-28.13-75-32.24-125.27-11.63-142.12 52.29-235.46 134.74-296.47 155.97-115.41 369.76-110.57 523.43 7.88 102.36 78.9 198.2 198.31 179.02 362.74","data-name":"Path 83"}),a.createElement("path",{fill:"#f2f2f2",d:"M930.56 564.752c-20 38.52-47.21 64.04-77.77 80.28a193 193 0 0 1-27.46 11.94c-55.61 19.3-117.85 14.18-166.74 3.99a657 657 0 0 0-104.09-13.16q-14.97-.675-29.97-.67-23.13.03-46.25 1.72c-100.17 7.36-253.82-6.43-321.42-143.29L326 177.962l62.95 161.619 20.09 51.59 55.37-75.98L493 275.962l130.2 149.27 36.8-81.27 254.78 207.919 14.21 11.59Z","data-name":"Path 84"}),a.createElement("path",{d:"m302 282.962 26-57 36 83-31-60Z","data-name":"Path 85",opacity:.1}),a.createElement("path",{d:"M554.5 647.802q-14.97-.675-29.97-.67l-115.49-255.96Z","data-name":"Path 86",opacity:.1}),a.createElement("path",{d:"M464.411 315.191 493 292.962l130 150-132-128Z","data-name":"Path 87",opacity:.1}),a.createElement("path",{d:"M852.79 645.032a193 193 0 0 1-27.46 11.94L623.2 425.232Z","data-name":"Path 88",opacity:.1}),a.createElement("circle",{cx:3,cy:3,r:3,fill:"#f2f2f2","data-name":"Ellipse 11",transform:"translate(479 98.962)"}),a.createElement("circle",{cx:3,cy:3,r:3,fill:"#f2f2f2","data-name":"Ellipse 12",transform:"translate(396 201.962)"}),a.createElement("circle",{cx:2,cy:2,r:2,fill:"#f2f2f2","data-name":"Ellipse 13",transform:"translate(600 220.962)"}),a.createElement("circle",{cx:2,cy:2,r:2,fill:"#f2f2f2","data-name":"Ellipse 14",transform:"translate(180 265.962)"}),a.createElement("circle",{cx:2,cy:2,r:2,fill:"#f2f2f2","data-name":"Ellipse 15",transform:"translate(612 96.962)"}),a.createElement("circle",{cx:2,cy:2,r:2,fill:"#f2f2f2","data-name":"Ellipse 16",transform:"translate(736 192.962)"}),a.createElement("circle",{cx:2,cy:2,r:2,fill:"#f2f2f2","data-name":"Ellipse 17",transform:"translate(858 344.962)"}),a.createElement("path",{fill:"#f2f2f2",d:"M306 121.222h-2.76v-2.76h-1.48v2.76H299v1.478h2.76v2.759h1.48V122.7H306Z","data-name":"Path 89"}),a.createElement("path",{fill:"#f2f2f2",d:"M848 424.222h-2.76v-2.76h-1.48v2.76H841v1.478h2.76v2.759h1.48V425.7H848Z","data-name":"Path 90"}),a.createElement("path",{fill:"#3f3d56",d:"M1088 613.962c0 16.569-243.557 74-544 74s-544-57.431-544-74 243.557 14 544 14 544-30.568 544-14","data-name":"Path 91"}),a.createElement("path",{d:"M1088 613.962c0 16.569-243.557 74-544 74s-544-57.431-544-74 243.557 14 544 14 544-30.568 544-14","data-name":"Path 92",opacity:.1}),a.createElement("ellipse",{cx:544,cy:30,fill:"#3f3d56","data-name":"Ellipse 18",rx:544,ry:30,transform:"translate(0 583.962)"}),a.createElement("path",{fill:"#ff6584",d:"M568 571.962c0 33.137-14.775 24-33 24s-33 9.137-33-24 33-96 33-96 33 62.863 33 96","data-name":"Path 93"}),a.createElement("path",{d:"M550 584.641c0 15.062-6.716 10.909-15 10.909s-15 4.153-15-10.909 15-43.636 15-43.636 15 28.576 15 43.636","data-name":"Path 94",opacity:.1}),a.createElement("rect",{width:92,height:18,fill:"#2f2e41","data-name":"Rectangle 97",rx:9,transform:"translate(489 604.962)"}),a.createElement("rect",{width:92,height:18,fill:"#2f2e41","data-name":"Rectangle 98",rx:9,transform:"translate(489 586.962)"}),a.createElement("path",{fill:"#3f3d56",d:"M137 490.528c0 55.343 34.719 100.126 77.626 100.126","data-name":"Path 95"}),a.createElement("path",{fill:"#6c63ff",d:"M214.626 590.654c0-55.965 38.745-101.251 86.626-101.251","data-name":"Path 96"}),a.createElement("path",{fill:"#6c63ff",d:"M165.125 495.545c0 52.57 22.14 95.109 49.5 95.109","data-name":"Path 97"}),a.createElement("path",{fill:"#3f3d56",d:"M214.626 590.654c0-71.511 44.783-129.377 100.126-129.377","data-name":"Path 98"}),a.createElement("path",{fill:"#a8a8a8",d:"M198.3 591.36s11.009-.339 14.326-2.7 16.934-5.183 17.757-1.395 16.544 18.844 4.115 18.945-28.879-1.936-32.19-3.953-4.008-10.897-4.008-10.897","data-name":"Path 99"}),a.createElement("path",{d:"M234.716 604.89c-12.429.1-28.879-1.936-32.19-3.953-2.522-1.536-3.527-7.048-3.863-9.591l-.368.014s.7 8.879 4.009 10.9 19.761 4.053 32.19 3.953c3.588-.029 4.827-1.305 4.759-3.2-.498 1.142-1.867 1.855-4.537 1.877","data-name":"Path 100",opacity:.2}),a.createElement("path",{fill:"#3f3d56",d:"M721.429 527.062c0 38.029 23.857 68.8 53.341 68.8","data-name":"Path 101"}),a.createElement("path",{fill:"#6c63ff",d:"M774.769 595.863c0-38.456 26.623-69.575 59.525-69.575","data-name":"Path 102"}),a.createElement("path",{fill:"#6c63ff",d:"M740.755 530.509c0 36.124 15.213 65.354 34.014 65.354","data-name":"Path 103"}),a.createElement("path",{fill:"#3f3d56",d:"M774.769 595.863c0-49.139 30.773-88.9 68.8-88.9","data-name":"Path 104"}),a.createElement("path",{fill:"#a8a8a8",d:"M763.548 596.348s7.565-.233 9.844-1.856 11.636-3.562 12.2-.958 11.368 12.949 2.828 13.018-19.844-1.33-22.119-2.716-2.753-7.488-2.753-7.488","data-name":"Path 105"}),a.createElement("path",{d:"M788.574 605.645c-8.54.069-19.844-1.33-22.119-2.716-1.733-1.056-2.423-4.843-2.654-6.59l-.253.01s.479 6.1 2.755 7.487 13.579 2.785 22.119 2.716c2.465-.02 3.317-.9 3.27-2.2-.343.788-1.283 1.278-3.118 1.293","data-name":"Path 106",opacity:.2}),a.createElement("path",{fill:"#a8a8a8",d:"M893.813 618.699s11.36-1.729 14.5-4.591 16.89-7.488 18.217-3.667 19.494 17.447 6.633 19.107-30.153 1.609-33.835-.065-5.515-10.784-5.515-10.784","data-name":"Path 107"}),a.createElement("path",{d:"M933.228 628.154c-12.86 1.659-30.153 1.609-33.835-.065-2.8-1.275-4.535-6.858-5.2-9.45l-.379.061s1.833 9.109 5.516 10.783 20.975 1.725 33.835.065c3.712-.479 4.836-1.956 4.529-3.906-.375 1.246-1.703 2.156-4.466 2.512","data-name":"Path 108",opacity:.2}),a.createElement("path",{fill:"#a8a8a8",d:"M614.26 617.881s9.587-1.459 12.237-3.875 14.255-6.32 15.374-3.095 16.452 14.725 5.6 16.125-25.448 1.358-28.555-.055-4.656-9.1-4.656-9.1","data-name":"Path 109"}),a.createElement("path",{d:"M647.524 625.856c-10.853 1.4-25.448 1.358-28.555-.055-2.367-1.076-3.827-5.788-4.39-7.976l-.32.051s1.547 7.687 4.655 9.1 17.7 1.456 28.555.055c3.133-.4 4.081-1.651 3.822-3.3-.314 1.057-1.435 1.825-3.767 2.125","data-name":"Path 110",opacity:.2}),a.createElement("path",{fill:"#a8a8a8",d:"M122.389 613.09s7.463-1.136 9.527-3.016 11.1-4.92 11.969-2.409 12.808 11.463 4.358 12.553-19.811 1.057-22.23-.043-3.624-7.085-3.624-7.085","data-name":"Path 111"}),a.createElement("path",{d:"M148.285 619.302c-8.449 1.09-19.811 1.057-22.23-.043-1.842-.838-2.979-4.506-3.417-6.209l-.249.04s1.2 5.984 3.624 7.085 13.781 1.133 22.23.043c2.439-.315 3.177-1.285 2.976-2.566-.246.818-1.119 1.416-2.934 1.65","data-name":"Path 112",opacity:.2}),a.createElement("path",{d:"M383.7 601.318c0 30.22-42.124 20.873-93.7 20.873s-93.074 9.347-93.074-20.873 42.118-36.793 93.694-36.793 93.08 6.573 93.08 36.793","data-name":"Path 113",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"M383.7 593.881c0 30.22-42.124 20.873-93.7 20.873s-93.074 9.347-93.074-20.873 42.114-36.8 93.69-36.8 93.084 6.576 93.084 36.8","data-name":"Path 114"})),a.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M360.175 475.732h91.791v37.153h-91.791Z","data-name":"Path 40"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M277.126 597.026a21.83 21.83 0 0 1-18.908-10.927 21.829 21.829 0 0 0 18.908 32.782h21.855v-21.855Z","data-name":"Path 41"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"m375.451 481.607 76.514-4.782v-10.928a21.854 21.854 0 0 0-21.855-21.855h-98.347l-2.732-4.735a3.154 3.154 0 0 0-5.464 0l-2.732 4.732-2.732-4.732a3.154 3.154 0 0 0-5.464 0l-2.732 4.732-2.731-4.732a3.154 3.154 0 0 0-5.464 0l-2.732 4.735h-.071l-4.526-4.525a3.153 3.153 0 0 0-5.276 1.414l-1.5 5.577-5.674-1.521a3.154 3.154 0 0 0-3.863 3.864l1.52 5.679-5.575 1.494a3.155 3.155 0 0 0-1.416 5.278l4.526 4.526v.07l-4.735 2.731a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.732a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.731a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.727a3.154 3.154 0 0 0 0 5.464l4.735 2.736-4.735 2.732a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.732a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.731a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.732a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.731a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.731a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.735a3.154 3.154 0 0 0 0 5.464l4.732 2.732-4.732 2.728a3.154 3.154 0 0 0 0 5.464l4.732 2.732a21.854 21.854 0 0 0 21.858 21.855h131.13a21.854 21.854 0 0 0 21.855-21.855v-87.42l-76.514-4.782a11.632 11.632 0 0 1 0-23.219","data-name":"Path 42"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M408.255 618.882h32.782v-43.71h-32.782Z","data-name":"Path 43"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M462.893 591.563a5 5 0 0 0-.7.07c-.042-.164-.081-.329-.127-.493a5.457 5.457 0 1 0-5.4-9.372q-.181-.185-.366-.367a5.454 5.454 0 1 0-9.384-5.4c-.162-.046-.325-.084-.486-.126a5.467 5.467 0 1 0-10.788 0c-.162.042-.325.08-.486.126a5.457 5.457 0 1 0-9.384 5.4 21.843 21.843 0 1 0 36.421 21.02 5.452 5.452 0 1 0 .7-10.858","data-name":"Path 44"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M419.183 553.317h32.782v-21.855h-32.782Z","data-name":"Path 45"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M462.893 545.121a2.732 2.732 0 1 0 0-5.464 3 3 0 0 0-.349.035c-.022-.082-.04-.164-.063-.246a2.733 2.733 0 0 0-1.052-5.253 2.7 2.7 0 0 0-1.648.566q-.09-.093-.184-.184a2.7 2.7 0 0 0 .553-1.633 2.732 2.732 0 0 0-5.245-1.07 10.928 10.928 0 1 0 0 21.031 2.732 2.732 0 0 0 5.245-1.07 2.7 2.7 0 0 0-.553-1.633q.093-.09.184-.184a2.7 2.7 0 0 0 1.648.566 2.732 2.732 0 0 0 1.052-5.253q.033-.122.063-.246a3 3 0 0 0 .349.035","data-name":"Path 46"}),a.createElement("path",{fillRule:"evenodd",d:"M320.836 479.556a2.73 2.73 0 0 1-2.732-2.732 8.2 8.2 0 0 0-16.391 0 2.732 2.732 0 0 1-5.464 0 13.66 13.66 0 0 1 27.319 0 2.73 2.73 0 0 1-2.732 2.732","data-name":"Path 47"}),a.createElement("path",{fill:"#ffff50",fillRule:"evenodd",d:"M364.546 618.881h65.565a21.854 21.854 0 0 0 21.855-21.855v-76.492h-65.565a21.854 21.854 0 0 0-21.855 21.855Z","data-name":"Path 48"}),a.createElement("path",{fillRule:"evenodd",d:"M435.596 554.41h-54.681a1.093 1.093 0 1 1 0-2.185h54.681a1.093 1.093 0 0 1 0 2.185m0 21.855h-54.681a1.093 1.093 0 1 1 0-2.186h54.681a1.093 1.093 0 0 1 0 2.186m0 21.855h-54.681a1.093 1.093 0 1 1 0-2.185h54.681a1.093 1.093 0 0 1 0 2.185m0-54.434h-54.681a1.093 1.093 0 1 1 0-2.185h54.681a1.093 1.093 0 0 1 0 2.185m0 21.652h-54.681a1.093 1.093 0 1 1 0-2.186h54.681a1.093 1.093 0 0 1 0 2.186m0 21.855h-54.681a1.093 1.093 0 1 1 0-2.186h54.681a1.093 1.093 0 0 1 0 2.186m16.369-100.959c-.013 0-.024-.007-.037-.005-3.377.115-4.974 3.492-6.384 6.472-1.471 3.114-2.608 5.139-4.473 5.078-2.064-.074-3.244-2.406-4.494-4.874-1.436-2.835-3.075-6.049-6.516-5.929-3.329.114-4.932 3.053-6.346 5.646-1.5 2.762-2.529 4.442-4.5 4.364-2.106-.076-3.225-1.972-4.52-4.167-1.444-2.443-3.112-5.191-6.487-5.1-3.272.113-4.879 2.606-6.3 4.808-1.5 2.328-2.552 3.746-4.551 3.662-2.156-.076-3.27-1.65-4.558-3.472-1.447-2.047-3.077-4.363-6.442-4.251-3.2.109-4.807 2.153-6.224 3.954-1.346 1.709-2.4 3.062-4.621 2.977a1.094 1.094 0 0 0-.079 2.186c3.3.11 4.967-1.967 6.417-3.81 1.286-1.635 2.4-3.045 4.582-3.12 2.1-.09 3.091 1.218 4.584 3.327 1.417 2 3.026 4.277 6.263 4.394 3.391.114 5.022-2.42 6.467-4.663 1.292-2 2.406-3.734 4.535-3.807 1.959-.073 3.026 1.475 4.529 4.022 1.417 2.4 3.023 5.121 6.324 5.241 3.415.118 5.064-2.863 6.5-5.5 1.245-2.282 2.419-4.437 4.5-4.509 1.959-.046 2.981 1.743 4.492 4.732 1.412 2.79 3.013 5.95 6.365 6.071h.185c3.348 0 4.937-3.36 6.343-6.331 1.245-2.634 2.423-5.114 4.444-5.216Z","data-name":"Path 49"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M342.691 618.882h43.71v-43.71h-43.71Z","data-name":"Path 50"}),a.createElement("g",{"data-name":"Group 8",transform:"rotate(-14.98 2188.845 -1120.376)"},a.createElement("rect",{width:92.361,height:36.462,fill:"#d8d8d8","data-name":"Rectangle 3",rx:2}),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 2",transform:"translate(1.531 23.03)"},a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 4",rx:1,transform:"translate(16.797)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 5",rx:1,transform:"translate(23.12)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 6",rx:1,transform:"translate(29.444)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 7",rx:1,transform:"translate(35.768)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 8",rx:1,transform:"translate(42.091)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 9",rx:1,transform:"translate(48.415)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 10",rx:1,transform:"translate(54.739)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 11",rx:1,transform:"translate(61.063)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 12",rx:1,transform:"translate(67.386)"}),a.createElement("path",{fillRule:"evenodd",d:"M1.093 0h13.425a1.093 1.093 0 0 1 1.093 1.093v3.15a1.093 1.093 0 0 1-1.093 1.093H1.093A1.093 1.093 0 0 1 0 4.243v-3.15A1.093 1.093 0 0 1 1.093 0M75 0h13.426a1.093 1.093 0 0 1 1.093 1.093v3.15a1.093 1.093 0 0 1-1.093 1.093H75a1.093 1.093 0 0 1-1.093-1.093v-3.15A1.093 1.093 0 0 1 75 0","data-name":"Path 51"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 3",transform:"translate(1.531 10.261)"},a.createElement("path",{fillRule:"evenodd",d:"M1.093 0h5.125A1.093 1.093 0 0 1 7.31 1.093v3.149a1.093 1.093 0 0 1-1.092 1.093H1.093A1.093 1.093 0 0 1 0 4.242V1.093A1.093 1.093 0 0 1 1.093 0","data-name":"Path 52"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 13",rx:1,transform:"translate(8.299)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 14",rx:1,transform:"translate(14.623)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 15",rx:1,transform:"translate(20.947)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 16",rx:1,transform:"translate(27.271)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 17",rx:1,transform:"translate(33.594)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 18",rx:1,transform:"translate(39.918)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 19",rx:1,transform:"translate(46.242)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 20",rx:1,transform:"translate(52.565)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 21",rx:1,transform:"translate(58.888)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 22",rx:1,transform:"translate(65.212)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 23",rx:1,transform:"translate(71.536)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 24",rx:1,transform:"translate(77.859)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 25",rx:1,transform:"translate(84.183)"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 4",transform:"rotate(180 45.525 4.773)"},a.createElement("path",{fillRule:"evenodd",d:"M1.093 0h5.126a1.093 1.093 0 0 1 1.093 1.093v3.15a1.093 1.093 0 0 1-1.093 1.093H1.093A1.093 1.093 0 0 1 0 4.243v-3.15A1.093 1.093 0 0 1 1.093 0","data-name":"Path 53"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 26",rx:1,transform:"translate(8.299)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 27",rx:1,transform:"translate(14.623)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 28",rx:1,transform:"translate(20.947)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 29",rx:1,transform:"translate(27.271)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 30",rx:1,transform:"translate(33.594)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 31",rx:1,transform:"translate(39.918)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 32",rx:1,transform:"translate(46.242)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 33",rx:1,transform:"translate(52.565)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 34",rx:1,transform:"translate(58.889)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 35",rx:1,transform:"translate(65.213)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 36",rx:1,transform:"translate(71.537)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 37",rx:1,transform:"translate(77.86)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 38",rx:1,transform:"translate(84.183)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 39",rx:1,transform:"translate(8.299)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 40",rx:1,transform:"translate(14.623)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 41",rx:1,transform:"translate(20.947)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 42",rx:1,transform:"translate(27.271)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 43",rx:1,transform:"translate(33.594)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 44",rx:1,transform:"translate(39.918)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 45",rx:1,transform:"translate(46.242)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 46",rx:1,transform:"translate(52.565)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 47",rx:1,transform:"translate(58.889)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 48",rx:1,transform:"translate(65.213)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 49",rx:1,transform:"translate(71.537)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 50",rx:1,transform:"translate(77.86)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 51",rx:1,transform:"translate(84.183)"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 6"},a.createElement("path",{fillRule:"evenodd",d:"M2.624 16.584h7.3a1.093 1.093 0 0 1 1.092 1.093v3.15a1.093 1.093 0 0 1-1.093 1.093h-7.3a1.093 1.093 0 0 1-1.092-1.093v-3.149a1.093 1.093 0 0 1 1.093-1.094","data-name":"Path 54"}),a.createElement("g",{"data-name":"Group 5",transform:"translate(12.202 16.584)"},a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 52",rx:1}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 53",rx:1,transform:"translate(6.324)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 54",rx:1,transform:"translate(12.647)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 55",rx:1,transform:"translate(18.971)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 56",rx:1,transform:"translate(25.295)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 57",rx:1,transform:"translate(31.619)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 58",rx:1,transform:"translate(37.942)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 59",rx:1,transform:"translate(44.265)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 60",rx:1,transform:"translate(50.589)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 61",rx:1,transform:"translate(56.912)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 62",rx:1,transform:"translate(63.236)"})),a.createElement("path",{fillRule:"evenodd",d:"M83.053 16.584h6.906a1.093 1.093 0 0 1 1.091 1.093v3.15a1.093 1.093 0 0 1-1.091 1.093h-6.907a1.093 1.093 0 0 1-1.093-1.093v-3.149a1.093 1.093 0 0 1 1.093-1.094Z","data-name":"Path 55"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 7",transform:"translate(1.531 29.627)"},a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 63",rx:1}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 64",rx:1,transform:"translate(6.324)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 65",rx:1,transform:"translate(12.647)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 66",rx:1,transform:"translate(18.971)"}),a.createElement("path",{fillRule:"evenodd",d:"M26.387 0h30.422a1.093 1.093 0 0 1 1.093 1.093v3.151a1.093 1.093 0 0 1-1.093 1.093H26.387a1.093 1.093 0 0 1-1.093-1.093V1.093A1.093 1.093 0 0 1 26.387 0m33.594 0h3.942a1.093 1.093 0 0 1 1.093 1.093v3.151a1.093 1.093 0 0 1-1.093 1.093h-3.942a1.093 1.093 0 0 1-1.093-1.093V1.093A1.093 1.093 0 0 1 59.981 0","data-name":"Path 56"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 67",rx:1,transform:"translate(66.003)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 68",rx:1,transform:"translate(72.327)"}),a.createElement("rect",{width:5.336,height:5.336,"data-name":"Rectangle 69",rx:1,transform:"translate(84.183)"}),a.createElement("path",{d:"M78.254 2.273v-1.18A1.093 1.093 0 0 1 79.347 0h3.15a1.093 1.093 0 0 1 1.093 1.093v1.18Z","data-name":"Path 57"}),a.createElement("path",{d:"M83.591 3.063v1.18a1.093 1.093 0 0 1-1.093 1.093h-3.15a1.093 1.093 0 0 1-1.093-1.093v-1.18Z","data-name":"Path 58"})),a.createElement("rect",{width:88.927,height:2.371,fill:"#4a4a4a","data-name":"Rectangle 70",rx:1.085,transform:"translate(1.925 1.17)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 71",opacity:.136,rx:.723,transform:"translate(4.1 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 72",opacity:.136,rx:.723,transform:"translate(10.923 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 73",opacity:.136,rx:.723,transform:"translate(16.173 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 74",opacity:.136,rx:.723,transform:"translate(21.421 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 75",opacity:.136,rx:.723,transform:"translate(26.671 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 76",opacity:.136,rx:.723,transform:"translate(33.232 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 77",opacity:.136,rx:.723,transform:"translate(38.48 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 78",opacity:.136,rx:.723,transform:"translate(43.73 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 79",opacity:.136,rx:.723,transform:"translate(48.978 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 80",opacity:.136,rx:.723,transform:"translate(55.54 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 81",opacity:.136,rx:.723,transform:"translate(60.788 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 82",opacity:.136,rx:.723,transform:"translate(66.038 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 83",opacity:.136,rx:.723,transform:"translate(72.599 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 84",opacity:.136,rx:.723,transform:"translate(77.847 1.566)"}),a.createElement("rect",{width:4.986,height:1.581,fill:"#d8d8d8","data-name":"Rectangle 85",opacity:.136,rx:.723,transform:"translate(83.097 1.566)"})),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M408.256 591.563a5.4 5.4 0 0 0-.7.07c-.042-.164-.081-.329-.127-.493a5.457 5.457 0 1 0-5.4-9.372q-.181-.185-.366-.367a5.454 5.454 0 1 0-9.384-5.4c-.162-.046-.325-.084-.486-.126a5.467 5.467 0 1 0-10.788 0c-.162.042-.325.08-.486.126a5.457 5.457 0 1 0-9.384 5.4 21.843 21.843 0 1 0 36.421 21.02 5.452 5.452 0 1 0 .7-10.858","data-name":"Path 59"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M342.691 553.317h43.71v-21.855h-43.71Z","data-name":"Path 60"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M397.328 545.121a2.732 2.732 0 1 0 0-5.464 3 3 0 0 0-.349.035c-.022-.082-.04-.164-.063-.246a2.733 2.733 0 0 0-1.052-5.253 2.7 2.7 0 0 0-1.648.566q-.09-.093-.184-.184a2.7 2.7 0 0 0 .553-1.633 2.732 2.732 0 0 0-5.245-1.07 10.928 10.928 0 1 0 0 21.031 2.732 2.732 0 0 0 5.245-1.07 2.7 2.7 0 0 0-.553-1.633q.093-.09.184-.184a2.7 2.7 0 0 0 1.648.566 2.732 2.732 0 0 0 1.052-5.253q.033-.122.063-.246a3 3 0 0 0 .349.035","data-name":"Path 61"}),a.createElement("path",{fillRule:"evenodd",d:"M408.256 464.531a3 3 0 0 1-.535-.055 2.8 2.8 0 0 1-.514-.153 3 3 0 0 1-.471-.251 4 4 0 0 1-.415-.339 3 3 0 0 1-.338-.415 2.7 2.7 0 0 1-.459-1.517 3 3 0 0 1 .055-.535 3 3 0 0 1 .152-.514 3 3 0 0 1 .252-.47 2.6 2.6 0 0 1 .753-.754 3 3 0 0 1 .471-.251 2.8 2.8 0 0 1 .514-.153 2.5 2.5 0 0 1 1.071 0 2.7 2.7 0 0 1 .983.4 4 4 0 0 1 .415.339 4 4 0 0 1 .339.415 3 3 0 0 1 .251.47 2.9 2.9 0 0 1 .208 1.049 2.77 2.77 0 0 1-.8 1.934 4 4 0 0 1-.415.339 2.72 2.72 0 0 1-1.519.459m21.855-1.366a2.8 2.8 0 0 1-1.935-.8 4 4 0 0 1-.338-.415 2.7 2.7 0 0 1-.459-1.519 2.8 2.8 0 0 1 .8-1.934 4 4 0 0 1 .415-.339 3 3 0 0 1 .471-.251 2.8 2.8 0 0 1 .514-.153 2.5 2.5 0 0 1 1.071 0 2.7 2.7 0 0 1 .983.4 4 4 0 0 1 .415.339 2.8 2.8 0 0 1 .8 1.934 3 3 0 0 1-.055.535 3 3 0 0 1-.153.514 4 4 0 0 1-.251.47 4 4 0 0 1-.339.415 4 4 0 0 1-.415.339 2.72 2.72 0 0 1-1.519.459","data-name":"Path 62"}))))},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(6540);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}},8589:(e,r,n)=>{n.d(r,{GZ:()=>a,TF:()=>t});const t="2025-08-20",a={GO:"Go 1.24.6",ORAN:"O-RAN L (2025-06-30)",NEPHIO:"Nephio R5 (v5.x)",KPT:"kpt v1.0.0-beta.55",KUBERNETES:"Kubernetes 1.30.0+"}},8606:(e,r,n)=>{n.d(r,{A:()=>o});var t,a=n(6540);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)({}).hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e},i.apply(null,arguments)}const o=({title:e,titleId:r,...n})=>a.createElement("svg",i({xmlns:"http://www.w3.org/2000/svg",width:1041.277,height:554.141,viewBox:"0 0 1041.277 554.141","aria-labelledby":r},n),void 0===e?a.createElement("title",{id:r},"Powered by React"):e?a.createElement("title",{id:r},e):null,t||(t=a.createElement("g",{"data-name":"Group 24"},a.createElement("g",{"data-name":"Group 23",transform:"translate(-.011 -.035)"},a.createElement("path",{fill:"#f2f2f2",d:"M961.48 438.21q-1.74 3.75-3.47 7.4-2.7 5.67-5.33 11.12c-.78 1.61-1.56 3.19-2.32 4.77-8.6 17.57-16.63 33.11-23.45 45.89a73.21 73.21 0 0 1-63.81 38.7l-151.65 1.65h-1.6l-13 .14-11.12.12-34.1.37h-1.38l-17.36.19h-.53l-107 1.16-95.51 1-11.11.12-69 .75h-.08l-44.75.48h-.48l-141.5 1.53-42.33.46a88 88 0 0 1-10.79-.54c-1.22-.14-2.44-.3-3.65-.49a87.38 87.38 0 0 1-51.29-27.54c-18.21-20.03-31.46-43.4-40.36-68.76q-1.93-5.49-3.6-11.12c-30.81-104.15 6.75-238.52 74.35-328.44q4.25-5.64 8.64-11l.07-.08c20.79-25.52 44.1-46.84 68.93-62 44-26.91 92.75-34.49 140.7-11.9 40.57 19.12 78.45 28.11 115.17 30.55 3.71.24 7.42.42 11.11.53 84.23 2.65 163.17-27.7 255.87-47.29 3.69-.78 7.39-1.55 11.12-2.28C763 .54 836.36-6.4 923.6 8.19a189 189 0 0 1 26.76 6.4q5.77 1.86 11.12 4c41.64 16.94 64.35 48.24 74 87.46q1.37 5.46 2.37 11.11c17.11 94.34-33 228.16-76.37 321.05","data-name":"Path 299"}),a.createElement("path",{d:"M497.02 445.61a95 95 0 0 1-1.87 11.12h93.7v-11.12Zm-78.25 62.81 11.11-.09v-27.47c-3.81-.17-7.52-.34-11.11-.52Zm-232.92-62.81v11.12h198.5v-11.12Zm849.68-339.52h-74V18.6q-5.35-2.17-11.12-4v91.49H696.87V13.67c-3.73.73-7.43 1.5-11.12 2.28v90.14H429.88V63.24c-3.69-.11-7.4-.29-11.11-.53v43.38H162.9v-62c-24.83 15.16-48.14 36.48-68.93 62h-.07v.08q-4.4 5.4-8.64 11h8.64v328.44h-83q1.66 5.63 3.6 11.12h79.39v93.62a87 87 0 0 0 12.2 2.79c1.21.19 2.43.35 3.65.49a88 88 0 0 0 10.79.54l42.33-.46v-97h255.91v94.21l11.11-.12v-94.07h255.87v91.36l11.12-.12v-91.24h253.49v4.77c.76-1.58 1.54-3.16 2.32-4.77q2.63-5.45 5.33-11.12 1.73-3.64 3.47-7.4v-321h76.42q-1.01-5.69-2.37-11.12M162.9 445.61V117.17h255.87v328.44Zm267 0V117.17h255.85v328.44Zm520.48 0H696.87V117.17h253.49Z","data-name":"Path 300",opacity:.1}),a.createElement("path",{fill:"#65617d",d:"M863.09 533.65v13l-151.92 1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99-175.61 1.63h-.15l-44.65.42-.48.01-198.4 1.82v-15l46.65-28 93.6-.78 2-.01.66-.01 2-.03 44.94-.37 2.01-.01.64-.01 2-.01 14.41-.12.38-.01 35.55-.3h.29l277.4-2.34 6.79-.05h.68l5.18-.05 37.65-.31 2-.03 1.85-.02h.96l11.71-.09 2.32-.03 3.11-.02 9.75-.09 15.47-.13 2-.02 3.48-.02h.65l74.71-.64Z","data-name":"Path 301"}),a.createElement("path",{d:"M863.09 533.65v13l-151.92 1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99-175.61 1.63h-.15l-44.65.42-.48.01-198.4 1.82v-15l46.65-28 93.6-.78 2-.01.66-.01 2-.03 44.94-.37 2.01-.01.64-.01 2-.01 14.41-.12.38-.01 35.55-.3h.29l277.4-2.34 6.79-.05h.68l5.18-.05 37.65-.31 2-.03 1.85-.02h.96l11.71-.09 2.32-.03 3.11-.02 9.75-.09 15.47-.13 2-.02 3.48-.02h.65l74.71-.64Z","data-name":"Path 302",opacity:.2}),a.createElement("path",{fill:"#3f3d56",d:"M296.1 483.66v24.49a6.13 6.13 0 0 1-3.5 5.54 6 6 0 0 1-2.5.6l-34.9.74a6 6 0 0 1-2.7-.57 6.12 6.12 0 0 1-3.57-5.57v-25.23Z","data-name":"Path 303"}),a.createElement("path",{d:"M296.1 483.66v24.49a6.13 6.13 0 0 1-3.5 5.54 6 6 0 0 1-2.5.6l-34.9.74a6 6 0 0 1-2.7-.57 6.12 6.12 0 0 1-3.57-5.57v-25.23Z","data-name":"Path 304",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"M298.1 483.66v24.49a6.13 6.13 0 0 1-3.5 5.54 6 6 0 0 1-2.5.6l-34.9.74a6 6 0 0 1-2.7-.57 6.12 6.12 0 0 1-3.57-5.57v-25.23Z","data-name":"Path 305"}),a.createElement("path",{fill:"#3f3d56",d:"M680.92 483.65h47.17v31.5h-47.17z","data-name":"Rectangle 137"}),a.createElement("path",{d:"M680.92 483.65h47.17v31.5h-47.17z","data-name":"Rectangle 138",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"M678.92 483.65h47.17v31.5h-47.17z","data-name":"Rectangle 139"}),a.createElement("path",{d:"M298.09 483.65v4.97l-47.17 1.26v-6.23Z","data-name":"Path 306",opacity:.1}),a.createElement("path",{fill:"#65617d",d:"M381.35 312.36v168.2a4 4 0 0 1-3.85 3.95l-191.65 5.1h-.05a4 4 0 0 1-3.95-3.95v-173.3a4 4 0 0 1 3.95-3.95h191.6a4 4 0 0 1 3.95 3.95","data-name":"Path 307"}),a.createElement("path",{d:"M185.85 308.41v181.2h-.05a4 4 0 0 1-3.95-3.95v-173.3a4 4 0 0 1 3.95-3.95Z","data-name":"Path 308",opacity:.1}),a.createElement("path",{fill:"#39374d",d:"M194.59 319.15h177.5V467.4l-177.5 4Z","data-name":"Path 309"}),a.createElement("path",{d:"M726.09 483.65v6.41l-47.17-1.26v-5.15Z","data-name":"Path 310",opacity:.1}),a.createElement("path",{fill:"#65617d",d:"M788.35 312.36v173.3a4 4 0 0 1-4 3.95l-191.69-5.1a4 4 0 0 1-3.85-3.95v-168.2a4 4 0 0 1 3.95-3.95h191.6a4 4 0 0 1 3.99 3.95","data-name":"Path 311"}),a.createElement("path",{d:"M788.35 312.36v173.3a4 4 0 0 1-4 3.95v-181.2a4 4 0 0 1 4 3.95","data-name":"Path 312",opacity:.1}),a.createElement("path",{fill:"#39374d",d:"M775.59 319.15h-177.5V467.4l177.5 4Z","data-name":"Path 313"}),a.createElement("path",{fill:"#65617d",d:"M583.85 312.36v168.2a4 4 0 0 1-3.85 3.95l-191.65 5.1a4 4 0 0 1-4-3.95v-173.3a4 4 0 0 1 3.95-3.95h191.6a4 4 0 0 1 3.95 3.95","data-name":"Path 314"}),a.createElement("path",{fill:"#4267b2",d:"M397.09 319.15h177.5V467.4l-177.5 4Z","data-name":"Path 315"}),a.createElement("path",{d:"M863.09 533.65v13l-151.92 1.4-1.62.03-57.74.53-1.38.02-17.55.15h-.52l-106.98.99-175.61 1.63h-.15l-44.65.42-.48.01-198.4 1.82v-15l202.51-1.33h.48l40.99-.28h.19l283.08-1.87h.29l.17-.01h.47l4.79-.03h1.46l74.49-.5 4.4-.02.98-.01Z","data-name":"Path 316",opacity:.1}),a.createElement("circle",{cx:51.33,cy:51.33,r:51.33,fill:"#fbbebe","data-name":"Ellipse 111",transform:"translate(435.93 246.82)"}),a.createElement("path",{fill:"#fbbebe",d:"M538.6 377.16s-99.5 12-90 0c3.44-4.34 4.39-17.2 4.2-31.85-.06-4.45-.22-9.06-.45-13.65-1.1-22-3.75-43.5-3.75-43.5s87-41 77-8.5c-4 13.13-2.69 31.57.35 48.88.89 5.05 1.92 10 3 14.7a345 345 0 0 0 9.65 33.92","data-name":"Path 317"}),a.createElement("path",{fill:"#ff6584",d:"M506.13 373.09c11.51-2.13 23.7-6 34.53-1.54 2.85 1.17 5.47 2.88 8.39 3.86s6.12 1.22 9.16 1.91c10.68 2.42 19.34 10.55 24.9 20s8.44 20.14 11.26 30.72l6.9 25.83c6 22.45 12 45.09 13.39 68.3a2438 2438 0 0 1-250.84 1.43c5.44-10.34 11-21.31 10.54-33s-7.19-23.22-4.76-34.74c1.55-7.34 6.57-13.39 9.64-20.22 8.75-19.52 1.94-45.79 17.32-60.65 6.92-6.68 17-9.21 26.63-8.89 12.28.41 24.85 4.24 37 6.11 15.56 2.36 30.26 3.76 45.94.88","data-name":"Path 318"}),a.createElement("path",{d:"m637.03 484.26-.1 1.43v.1l-.17 2.3-1.33 18.51-1.61 22.3-.46 6.28-1 13.44v.17l-107 1-175.59 1.9v.84h-.14v-1.12l.45-14.36.86-28.06.74-23.79.07-2.37a10.53 10.53 0 0 1 11.42-10.17c4.72.4 10.85.89 18.18 1.41l3 .22c42.33 2.94 120.56 6.74 199.5 2 1.66-.09 3.33-.19 5-.31 12.24-.77 24.47-1.76 36.58-3a10.53 10.53 0 0 1 11.6 11.23Z","data-name":"Path 319",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"M349.74 552.53v-.84l175.62-1.91 107-1h.3v-.17l1-13.44.43-6 1.64-22.61 1.29-17.9v-.44a10.6 10.6 0 0 0-.11-2.47.3.3 0 0 0 0-.1 10.4 10.4 0 0 0-2-4.64 10.54 10.54 0 0 0-9.42-4 937 937 0 0 1-36.58 3c-1.67.12-3.34.22-5 .31-78.94 4.69-157.17.89-199.5-2l-3-.22c-7.33-.52-13.46-1-18.18-1.41a10.54 10.54 0 0 0-11.24 8.53 11 11 0 0 0-.18 1.64l-.68 22.16-.93 28.07-.44 14.36v1.12Z","data-name":"Path 320"}),a.createElement("path",{d:"m637.33 491.27-1.23 15.33-1.83 22.85-.46 5.72-1 12.81-.06.64v.17l-.15 1.48.11-1.48h-.29l-107 1-175.65 1.9v-.28l.49-14.36 1-28.06.64-18.65a6.36 6.36 0 0 1 3.06-5.25 6.25 6.25 0 0 1 3.78-.9c2.1.17 4.68.37 7.69.59 4.89.36 10.92.78 17.94 1.22 13 .82 29.31 1.7 48 2.42 52 2 122.2 2.67 188.88-3.17 3-.26 6.1-.55 9.13-.84a6.26 6.26 0 0 1 3.48.66 5 5 0 0 1 .86.54 6.14 6.14 0 0 1 2 2.46 3.6 3.6 0 0 1 .25.61 6.3 6.3 0 0 1 .36 2.59","data-name":"Path 321",opacity:.1}),a.createElement("path",{d:"M298.1 504.96v3.19a6.13 6.13 0 0 1-3.5 5.54l-40.1.77a6.12 6.12 0 0 1-3.57-5.57v-3Z","data-name":"Path 322",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"m298.59 515.57-52.25 1v-8.67l52.25-1Z","data-name":"Path 323"}),a.createElement("path",{d:"m298.59 515.57-52.25 1v-8.67l52.25-1Z","data-name":"Path 324",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"m300.59 515.57-52.25 1v-8.67l52.25-1Z","data-name":"Path 325"}),a.createElement("path",{d:"M679.22 506.96v3.19a6.13 6.13 0 0 0 3.5 5.54l40.1.77a6.12 6.12 0 0 0 3.57-5.57v-3Z","data-name":"Path 326",opacity:.1}),a.createElement("path",{d:"m678.72 517.57 52.25 1v-8.67l-52.25-1Z","data-name":"Path 327",opacity:.1}),a.createElement("path",{fill:"#3f3d56",d:"m676.72 517.57 52.25 1v-8.67l-52.25-1Z","data-name":"Path 328"}),a.createElement("path",{fill:"#3f3d56",d:"M454.79 313.88c.08 7-3.16 13.6-5.91 20.07a163.5 163.5 0 0 0-12.66 74.71c.73 11 2.58 22 .73 32.9s-8.43 21.77-19 24.9c17.53 10.45 41.26 9.35 57.76-2.66 8.79-6.4 15.34-15.33 21.75-24.11a97.86 97.86 0 0 1-13.31 44.75 103.43 103.43 0 0 0 73.51-40.82c4.31-5.81 8.06-12.19 9.72-19.23 3.09-13-1.22-26.51-4.51-39.5a266 266 0 0 1-6.17-33c-.43-3.56-.78-7.22.1-10.7 1-4.07 3.67-7.51 5.64-11.22 5.6-10.54 5.73-23.3 2.86-34.88s-8.49-22.26-14.06-32.81c-4.46-8.46-9.3-17.31-17.46-22.28-5.1-3.1-11-4.39-16.88-5.64l-25.37-5.43c-5.55-1.19-11.26-2.38-16.87-1.51-9.47 1.48-16.14 8.32-22 15.34-4.59 5.46-15.81 15.71-16.6 22.86-.72 6.59 5.1 17.63 6.09 24.58 1.3 9 2.22 6 7.3 11.52 3.21 3.42 5.28 7.37 5.34 12.16","data-name":"Path 329"})),a.createElement("path",{fill:"#fff",fillRule:"evenodd",d:"M280.139 370.832h43.635v17.662h-43.635Z","data-name":"Path 40"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M240.66 428.493a10.38 10.38 0 0 1-8.989-5.195 10.377 10.377 0 0 0 8.988 15.584h10.391v-10.389Z","data-name":"Path 41"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"m287.402 373.625 36.373-2.273v-5.195a10.39 10.39 0 0 0-10.39-10.389h-46.75l-1.3-2.249a1.5 1.5 0 0 0-2.6 0l-1.3 2.249-1.3-2.249a1.5 1.5 0 0 0-2.6 0l-1.3 2.249-1.3-2.249a1.5 1.5 0 0 0-2.6 0l-1.3 2.249h-.034l-2.152-2.151a1.5 1.5 0 0 0-2.508.672l-.696 2.653-2.7-.723a1.5 1.5 0 0 0-1.836 1.837l.722 2.7-2.65.71a1.5 1.5 0 0 0-.673 2.509l2.152 2.152v.033l-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.25 1.282-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3-2.249 1.3a1.5 1.5 0 0 0 0 2.6l2.249 1.3a10.39 10.39 0 0 0 10.389 10.34h62.335a10.39 10.39 0 0 0 10.39-10.39v-41.557l-36.373-2.273a5.53 5.53 0 0 1 0-11.038","data-name":"Path 42"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M302.996 438.882h15.584v-20.779h-15.584Z","data-name":"Path 43"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M328.97 425.895a3 3 0 0 0-.332.033q-.028-.117-.06-.234a2.594 2.594 0 1 0-2.567-4.455q-.086-.088-.174-.175a2.593 2.593 0 1 0-4.461-2.569q-.115-.031-.231-.06a2.6 2.6 0 1 0-5.128 0q-.116.029-.231.06a2.594 2.594 0 1 0-4.461 2.569 10.384 10.384 0 1 0 17.314 9.992 2.592 2.592 0 1 0 .332-5.161","data-name":"Path 44"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M308.191 407.713h15.584v-10.389h-15.584Z","data-name":"Path 45"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M328.969 403.818a1.3 1.3 0 1 0 0-2.6 1 1 0 0 0-.166.017l-.03-.117a1.3 1.3 0 0 0-.5-2.5 1.3 1.3 0 0 0-.783.269l-.087-.087a1.3 1.3 0 0 0 .263-.776 1.3 1.3 0 0 0-2.493-.509 5.195 5.195 0 1 0 0 10 1.3 1.3 0 0 0 2.493-.509 1.3 1.3 0 0 0-.263-.776l.087-.087a1.3 1.3 0 0 0 .783.269 1.3 1.3 0 0 0 .5-2.5q.016-.058.03-.117a1 1 0 0 0 .166.017","data-name":"Path 46"}),a.createElement("path",{fillRule:"evenodd",d:"M261.439 372.65a1.3 1.3 0 0 1-1.3-1.3 3.9 3.9 0 0 0-7.792 0 1.3 1.3 0 1 1-2.6 0 6.494 6.494 0 0 1 12.987 0 1.3 1.3 0 0 1-1.3 1.3","data-name":"Path 47"}),a.createElement("path",{fill:"#ffff50",fillRule:"evenodd",d:"M282.217 438.882h31.168a10.39 10.39 0 0 0 10.389-10.389V392.13h-31.168a10.39 10.39 0 0 0-10.389 10.389Z","data-name":"Path 48"}),a.createElement("path",{fillRule:"evenodd",d:"M315.993 408.233h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m0 10.389h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m0 10.389h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m0-25.877h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m0 10.293h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m0 10.389h-25.994a.52.52 0 1 1 0-1.039h25.994a.52.52 0 0 1 0 1.039m7.782-47.993h-.018c-1.605.055-2.365 1.66-3.035 3.077-.7 1.48-1.24 2.443-2.126 2.414-.981-.035-1.542-1.144-2.137-2.317-.683-1.347-1.462-2.876-3.1-2.819-1.582.054-2.344 1.451-3.017 2.684-.715 1.313-1.2 2.112-2.141 2.075-1-.036-1.533-.938-2.149-1.981-.686-1.162-1.479-2.467-3.084-2.423-1.555.053-2.319 1.239-2.994 2.286-.713 1.106-1.213 1.781-2.164 1.741-1.025-.036-1.554-.784-2.167-1.65-.688-.973-1.463-2.074-3.062-2.021a3.82 3.82 0 0 0-2.959 1.879c-.64.812-1.14 1.456-2.2 1.415a.52.52 0 0 0-.037 1.039 3.59 3.59 0 0 0 3.05-1.811c.611-.777 1.139-1.448 2.178-1.483 1-.043 1.47.579 2.179 1.582.674.953 1.438 2.033 2.977 2.089 1.612.054 2.387-1.151 3.074-2.217.614-.953 1.144-1.775 2.156-1.81.931-.035 1.438.7 2.153 1.912.674 1.141 1.437 2.434 3.006 2.491 1.623.056 2.407-1.361 3.09-2.616.592-1.085 1.15-2.109 2.14-2.143.931-.022 1.417.829 2.135 2.249.671 1.326 1.432 2.828 3.026 2.886h.088c1.592 0 2.347-1.6 3.015-3.01.592-1.252 1.152-2.431 2.113-2.479Z","data-name":"Path 49"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M271.828 438.882h20.779v-20.779h-20.779Z","data-name":"Path 50"}),a.createElement("g",{"data-name":"Group 8",transform:"rotate(-14.98 1643.944 -873.93)"},a.createElement("rect",{width:43.906,height:17.333,fill:"#d8d8d8","data-name":"Rectangle 3",rx:2}),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 2",transform:"translate(.728 10.948)"},a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 4",rx:1,transform:"translate(7.985)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 5",rx:1,transform:"translate(10.991)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 6",rx:1,transform:"translate(13.997)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 7",rx:1,transform:"translate(17.003)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 8",rx:1,transform:"translate(20.009)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 9",rx:1,transform:"translate(23.015)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 10",rx:1,transform:"translate(26.021)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 11",rx:1,transform:"translate(29.028)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 12",rx:1,transform:"translate(32.034)"}),a.createElement("path",{fillRule:"evenodd",d:"M.519 0H6.9a.52.52 0 0 1 .521.52v1.5a.52.52 0 0 1-.519.519H.519A.52.52 0 0 1 0 2.017V.519A.52.52 0 0 1 .519 0m35.134 0h6.383a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519h-6.384a.52.52 0 0 1-.519-.519v-1.5A.52.52 0 0 1 35.652 0Z","data-name":"Path 51"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 3",transform:"translate(.728 4.878)"},a.createElement("path",{fillRule:"evenodd",d:"M.519 0h2.437a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519H.519A.52.52 0 0 1 0 2.017V.519A.52.52 0 0 1 .519 0","data-name":"Path 52"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 13",rx:1,transform:"translate(3.945)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 14",rx:1,transform:"translate(6.951)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 15",rx:1,transform:"translate(9.958)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 16",rx:1,transform:"translate(12.964)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 17",rx:1,transform:"translate(15.97)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 18",rx:1,transform:"translate(18.976)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 19",rx:1,transform:"translate(21.982)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 20",rx:1,transform:"translate(24.988)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 21",rx:1,transform:"translate(27.994)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 22",rx:1,transform:"translate(31)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 23",rx:1,transform:"translate(34.006)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 24",rx:1,transform:"translate(37.012)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 25",rx:1,transform:"translate(40.018)"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 4",transform:"rotate(180 21.642 2.269)"},a.createElement("path",{fillRule:"evenodd",d:"M.519 0h2.437a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519H.519A.52.52 0 0 1 0 2.017V.519A.52.52 0 0 1 .519 0","data-name":"Path 53"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 26",rx:1,transform:"translate(3.945)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 27",rx:1,transform:"translate(6.951)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 28",rx:1,transform:"translate(9.958)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 29",rx:1,transform:"translate(12.964)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 30",rx:1,transform:"translate(15.97)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 31",rx:1,transform:"translate(18.976)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 32",rx:1,transform:"translate(21.982)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 33",rx:1,transform:"translate(24.988)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 34",rx:1,transform:"translate(27.994)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 35",rx:1,transform:"translate(31.001)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 36",rx:1,transform:"translate(34.007)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 37",rx:1,transform:"translate(37.013)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 38",rx:1,transform:"translate(40.018)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 39",rx:1,transform:"translate(3.945)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 40",rx:1,transform:"translate(6.951)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 41",rx:1,transform:"translate(9.958)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 42",rx:1,transform:"translate(12.964)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 43",rx:1,transform:"translate(15.97)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 44",rx:1,transform:"translate(18.976)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 45",rx:1,transform:"translate(21.982)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 46",rx:1,transform:"translate(24.988)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 47",rx:1,transform:"translate(27.994)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 48",rx:1,transform:"translate(31.001)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 49",rx:1,transform:"translate(34.007)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 50",rx:1,transform:"translate(37.013)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 51",rx:1,transform:"translate(40.018)"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 6"},a.createElement("path",{fillRule:"evenodd",d:"M1.247 7.883h3.47a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519h-3.47A.52.52 0 0 1 .728 9.9V8.403a.52.52 0 0 1 .519-.52","data-name":"Path 54"}),a.createElement("g",{"data-name":"Group 5",transform:"translate(5.801 7.883)"},a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 52",rx:1}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 53",rx:1,transform:"translate(3.006)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 54",rx:1,transform:"translate(6.012)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 55",rx:1,transform:"translate(9.018)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 56",rx:1,transform:"translate(12.025)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 57",rx:1,transform:"translate(15.031)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 58",rx:1,transform:"translate(18.037)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 59",rx:1,transform:"translate(21.042)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 60",rx:1,transform:"translate(24.049)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 61",rx:1,transform:"translate(27.055)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 62",rx:1,transform:"translate(30.061)"})),a.createElement("path",{fillRule:"evenodd",d:"M39.482 7.883h3.28a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519h-3.281a.52.52 0 0 1-.519-.521V8.403a.52.52 0 0 1 .519-.52Z","data-name":"Path 55"})),a.createElement("g",{fill:"#4a4a4a","data-name":"Group 7",transform:"translate(.728 14.084)"},a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 63",rx:1}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 64",rx:1,transform:"translate(3.006)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 65",rx:1,transform:"translate(6.012)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 66",rx:1,transform:"translate(9.018)"}),a.createElement("path",{fillRule:"evenodd",d:"M12.543 0h14.462a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519H12.543a.52.52 0 0 1-.519-.52V.519A.52.52 0 0 1 12.543 0m15.97 0h1.874a.52.52 0 0 1 .519.519v1.5a.52.52 0 0 1-.519.519h-1.874a.52.52 0 0 1-.519-.519v-1.5A.52.52 0 0 1 28.513 0","data-name":"Path 56"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 67",rx:1,transform:"translate(31.376)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 68",rx:1,transform:"translate(34.382)"}),a.createElement("rect",{width:2.537,height:2.537,"data-name":"Rectangle 69",rx:1,transform:"translate(40.018)"}),a.createElement("path",{d:"M37.199 1.08V.519A.52.52 0 0 1 37.718 0h1.499a.52.52 0 0 1 .519.519v.561Z","data-name":"Path 57"}),a.createElement("path",{d:"M39.737 1.456v.561a.52.52 0 0 1-.519.519h-1.499a.52.52 0 0 1-.519-.519v-.561Z","data-name":"Path 58"})),a.createElement("rect",{width:42.273,height:1.127,fill:"#4a4a4a","data-name":"Rectangle 70",rx:.564,transform:"translate(.915 .556)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 71",opacity:.136,rx:.376,transform:"translate(1.949 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 72",opacity:.136,rx:.376,transform:"translate(5.193 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 73",opacity:.136,rx:.376,transform:"translate(7.688 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 74",opacity:.136,rx:.376,transform:"translate(10.183 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 75",opacity:.136,rx:.376,transform:"translate(12.679 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 76",opacity:.136,rx:.376,transform:"translate(15.797 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 77",opacity:.136,rx:.376,transform:"translate(18.292 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 78",opacity:.136,rx:.376,transform:"translate(20.788 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 79",opacity:.136,rx:.376,transform:"translate(23.283 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 80",opacity:.136,rx:.376,transform:"translate(26.402 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 81",opacity:.136,rx:.376,transform:"translate(28.897 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 82",opacity:.136,rx:.376,transform:"translate(31.393 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 83",opacity:.136,rx:.376,transform:"translate(34.512 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 84",opacity:.136,rx:.376,transform:"translate(37.007 .744)"}),a.createElement("rect",{width:2.37,height:.752,fill:"#d8d8d8","data-name":"Rectangle 85",opacity:.136,rx:.376,transform:"translate(39.502 .744)"})),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M302.996 425.895a3 3 0 0 0-.332.033q-.029-.117-.06-.234a2.594 2.594 0 1 0-2.567-4.455q-.086-.088-.174-.175a2.593 2.593 0 1 0-4.461-2.569q-.116-.031-.231-.06a2.6 2.6 0 1 0-5.128 0q-.115.029-.231.06a2.594 2.594 0 1 0-4.461 2.569 10.384 10.384 0 1 0 17.314 9.992 2.592 2.592 0 1 0 .332-5.161","data-name":"Path 59"}),a.createElement("path",{fill:"#3ecc5f",fillRule:"evenodd",d:"M271.828 407.713h20.779v-10.389h-20.779Z","data-name":"Path 60"}),a.createElement("path",{fill:"#44d860",fillRule:"evenodd",d:"M297.801 403.818a1.3 1.3 0 1 0 0-2.6 1 1 0 0 0-.166.017l-.03-.117a1.3 1.3 0 0 0-.5-2.5 1.3 1.3 0 0 0-.783.269l-.087-.087a1.3 1.3 0 0 0 .263-.776 1.3 1.3 0 0 0-2.493-.509 5.195 5.195 0 1 0 0 10 1.3 1.3 0 0 0 2.493-.509 1.3 1.3 0 0 0-.263-.776l.087-.087a1.3 1.3 0 0 0 .783.269 1.3 1.3 0 0 0 .5-2.5q.016-.058.03-.117a1 1 0 0 0 .166.017","data-name":"Path 61"}),a.createElement("path",{fillRule:"evenodd",d:"M302.997 365.507a1.4 1.4 0 0 1-.255-.026 1.3 1.3 0 0 1-.244-.073 1.4 1.4 0 0 1-.224-.119 2 2 0 0 1-.2-.161 1.5 1.5 0 0 1-.161-.2 1.3 1.3 0 0 1-.218-.722 1.4 1.4 0 0 1 .026-.255 1.5 1.5 0 0 1 .072-.244 1.4 1.4 0 0 1 .12-.223 1.3 1.3 0 0 1 .358-.358 1.4 1.4 0 0 1 .224-.119 1.3 1.3 0 0 1 .244-.073 1.2 1.2 0 0 1 .509 0 1.3 1.3 0 0 1 .468.192 2 2 0 0 1 .2.161 2 2 0 0 1 .161.2 1.3 1.3 0 0 1 .12.223 1.4 1.4 0 0 1 .1.5 1.32 1.32 0 0 1-.379.919 2 2 0 0 1-.2.161 1.4 1.4 0 0 1-.223.119 1.3 1.3 0 0 1-.5.1m10.389-.649a1.33 1.33 0 0 1-.92-.379 2 2 0 0 1-.161-.2 1.3 1.3 0 0 1-.218-.722 1.33 1.33 0 0 1 .379-.919 2 2 0 0 1 .2-.161 1.4 1.4 0 0 1 .224-.119 1.3 1.3 0 0 1 .244-.073 1.2 1.2 0 0 1 .509 0 1.3 1.3 0 0 1 .468.192 2 2 0 0 1 .2.161 1.33 1.33 0 0 1 .379.919 1.5 1.5 0 0 1-.026.255 1.3 1.3 0 0 1-.073.244 2 2 0 0 1-.119.223 2 2 0 0 1-.161.2 2 2 0 0 1-.2.161 1.3 1.3 0 0 1-.722.218","data-name":"Path 62"}),a.createElement("g",{fill:"#61dafb",transform:"translate(466.3 278.56)"},a.createElement("path",{d:"M263.668 117.179c0-5.827-7.3-11.35-18.487-14.775 2.582-11.4 1.434-20.477-3.622-23.382a7.86 7.86 0 0 0-4.016-1v4a4.15 4.15 0 0 1 2.044.466c2.439 1.4 3.5 6.724 2.672 13.574-.2 1.685-.52 3.461-.914 5.272a87 87 0 0 0-11.386-1.954 87.5 87.5 0 0 0-7.459-8.965c5.845-5.433 11.332-8.41 15.062-8.41V78c-4.931 0-11.386 3.514-17.913 9.611-6.527-6.061-12.982-9.539-17.913-9.539v4c3.712 0 9.216 2.959 15.062 8.356a85 85 0 0 0-7.405 8.947 84 84 0 0 0-11.4 1.972 54 54 0 0 1-.932-5.2c-.843-6.85.2-12.175 2.618-13.592a4 4 0 0 1 2.062-.466v-4a8 8 0 0 0-4.052 1c-5.039 2.9-6.168 11.96-3.568 23.328-11.153 3.443-18.415 8.947-18.415 14.757 0 5.828 7.3 11.35 18.487 14.775-2.582 11.4-1.434 20.477 3.622 23.382a7.9 7.9 0 0 0 4.034 1c4.931 0 11.386-3.514 17.913-9.611 6.527 6.061 12.982 9.539 17.913 9.539a8 8 0 0 0 4.052-1c5.039-2.9 6.168-11.96 3.568-23.328 11.111-3.42 18.373-8.943 18.373-14.752m-23.346-11.96a80 80 0 0 1-2.421 7.083 83 83 0 0 0-2.349-4.3 97 97 0 0 0-2.582-4.2c2.547.377 5.004.843 7.353 1.417Zm-8.212 19.1c-1.4 2.421-2.833 4.716-4.321 6.85a93 93 0 0 1-8.1.359c-2.708 0-5.415-.126-8.069-.341q-2.232-3.2-4.339-6.814-2.044-3.523-3.73-7.136a94 94 0 0 1 3.712-7.154c1.4-2.421 2.833-4.716 4.321-6.85a93 93 0 0 1 8.1-.359c2.708 0 5.415.126 8.069.341q2.232 3.2 4.339 6.814 2.044 3.523 3.73 7.136a101 101 0 0 1-3.712 7.15Zm5.792-2.331a77 77 0 0 1 2.474 7.136 80 80 0 0 1-7.387 1.434c.879-1.381 1.757-2.8 2.582-4.25a96 96 0 0 0 2.329-4.324Zm-18.182 19.128a74 74 0 0 1-4.985-5.738c1.614.072 3.263.126 4.931.126 1.685 0 3.353-.036 4.985-.126a70 70 0 0 1-4.931 5.738m-13.34-10.561c-2.546-.377-5-.843-7.352-1.417a80 80 0 0 1 2.421-7.083c.735 1.434 1.506 2.869 2.349 4.3s1.702 2.837 2.582 4.2m13.25-37.314a74 74 0 0 1 4.985 5.738 111 111 0 0 0-4.931-.126c-1.686 0-3.353.036-4.985.126a70 70 0 0 1 4.931-5.738M206.362 103.8a101 101 0 0 0-4.913 8.55 77 77 0 0 1-2.474-7.136 90 90 0 0 1 7.387-1.414m-16.227 22.449c-6.348-2.708-10.454-6.258-10.454-9.073s4.106-6.383 10.454-9.073c1.542-.663 3.228-1.255 4.967-1.811a86 86 0 0 0 4.034 10.92 85 85 0 0 0-3.981 10.866 54 54 0 0 1-5.021-1.826Zm9.647 25.623c-2.439-1.4-3.5-6.724-2.672-13.574.2-1.686.52-3.461.914-5.272a87 87 0 0 0 11.386 1.954 87.5 87.5 0 0 0 7.459 8.965c-5.845 5.433-11.332 8.41-15.062 8.41a4.3 4.3 0 0 1-2.026-.48Zm42.532-13.663c.843 6.85-.2 12.175-2.618 13.592a4 4 0 0 1-2.062.466c-3.712 0-9.216-2.959-15.062-8.356a85 85 0 0 0 7.405-8.947 84 84 0 0 0 11.4-1.972 50 50 0 0 1 .936 5.22Zm6.9-11.96c-1.542.663-3.228 1.255-4.967 1.811a86 86 0 0 0-4.034-10.92 85 85 0 0 0 3.981-10.866 57 57 0 0 1 5.039 1.829c6.348 2.708 10.454 6.258 10.454 9.073-.017 2.818-4.123 6.386-10.471 9.076Z","data-name":"Path 330"}),a.createElement("path",{d:"M201.718 78.072","data-name":"Path 331"}),a.createElement("circle",{cx:8.194,cy:8.194,r:8.194,"data-name":"Ellipse 112",transform:"translate(211.472 108.984)"}),a.createElement("path",{d:"M237.525 78.018","data-name":"Path 332"})))))}}]);